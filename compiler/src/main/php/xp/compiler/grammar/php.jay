%{
  uses(
    'xp.compiler.types.TypeName',
    'xp.compiler.ast.ParseTree',
    'xp.compiler.ast.PackageNode',
    'xp.compiler.ast.ImportNode',
    'xp.compiler.ast.StaticImportNode',
    'xp.compiler.ast.NativeImportNode',
    'xp.compiler.ast.AnnotationNode',
    'xp.compiler.ast.BracedExpressionNode',
    'xp.compiler.ast.DynamicInstanceOfNode',
    'xp.compiler.ast.DynamicInstanceCreationNode',
    'xp.compiler.ast.DynamicVariableReferenceNode',
    'xp.compiler.ast.ClassNode',
    'xp.compiler.ast.EnumNode',
    'xp.compiler.ast.EnumMemberNode',
    'xp.compiler.ast.InterfaceNode',
    'xp.compiler.ast.FieldNode',
    'xp.compiler.ast.ConstructorNode',
    'xp.compiler.ast.MethodNode',
    'xp.compiler.ast.OperatorNode',
    'xp.compiler.ast.ReturnNode',
    'xp.compiler.ast.InstanceCreationNode',
    'xp.compiler.ast.VariableNode',
    'xp.compiler.ast.ArrayAccessNode',
    'xp.compiler.ast.CastNode',
    'xp.compiler.ast.TryNode',
    'xp.compiler.ast.CatchNode',
    'xp.compiler.ast.ThrowNode',
    'xp.compiler.ast.FinallyNode',
    'xp.compiler.ast.ForNode',
    'xp.compiler.ast.ForeachNode',
    'xp.compiler.ast.DoNode',
    'xp.compiler.ast.WhileNode',
    'xp.compiler.ast.AssignmentNode',
    'xp.compiler.ast.InvocationNode',
    'xp.compiler.ast.MethodCallNode',
    'xp.compiler.ast.StaticMethodCallNode',
    'xp.compiler.ast.MemberAccessNode',
    'xp.compiler.ast.StaticMemberAccessNode',
    'xp.compiler.ast.ConstantNode',
    'xp.compiler.ast.ConstantAccessNode',
    'xp.compiler.ast.ClassAccessNode',
    'xp.compiler.ast.IntegerNode',
    'xp.compiler.ast.HexNode',
    'xp.compiler.ast.OctalNode',
    'xp.compiler.ast.DecimalNode',
    'xp.compiler.ast.StringNode',
    'xp.compiler.ast.BooleanNode',
    'xp.compiler.ast.NullNode',
    'xp.compiler.ast.ArrayNode',
    'xp.compiler.ast.MapNode',
    'xp.compiler.ast.ClassConstantNode',
    'xp.compiler.ast.InstanceOfNode',
    'xp.compiler.ast.ComparisonNode',
    'xp.compiler.ast.BinaryOpNode',
    'xp.compiler.ast.BooleanOpNode',
    'xp.compiler.ast.UnaryOpNode',
    'xp.compiler.ast.TernaryNode',
    'xp.compiler.ast.SwitchNode',
    'xp.compiler.ast.CaseNode',
    'xp.compiler.ast.DefaultNode',
    'xp.compiler.ast.BreakNode',
    'xp.compiler.ast.ContinueNode',
    'xp.compiler.ast.CloneNode',
    'xp.compiler.ast.IfNode',
    'xp.compiler.ast.ElseNode',
    'xp.compiler.ast.LambdaNode',
    'xp.compiler.ast.NoopNode',
    'xp.compiler.ast.SilenceOperatorNode'
  );
%}

%left ','
%left '(' ')'
%left T_BOOLEAN_OR
%left T_BOOLEAN_AND
%right '=' T_ADD_EQUAL T_SUB_EQUAL T_MUL_EQUAL T_DIV_EQUAL T_CONCAT_EQUAL T_MOD_EQUAL T_SHR T_SHL T_AND_EQUAL T_OR_EQUAL T_XOR_EQUAL
%left '?' ':'
%left '|'
%left '^'
%left '&'
%nonassoc '.' T_EQUALS T_NOT_EQUALS
%nonassoc '<' T_SE '>' T_GE
%left '+' '-'
%left '*' '/' '%'
%right '!'
%nonassoc T_INSTANCEOF
%right '~' T_INC T_DEC
%right '[' T_AS
%nonassoc T_NEW T_CLONE
%right '@'

%token T_WORD 260
%token T_STRING 261
%token T_NUMBER 262
%token T_DECIMAL 263
%token T_HEX 264
%token T_OCTAL 265

%token T_PUBLIC 280
%token T_PRIVATE 281
%token T_PROTECTED 282
%token T_STATIC 283
%token T_FINAL 284
%token T_ABSTRACT 285

%token T_CLASS 300
%token T_INTERFACE 301

%token T_EXTENDS 310
%token T_IMPLEMENTS 311
%token T_INSTANCEOF 312
%token T_CLONE 313

%token T_NAMESPACE 320
%token T_USE 321

%token T_AS 331
%token T_OBJECT_OPERATOR 332
%token T_ARRAY 333
%token T_FUNCTION 334
%token T_CONST 335

%token T_VARIABLE 340
%token T_RETURN 341
%token T_TRY 342
%token T_THROW 343
%token T_CATCH 344
%token T_NEW 346

%token T_FOR 360
%token T_WHILE 361
%token T_DO 362
%token T_FOREACH 363
%token T_IN 364
%token T_BREAK 365
%token T_CONTINUE 366

%token T_IF 370
%token T_ELSE 371
%token T_SWITCH 372
%token T_CASE 373
%token T_DEFAULT 374

%token T_GE 400
%token T_SE 401
%token T_INC 402
%token T_DEC 403
%token T_ADD_EQUAL 404
%token T_SUB_EQUAL 405
%token T_MUL_EQUAL 406
%token T_DIV_EQUAL 407
%token T_MOD_EQUAL 408
%token T_DOUBLE_COLON 410
%token T_EQUALS 411
%token T_NOT_EQUALS 412
%token T_DOUBLE_ARROW 413
%token T_BOOLEAN_OR 414
%token T_BOOLEAN_AND 415
%token T_CONCAT_EQUAL 416
%token T_OR_EQUAL 417
%token T_AND_EQUAL 418
%token T_XOR_EQUAL 419
%token T_SHR 420
%token T_SHL 421

%%

start:
    package_opt uses_opt declaration {
      $$= new ParseTree();
      $$->origin= $yyLex->fileName;
      $$->package= $1;
      $$->imports= (array)$2;
      $$->declaration= $3;
      foreach (get_loaded_extensions() as $ext) {
        $$->imports[]= new NativeImportNode(array('name' => $ext.'.*'));
      }
    }
;

// {{{ Packages, imports
package_opt:
    /* empty */
  | T_NAMESPACE { $1= $yyLex->create(new PackageNode()); } qualifiedname ';' {
      $1->name= $3;
    }
;

uses_opt:
    /* empty */ 
  | uses
;

uses:
    use { $$= array($1); }
  | uses use { $$= array_merge($1, array($2)); }
;

use:
    T_USE qualifiedname ';' {
      $$= $yyLex->create(new ImportNode(array('name' => $2))); 
    }
;

qualifiedname:
    T_WORD
  | T_WORD '\\' qualifiedname { $$= $1.'.'.$3; }
;
// }}}

// {{{ Class and interface declarations
declaration:
    decorations T_CLASS { $2= $yyLex->create(new ClassNode(), TRUE); } typename classparents_opt implements_opt '{' classbody '}' {
      $2->modifiers= $1[0];
      $2->annotations= $1[1];
      $2->name= $4;
      $2->parent= $5;
      $2->implements= $6;
      $2->body= $8;
      $$= $2;
    }
  | decorations T_INTERFACE { $2= $yyLex->create(new InterfaceNode(), TRUE); } typename interfaceparents_opt '{' classbody '}' {
      $2->modifiers= $1[0];
      $2->annotations= $1[1];
      $2->name= $4;
      $2->parents= $5;
      $2->body= $7;
      $$= $2;
    }
;

classparents_opt:
    /* empty */    { $$= NULL; }
  | T_EXTENDS typename { $$= $2; }
;

implements_opt:
    /* empty */ { $$= array(); }
  | T_IMPLEMENTS name_list { $$= $2; }
;

interfaceparents_opt:
    /* empty */    { $$= NULL; }
  | T_EXTENDS name_list { $$= $2; }
;

classbody:
    classbody classmember { $$= array_merge((array)$1, $2); }
  | /* empty */ { $$= NULL; }
;

classmember:
    fieldlist { $$= $1; }
  | T_CONST cconstlist { $$= $2; }
  | method { $$= array($1); }
;

fieldlist:
    field ';' { $$= array($1); }
  | field ',' fieldlist { $$= array_merge(array($1), $3); }
;

cconstlist:
    cconst ';' { $$= array($1); }
  | cconst ',' cconstlist { $$= array_merge(array($1), $3); }
;
// }}}

// {{{ Fields and properties
field:
    decorations T_VARIABLE initialization_opt { $$= $yyLex->create(new FieldNode());
      $$->modifiers= $1[0];
      $$->annotations= $1[1];
      $$->type= new TypeName('var');
      $$->name= $2;
      $$->initialization= $3;
    }
;

cconst:
    T_WORD '=' scalar {
      $$= $yyLex->create(new ClassConstantNode($1, TypeName::$VAR, $3));
    }
;

initialization_opt:
    /* empty */    { $$= NULL; }
  | '=' expression { $$= $2; }
;
// }}}

// {{{ Methods and operators
method:
    decorations T_FUNCTION T_WORD '(' { $4= $yyLex->create('__construct' == $3 ? new ConstructorNode() :  new MethodNode(), TRUE); } parameters_opt ')' returntype_opt methodbody {
      $4->modifiers= $1[0];
      $4->annotations= $1[1];
      $4->returns= $8;
      $4->name= $3;
      $4->parameters= $6;
      $4->throws= NULL;
      $4->body= $9;
      $4->extension= NULL;
      $$= $4;
    }
;

returntype_opt:
    /* empty */    { $$= TypeName::$VAR; }
  | ':' typeref    { $$= $2; }
;


decorations:
    '#' '[' annotations ']' modifiers_opt { $$= array($5, $3); }
  | modifiers_opt { $$= array($1, NULL); }
;

annotations:
    annotation  { $$= array($1); }
  | annotation ',' annotations { $$= array_merge(array($1), $3); }
;

annotation:
    '@' qualifiedname { 
      $$= $yyLex->create(new AnnotationNode()); 
      $$->type= $2; 
    }
  | '@' qualifiedname '(' literal ')' { 
      $$= $yyLex->create(new AnnotationNode()); 
      $$->type= $2; 
      $4 && $$->parameters= array('default' => $4);
    }
  | '@' qualifiedname '(' annotationmembers ')' { 
      $$= $yyLex->create(new AnnotationNode()); 
      $$->type= $2; 
      $$->parameters= $4;
    }
;

annotationmembers:
    annotationmember { $$= $1; }
  | annotationmember ',' annotationmembers { $$= array_merge($1, $3); }
;

annotationmember:
    T_WORD '=' literal { $$= array($1 => $3); }
  | T_CLASS '=' literal { $$= array($1 => $3); }
;

methodbody:
    ';' { $$= NULL; }
  | '{' statements_opt '}' { $$= (array)$2; }
;

parameters_opt:
    /* empty */ { $$= NULL; }
  | parameters  { $$= $1; }
;

parameters:
    parameter  { $$= array($1); }
  | parameter ',' parameters { $$= array_merge(array($1), $3); }
;

parameter:
	typeref T_VARIABLE initialization_opt { $$= array('name' => $2, 'type' => $1, 'check' => TRUE); $3 && $$['default']= $3; }
  | T_VARIABLE initialization_opt { $$= array('name' => $1, 'type' => new TypeName('var'), 'check' => FALSE); $2 && $$['default']= $2; }
;
// }}}

// {{{ Statements
// Note: Standalone literals are really no-ops and can be optimized away. 
// Still, we do allow them
statements_opt:
    /* empty */ { $$= NULL; }
  | statements
;

statements:
    block { $$= $1; }
  | block statements { $$= array_merge($1, $2); }
;

statement:
    T_RETURN { $1= $yyLex->create(new ReturnNode()); } expression_opt ';' { 
      $$->expression= $3;
    }
  | T_IF { $1= $yyLex->create(new IfNode()); } '(' expression ')' block else_opt {
      $1->condition= $4;
      $1->statements= $6;
      $1->otherwise= $7;
    }
  | T_FOR { $1= $yyLex->create(new ForNode()); } '(' expressionlist_opt ';' expressionlist_opt ';' expressionlist_opt ')' block {
      if ($4) {
        $1->initialization= $4;
      }
      if ($8) {
        $1->loop= $8;
      }
      $1->condition= $6;
      $1->statements= $10;
    }
  | T_FOREACH { $1= $yyLex->create(new ForeachNode()); } '(' expression T_AS foreachassign ')' block {
      $1->expression= $4;
      $1->assignment= $6;
      $1->statements= $8;
    }
  | T_WHILE { $1= $yyLex->create(new WhileNode()); } '(' expression ')' block {
      $1->expression= $4;
      $1->statements= $6;
    }
  | T_DO { $1= $yyLex->create(new DoNode()); } block T_WHILE '(' expression ')' ';' {
      $1->expression= $6;
      $1->statements= $3;
    }
  | T_SWITCH { $1= $yyLex->create(new SwitchNode()); } '(' expression ')' '{' cases_opt '}' {
      $1->expression= $4;
      $1->cases= $7;
    }
  | T_TRY '{' { $2= $yyLex->create(new TryNode()); } statements_opt '}' handleexception { 
      $2->statements= $4;
      $2->handling= $6;
      $$= $2; 
    }
  | T_BREAK { $1= $yyLex->create(new BreakNode()); } ';'
  | T_CONTINUE { $1= $yyLex->create(new ContinueNode()); } ';'
  | T_THROW { $1= $yyLex->create(new ThrowNode()); } expression ';' {
      $1->expression= $3;
    }
  | expression ';'
  | ';' { $$= $yyLex->create(new NoopNode()); }
;

foreachassign:
    T_VARIABLE { $$= array('key' => NULL, 'value' => $1); }
  | T_VARIABLE T_DOUBLE_ARROW T_VARIABLE { $$= array('key' => $1, 'value' => $3); }
;

cases_opt:
    /* empty */ { $$= NULL; }
  | cases
;

cases:
    case { $$= array($1); }
  | case cases { $$= array_merge(array($1), $2); }
;

case:
    T_CASE { $1= $yyLex->create(new CaseNode()); } expression ':' statements_opt { 
      $1->expression= $3;
      $1->statements= $5;
    }
  | T_DEFAULT { $1= $yyLex->create(new DefaultNode()); } ':' statements_opt { 
      $1->statements= $4;
    }
;

block:
    statement { $$= array($1); }
  | '{' statements_opt '}' { $$= $2; }
;
   
else_opt:
    /* empty */ { $$= NULL; }
  | T_ELSE { $1= $yyLex->create(new ElseNode()); } block { $1->statements= $3; }
;

    
handleexception:
    catches
;

catches:
    catch { $$= array($1); }
  | catch catches { $$= array_merge(array($1), $2); }
;

catch:
  T_CATCH { $1= $yyLex->create(new CatchNode()); } '(' typename T_VARIABLE ')' '{' statements_opt '}' {
    $1->type= $4;
    $1->variable= $5;
    $1->statements= $8;
  }
;
// }}}

// {{{ Expressions
expressionlist_opt:
    /* empty */ { $$= NULL; }
  | expressionlist
;

expressionlist:
    expression { $$= array($1); }
  | expressionlist ',' expression_opt { $$= $3 ? array_merge($1, array($3)) : $1; }
;

expression_opt:
    /* empty */ { $$= NULL; }
  | expression
;

instancecreation:
    typeref '(' expressionlist_opt ')' {
      $$= new InstanceCreationNode();
      $$->type= $1;
      $$->parameters= $3;
    }
  | T_VARIABLE '(' expressionlist_opt ')' {
      $$= new DynamicInstanceCreationNode();
      $$->variable= $1;
      $$->parameters= $3;
    }
;

staticmember:
    T_VARIABLE { 
      $$= new StaticMemberAccessNode(NULL, $1); 
    }
  | T_WORD '(' expressionlist_opt ')' { 
      $$= new StaticMethodCallNode(NULL, $1, $3); 
    }
  | T_WORD {
      $$= new ConstantAccessNode(NULL, $1);
    }
;

expression:
    literal
  | T_VARIABLE { $1= $yyLex->create(new VariableNode($1)); } chain_opt {
      if ($3) {
        $$= $3[0];
        $3[1]->target= $1;
      }
    }
  | T_NEW { $p= $yyLex->position; } instancecreation { 
      $3->position= $p;
      $$= $3;
    }
  | qualifiedname T_DOUBLE_COLON { $p= $yyLex->position; } staticmember chain_opt {
      $4->position= $p;
      $4->type= new TypeName($1);
      if ($5) {
        $$= $5[0];
        $5[1]->target= $4;
      } else {
        $$= $4;
      }
    } 
  | T_WORD '(' { $2= $yyLex->create(new InvocationNode($1)); } expressionlist_opt ')' chain_opt { 
      $2->arguments= $4;
      if ($6) {
        $$= $6[0];
        $6[1]->target= $2;
      } else {
        $$= $2;
      }
    }
  | T_CLONE expression { 
      $$= $yyLex->create(new CloneNode($2)); break;
    }
  | assignment { 
      $$= $yyLex->create(new AssignmentNode($1)); 
    }
  | comparison { 
      $$= $yyLex->create(new ComparisonNode($1)); 
    }
  | binary_operation { 
      $$= $yyLex->create(new BinaryOpNode($1)); 
    }
  | unary_prefix_operation { 
      $$= $yyLex->create(new UnaryOpNode($1)); 
    }
  | unary_postfix_operation { 
      $$= $yyLex->create(new UnaryOpNode($1)); 
      $$->postfix= TRUE; 
    }
  | expression '?' expression_opt ':' expression { 
      $$= $yyLex->create(new TernaryNode());
      $$->condition= $1;
      $$->expression= $3;
      $$->conditional= $5;
    }
  | expression T_BOOLEAN_OR expression { 
      $$= $yyLex->create(new BinaryOpNode()); 
      $$->lhs= $1; 
      $$->rhs= $3; 
      $$->op= '||'; 
    }
  | expression T_BOOLEAN_AND expression { 
      $$= $yyLex->create(new BinaryOpNode()); 
      $$->lhs= $1; 
      $$->rhs= $3; 
      $$->op= '&&'; 
    }
  | expression T_INSTANCEOF typename {
      $$= $yyLex->create(new InstanceOfNode()); 
      $$->expression= $1; 
      $$->type= $3; 
    }
  | expression T_INSTANCEOF T_VARIABLE {
      $$= $yyLex->create(new DynamicInstanceOfNode()); 
      $$->expression= $1; 
      $$->variable= $3; 
    }
  | '(' T_WORD ')' expression {
      $$= $yyLex->create(new CastNode(array('type' => new TypeName($2), 'expression' => $4))); 
    }
  | '(' T_ARRAY ')' expression {
      $$= $yyLex->create(new CastNode(array('type' => new TypeName('var[]'), 'expression' => $4))); 
    }
  | '@' expression {
      $$= $yyLex->create(new SilenceOperatorNode($2));
    }
  | T_FUNCTION '(' lambda_input ')' '{' statements_opt '}' {
      $$= $yyLex->create(new LambdaNode($3, (array)$6));
    }
  | '(' expression ')' chain_opt { 
      if ($4) {
        $$= $4[0];
        $4[1]->target= new BracedExpressionNode($2);
      } else {
        $$= new BracedExpressionNode($2); 
      }
    }
;

lambda_input:
    /* empty */ { $$= array(); }
  | lambda_input_parameters 
;

lambda_input_parameters:
    lambda_input_parameter  { $$= array($1); }
  | lambda_input_parameters ',' lambda_input_parameter { $$= array_merge($1, array($3)); }
;

lambda_input_parameter:
    T_VARIABLE { $$= new VariableNode($1); }
;

literal:
    scalar
  | T_ARRAY '(' { $p= $yyLex->position; } map_or_list ')' { $4->position= $p; $4->type= NULL; $$= $4; }
;

scalar:
    T_WORD { switch (strtolower($1)) {
      case 'true': $$= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $$= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $$= $yyLex->create(new NullNode()); break;
      default: $$= $yyLex->create(new ConstantNode($1)); break;
    }}
  | T_NUMBER { $$= $yyLex->create(new IntegerNode($1)); }
  | T_HEX { $$= $yyLex->create(new HexNode($1)); }
  | T_OCTAL { $$= $yyLex->create(new OctalNode($1)); }
  | T_DECIMAL { $$= $yyLex->create(new DecimalNode($1)); }
  | T_STRING { $$= $yyLex->create(new StringNode($1)); }
;

map_or_list:
    /* empty */ { 
      $$= $yyLex->create(new ArrayNode(array('values' => NULL)));
    }
  | ':' {
      $$= $yyLex->create(new MapNode(array('elements' => NULL)));
    }
  | expressionlist {
      $$= $yyLex->create(new ArrayNode(array('values' => $1)));
    }
  | mapliteral {
      $$= $yyLex->create(new MapNode(array('elements' => $1)));
    }
;

mapliteral:
    mapentry { $$= array($1); }
  | mapliteral ',' mapentry_opt { $$= $3 ? array_merge($1, array($3)) : $1; }
;

mapentry_opt:
    /* empty */ { $$= NULL; }
  | mapentry
;

mapentry:
    expression T_DOUBLE_ARROW expression { $$= array($1, $3); }
;

assignment:
    expression '=' expression          /* =  */ { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_ADD_EQUAL expression  /* += */ { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_SUB_EQUAL expression  /* -= */ { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_MUL_EQUAL expression  /* *= */ { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_DIV_EQUAL expression  /* /= */ { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_MOD_EQUAL expression  /* %= */ { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_CONCAT_EQUAL expression  /* .= */ { $$= array('variable' => $1, 'expression' => $3, 'op' => '~='); }
  | expression T_AND_EQUAL expression     /* &= */  { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_OR_EQUAL expression      /* |= */  { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_XOR_EQUAL expression     /* ^= */  { $$= array('variable' => $1, 'expression' => $3, 'op' => $2); }
  | expression T_SHR '=' expression       /* >>= */ { $$= array('variable' => $1, 'expression' => $4, 'op' => $2.$3); }
  | expression T_SHL '=' expression       /* <<= */ { $$= array('variable' => $1, 'expression' => $4, 'op' => $2.$3); }
;

comparison:
	expression '<' expression          /* >  */ { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression '>' expression          /* <  */ { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression T_SE expression         /* <= */ { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression T_GE expression         /* >= */ { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression T_EQUALS expression     /* == */ { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression T_NOT_EQUALS expression /* != */ { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression T_EQUALS '=' expression     /* === */ { $$= array('lhs' => $1, 'rhs' => $4, 'op' => $2.$3); }
  | expression T_NOT_EQUALS '=' expression /* !== */ { $$= array('lhs' => $1, 'rhs' => $4, 'op' => $2.$3); }
;

binary_operation: 
	expression '+' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression '-' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression '*' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression '/' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression '%' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression '.' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => '~'); }
  | expression '|' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression '&' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression '^' expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression T_SHR expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
  | expression T_SHL expression { $$= array('lhs' => $1, 'rhs' => $3, 'op' => $2); }
;

unary_prefix_operation:
    '!' expression    { $$= array('expression' => $2, 'op' => $1); }
  | '~' expression    { $$= array('expression' => $2, 'op' => '~'); }
  | '+' expression %prec T_INC { $$= array('expression' => $2, 'op' => $1); }
  | '-' expression %prec T_INC { $$= array('expression' => $2, 'op' => $1); }
  | T_INC expression  { $$= array('expression' => $2, 'op' => $1); }
  | T_DEC expression  { $$= array('expression' => $2, 'op' => $1); }
;

unary_postfix_operation:
    expression T_INC { $$= array('expression' => $1, 'op' => $2); }
  | expression T_DEC { $$= array('expression' => $1, 'op' => $2); }
;


chain_opt:
    /* empty */ { $$= NULL; }
  | chained
;

chained:
    chain { $$= array($1, $1); }
  | chain chained { $2[1]->target= $1; $$= array($2[0], $1); }
;

chain:
    '[' { $1= $yyLex->create(new ArrayAccessNode()); } expression_opt ']' { 
      $1->offset= $3;
    }
  | '{' { $1= $yyLex->create(new ArrayAccessNode()); } expression '}' { 
      $1->offset= $3;
    }
  | T_OBJECT_OPERATOR T_WORD {
      $$= $yyLex->create(new MemberAccessNode(NULL, $2)); 
    }
  | T_OBJECT_OPERATOR T_VARIABLE {
      $$= $yyLex->create(new DynamicVariableReferenceNode(NULL, new VariableNode($2))); 
    }
  | T_OBJECT_OPERATOR '{' expression '}' {
      $$= $yyLex->create(new DynamicVariableReferenceNode(NULL, $3)); 
    }
  | T_OBJECT_OPERATOR T_WORD '(' { $1= $yyLex->create(new MethodCallNode(NULL, $2)); } expressionlist_opt ')' { 
      $1->arguments= $5;
    }
;
// }}}

// {{{ Type name and generics
typeref:
    typename
  | arraytype
;

typename:
    qualifiedname { $$= new TypeName($1); }
;

arraytype:
    T_ARRAY { $$= new TypeName('var[]'); }
;

name_list:
    typename { $$= array($1); }
  | typename ',' name_list { $$= array_merge(array($1), $3); }
;
// }}}

// {{{ Modifiers
modifiers_opt:
    /* empty */ { $$= 0; }
  | modifiers   { $$= $1; }
;

modifiers:
    modifier { $$= $1; }
  | modifier modifiers { $$= $1 | $2; }
;

modifier:
	T_PUBLIC    { $$= MODIFIER_PUBLIC; }
  | T_PROTECTED { $$= MODIFIER_PROTECTED; }
  | T_PRIVATE   { $$= MODIFIER_PRIVATE; }
  | T_STATIC    { $$= MODIFIER_STATIC; }
  | T_ABSTRACT  { $$= MODIFIER_ABSTRACT; }
  | T_FINAL     { $$= MODIFIER_FINAL; }
;
// }}}

%%
