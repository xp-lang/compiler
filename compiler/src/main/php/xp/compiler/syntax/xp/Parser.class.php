<?php
#line 2 "grammar/xp.jay"
namespace xp\compiler\syntax\xp;

use xp\compiler\types\TypeName;
use xp\compiler\ast\ParseTree;
use xp\compiler\ast\PackageNode;
use xp\compiler\ast\ImportNode;
use xp\compiler\ast\StaticImportNode;
use xp\compiler\ast\NativeImportNode;
use xp\compiler\ast\AnnotationNode;
use xp\compiler\ast\ClassNode;
use xp\compiler\ast\EnumNode;
use xp\compiler\ast\EnumMemberNode;
use xp\compiler\ast\InterfaceNode;
use xp\compiler\ast\FieldNode;
use xp\compiler\ast\PropertyNode;
use xp\compiler\ast\IndexerNode;
use xp\compiler\ast\ConstructorNode;
use xp\compiler\ast\MethodNode;
use xp\compiler\ast\OperatorNode;
use xp\compiler\ast\ReturnNode;
use xp\compiler\ast\InstanceCreationNode;
use xp\compiler\ast\VariableNode;
use xp\compiler\ast\ArrayAccessNode;
use xp\compiler\ast\CastNode;
use xp\compiler\ast\TryNode;
use xp\compiler\ast\CatchNode;
use xp\compiler\ast\ThrowNode;
use xp\compiler\ast\FinallyNode;
use xp\compiler\ast\ForNode;
use xp\compiler\ast\ForeachNode;
use xp\compiler\ast\DoNode;
use xp\compiler\ast\WhileNode;
use xp\compiler\ast\AssignmentNode;
use xp\compiler\ast\InvocationNode;
use xp\compiler\ast\MethodCallNode;
use xp\compiler\ast\InstanceCallNode;
use xp\compiler\ast\StaticMethodCallNode;
use xp\compiler\ast\MemberAccessNode;
use xp\compiler\ast\StaticMemberAccessNode;
use xp\compiler\ast\ConstantNode;
use xp\compiler\ast\ConstantAccessNode;
use xp\compiler\ast\ClassAccessNode;
use xp\compiler\ast\IntegerNode;
use xp\compiler\ast\HexNode;
use xp\compiler\ast\OctalNode;
use xp\compiler\ast\DecimalNode;
use xp\compiler\ast\StringNode;
use xp\compiler\ast\BooleanNode;
use xp\compiler\ast\NullNode;
use xp\compiler\ast\ArrayNode;
use xp\compiler\ast\MapNode;
use xp\compiler\ast\ClassConstantNode;
use xp\compiler\ast\InstanceOfNode;
use xp\compiler\ast\ComparisonNode;
use xp\compiler\ast\BinaryOpNode;
use xp\compiler\ast\BooleanOpNode;
use xp\compiler\ast\UnaryOpNode;
use xp\compiler\ast\TernaryNode;
use xp\compiler\ast\SwitchNode;
use xp\compiler\ast\CaseNode;
use xp\compiler\ast\DefaultNode;
use xp\compiler\ast\BreakNode;
use xp\compiler\ast\ContinueNode;
use xp\compiler\ast\CloneNode;
use xp\compiler\ast\IfNode;
use xp\compiler\ast\ElseNode;
use xp\compiler\ast\StaticInitializerNode;
use xp\compiler\ast\LambdaNode;
use xp\compiler\ast\WithNode;
use xp\compiler\ast\ArmNode;
use xp\compiler\ast\BracedExpressionNode;
#line 75 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends \text\parser\generic\AbstractParser {
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_CONCAT_EQUAL= 416;
    const T_MOD_EQUAL= 408;
    const T_AND_EQUAL= 418;
    const T_OR_EQUAL= 417;
    const T_XOR_EQUAL= 419;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_SE= 401;
    const T_GE= 400;
    const T_ARROW= 257;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_AS= 331;
    const T_NEW= 346;
    const T_CLONE= 313;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_OCTAL= 265;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_THIS= 332;
    const T_CONST= 334;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const T_NAV= 420;
    const T_WITH= 430;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,     4,    13, 
          3,    17,     3,    19,     3,    14,    14,    15,    15,    20, 
         20,    22,    22,    16,    16,    23,    23,    23,    18,    18, 
         18,    27,    27,    29,    28,    30,    28,    24,    24,    24, 
         34,    34,    35,    35,    38,    38,    33,    33,    40,    25, 
         43,    25,    45,    25,    47,    25,    11,    11,    48,    48, 
         50,    50,    50,    51,    51,    51,    52,    52,    53,    53, 
         42,    42,    42,    39,    39,    39,    44,    44,    54,    54, 
         37,    37,    37,    55,    55,    41,    41,    56,    56,    57, 
         57,    59,    59,    58,    58,    58,    46,    46,    46,    46, 
         46,    46,    26,    26,    60,    60,    63,    61,    64,    61, 
         67,    61,    69,    61,    71,    61,    72,    61,    73,    61, 
         75,    61,    76,    61,    77,    61,    78,    61,    61,    61, 
         61,    80,    80,    82,    82,    81,    81,    83,    70,    70, 
         74,    74,    84,    84,    86,    85,    87,    85,    65,    65, 
         66,    88,    66,    79,    79,    89,    89,    93,    92,    94, 
         94,    90,    90,    95,    91,    68,    68,    96,    96,    62, 
         62,    97,    97,    97,   101,   101,   101,   101,   103,    31, 
         31,   104,    31,   105,    31,   106,    31,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,   114,    31, 
         31,   113,   113,   112,   112,   115,   115,   116,   116,    36, 
        118,    36,    36,    36,    36,    36,    36,   117,   117,   100, 
        100,   119,   119,   121,   121,   120,   120,   107,   107,   107, 
        107,   107,   107,   107,   107,   107,   107,   107,   107,   108, 
        108,   108,   108,   108,   108,   108,   108,   109,   109,   109, 
        109,   109,   109,   109,   109,   109,   109,   109,   110,   110, 
        110,   110,   110,   110,   111,   111,   102,   102,   122,   122, 
        124,   123,   123,   127,   123,   128,   123,   125,   125,   126, 
        126,   126,    32,    32,    32,    12,    12,    98,    99,   129, 
        129,   130,   130,    21,    21,    49,    49,   131,   131,   132, 
        132,   132,   132,   132,   132,   132,   132, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     3,     0, 
          9,     0,     9,     0,     8,     0,     2,     0,     2,     0, 
          2,     0,     3,     2,     0,     1,     1,     4,     3,     1, 
          0,     1,     3,     0,     3,     0,     6,     5,     6,     6, 
          1,     4,     1,     2,     2,     4,     0,     2,     0,     9, 
          0,     9,     0,     8,     0,    10,     4,     1,     1,     3, 
          2,     5,     5,     3,     3,     1,     1,     3,     3,     3, 
          1,     3,     3,     0,     2,     1,     0,     1,     1,     3, 
          3,     3,     4,     1,     2,     0,     2,     0,     1,     1, 
          3,     0,     1,     3,     3,     1,     1,     1,     1,     1, 
          1,     1,     0,     1,     1,     2,     0,     4,     0,     7, 
          0,    10,     0,     8,     0,     6,     0,     8,     0,     8, 
          0,     3,     0,     3,     0,     4,     0,     6,     7,     7, 
          2,     1,     3,     1,     3,     1,     3,     3,     1,     3, 
          0,     1,     1,     2,     0,     5,     0,     4,     1,     3, 
          0,     0,     3,     2,     1,     1,     2,     0,     9,     1, 
          3,     0,     1,     0,     5,     0,     1,     1,     3,     0, 
          1,     5,     4,     4,     1,     4,     1,     1,     0,     3, 
          2,     0,     4,     0,     5,     0,     6,     2,     3,     1, 
          1,     1,     1,     1,     5,     3,     3,     3,     0,     8, 
          4,     1,     3,     0,     1,     1,     3,     1,     2,     1, 
          0,     4,     1,     1,     1,     1,     1,     1,     1,     1, 
          1,     1,     3,     0,     1,     3,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     4,     4,     3, 
          3,     3,     3,     3,     3,     4,     4,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     4,     4,     2,     2, 
          2,     2,     2,     2,     2,     2,     0,     1,     1,     2, 
          0,     4,     2,     0,     6,     0,     5,     1,     1,     1, 
          1,     1,     1,     1,     1,     1,     4,     3,     4,     1, 
          3,     1,     3,     1,     3,     0,     1,     1,     2,     1, 
          1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     0,     7,     0,     0, 
          0,     0,     0,   310,   312,   311,   314,   316,   315,   317, 
        313,     1,     0,    68,     0,   308,     8,     0,     0,     4, 
         12,    13,     0,     0,     0,    69,    20,    24,    22,   309, 
         18,    19,     0,     0,     0,    76,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    70,    67,     0,     0, 
          0,     0,    15,     0,     0,    74,    75,   221,     0,   227, 
        223,   226,   224,   225,     0,     0,     0,    77,     0,     0, 
          0,     0,     0,     0,     0,    10,     0,     0,     0,    72, 
          0,    73,     0,     0,   293,     0,   294,   295,     0,   300, 
         27,     0,     0,     0,    31,    35,     0,    16,   230,     0, 
          0,     0,     0,     0,     0,   192,     0,     0,     0,   189, 
          0,     0,     0,     0,     0,   228,     0,   229,   200,   201, 
        202,   203,   204,     0,     0,   232,   220,    79,    80,     0, 
         78,     0,     0,     0,     0,   297,    29,    35,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   198, 
          0,   196,     0,     0,     0,     0,   194,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   275,   276,     0,   281, 
        289,   288,   191,   278,     0,     0,     0,   222,     0,   303, 
          0,   298,   301,     0,   305,     0,     0,    25,     0,    34, 
         36,    37,     0,     0,     0,    42,     0,     0,     0,     0, 
          0,     0,     0,     0,   190,     0,   218,     0,     0,     0, 
        216,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   208,     0,     0,   199, 
          0,   280,   290,   292,   291,   286,     0,   179,     0,     0, 
        235,   233,   299,    21,     0,     0,     0,     0,     0,     0, 
          0,    23,     0,    35,     0,   193,     0,     0,     0,     0, 
          0,     0,     0,   100,   211,   219,     0,     0,     0,   188, 
        185,     0,     0,     0,     0,     0,     0,     0,     0,    95, 
          0,     0,   284,   117,     0,   135,   121,   125,   127,   123, 
        131,   133,   119,   129,     0,     0,     0,     0,   115,     0, 
         63,     0,     0,     0,     0,     0,     0,    35,    45,     0, 
         43,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   217,     0,   195,     0,   282,     0,     0,     0, 
        137,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    38,   141,   116,     0,     0,    61,    59,   107, 
        108,   109,   110,   111,   112,     0,     0,     0,     0,     0, 
          0,     0,     0,   183,   184,     0,     0,   197,   103,   101, 
          0,   209,     0,   287,     0,     0,     0,     0,     0,   142, 
          0,     0,     0,     0,   159,     0,     0,   132,   134,     0, 
          0,     0,     0,   146,     0,     0,    89,     0,     0,     0, 
          0,     0,    65,     0,     0,    48,     0,     0,    53,    33, 
          0,   182,   213,     0,   186,   285,   118,     0,     0,     0, 
          0,   136,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    50,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    52,    55,     0,    49,    54,    47, 
        210,     0,     0,   143,     0,     0,     0,   160,     0,     0, 
          0,     0,     0,     0,   147,     0,     0,     0,     0,    90, 
         92,    91,     0,     0,     0,     0,     0,   168,   174,   138, 
          0,   165,   166,     0,     0,   126,     0,   150,     0,     0, 
          0,     0,    93,    97,     0,    81,     0,    64,     0,     0, 
          0,    56,     0,     0,   164,   173,   167,   139,     0,     0, 
          0,   162,   120,   155,   157,     0,     0,   153,   140,     0, 
          0,    62,    60,     0,     0,     0,     0,   128,   124,     0, 
          0,     0,   130,   154,    83,    82,    66,   170,     0,     0, 
          0,   163,     0,     0,     0,     0,   175,   122,     0,   158, 
        171,     0,   156,     0,     0,   169, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    22,   123,     4,     7,     8,    33,    12,    65, 
        219,    95,    50,    81,   103,   150,    52,   224,    51,    83, 
        105,   359,   220,   221,   222,   346,   225,   226,   300,   301, 
        347,   279,   409,   357,   458,   125,   447,   459,   491,   452, 
        519,   548,   451,   448,   397,   406,   494,    35,    24,    36, 
         47,    77,    78,   449,   450,   312,   313,   314,   420,   348, 
        349,   256,   380,   390,   436,   563,   384,   126,   387,   478, 
        385,   386,   391,   566,   388,   389,   383,   427,   530,   429, 
        443,   430,   444,   567,   568,   581,   582,   580,   531,   555, 
        532,   533,   553,   589,   554,   127,   229,    97,    98,   128, 
        322,   203,   164,   159,   242,   233,   129,   130,   131,   132, 
        133,   239,   372,   464,   240,   241,   134,    87,   135,   136, 
        292,   204,   205,   281,   206,   287,   379,   332,    99,   100, 
         25,    26, 
    );
    protected static $yySindex = array(         -284,
          0,     0,  -264,  -113,     0,  1130,  -264,     0,    17,    81, 
         15,  -234,    85,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   375,     0,  1011,     0,     0,  -113,  -113,     0, 
          0,     0,   -79,  -205,    84,     0,     0,     0,     0,     0, 
          0,     0,   160,   -14,   125,     0,   177,    85,  1011,  -113, 
       -113,  -113,     1,  -113,  -113,   325,     0,     0,   192,   -54, 
        -12,   -54,     0,   254,   250,     0,     0,     0,   252,     0, 
          0,     0,     0,     0,   264,   270,   169,     0,    91,  -113, 
         44,  -113,   242,    44,     1,     0,  4260,   787,   787,     0, 
       -240,     0,    22,   313,     0,   288,     0,     0,   142,     0, 
          0,  -113,   271,   352,     0,     0,   285,     0,     0,  4444, 
       4444,  4444,  4444,  4444,  4444,     0,  4444,   406,   346,     0, 
       4444,   296,    16,  3284,   -34,     0,   399,     0,     0,     0, 
          0,     0,     0,   357,   401,     0,     0,     0,     0,   252, 
          0,  -113,   109,   374,    91,     0,     0,     0,  -113,  1236, 
        224,   281,  -122,  -122,     4,  -122,  -122,  -122,   109,     0, 
       4444,     0,  4444,   -34,  2141,   -85,     0,  4444,  4444,  4444, 
       4444,  4444,  4444,  4444,  4444,  4444,  4444,  4444,  4444,  4444, 
       4444,  4444,  4444,  4269,  4300,  3498,  4444,  4205,  4444,  4444, 
       4444,  4444,  4444,  4444,  -113,  4444,     0,     0,   109,     0, 
          0,     0,     0,     0,   -34,    -3,  4444,     0,   128,     0, 
         68,     0,     0,  1749,     0,   369,   239,     0,    43,     0, 
          0,     0,     0,   381,   149,     0,   467,   288,   -34,   414, 
        442,  3284,  4453,  3284,     0,   -34,     0,   -76,   258,   523, 
          0,    97,  3311,    54,    54,    54,    54,    54,    54,    54, 
         54,    54,    54,    54,  3284,   514,  3996,   946,  4010,  4444, 
       4017,  4444,  4017,  4444,  4444,  1175,  1175,  4444,  4444,  1175, 
       1175,   137,   137,     4,     4,     4,     0,  -122,   -18,     0, 
       4444,     0,     0,     0,     0,     0,   540,     0,   524,   346, 
          0,     0,     0,     0,   639,   333,   324,   334,   193,   478, 
        563,     0,   224,     0,  4453,     0,  4444,    45,   483,   546, 
       3284,   566,   568,     0,     0,     0,  4413,   -85,   570,     0, 
          0,   -34,  4444,    54,    54,  1175,  1175,  1175,  1175,     0, 
        520,  4453,     0,     0,   -11,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   575,   495,  2295,   639,     0,   576, 
          0,   591,   602,   485,   561,   601,   547,     0,     0,  4444, 
          0,   673,   628,   548,   553,  4444,  4444,   -34,  4453,   639, 
       3284,   555,     0,  4453,     0,   232,     0,   640,  4453,  4444, 
          0,   343,  4444,   645,   650,   458,   659,   637,   648,   668, 
        669,   370,     0,     0,     0,   787,   -75,     0,     0,     0, 
          0,     0,     0,     0,     0,   671,   -75,  4444,   654,   457, 
       2146,  2349,   478,     0,     0,  3284,  3284,     0,     0,     0, 
        599,     0,   675,     0,   688,   674,   639,   676,   392,     0, 
       2403,  4444,  4444,   639,     0,   371,   394,     0,     0,  4444, 
       4444,   678,   456,     0,   677,   689,     0,   699,   697,    23, 
         73,    73,     0,   649,  3284,     0,   -33,  -103,     0,     0, 
        478,     0,     0,   -34,     0,     0,     0,   618,  4444,   343, 
        633,     0,   702,  2446,   641,   722,   723,   404,  2555,  2592, 
       4444,   370,   646,     0,   513,   449,   -75,   434,   601,   -75, 
        735,   697,   739,   -75,     0,     0,   639,     0,     0,     0, 
          0,    87,  3284,     0,   639,  4444,   458,     0,  4444,   443, 
       4444,   458,   679,  3284,     0,   639,   601,  -113,    21,     0, 
          0,     0,   697,   449,   449,   753,   680,     0,     0,     0, 
         87,     0,     0,   691,   737,     0,  2851,     0,  2888,   432, 
        101,   692,     0,     0,  4444,     0,   639,     0,    21,    21, 
        449,     0,   774,   706,     0,     0,     0,     0,  4444,   763, 
        458,     0,     0,     0,     0,   707,   101,     0,     0,  2985, 
        708,     0,     0,    21,  -113,   639,   793,     0,     0,   458, 
       4444,   778,     0,     0,     0,     0,     0,     0,  -119,   712, 
        458,     0,  3012,   639,  -113,   797,     0,     0,   639,     0, 
          0,   717,     0,   639,   718,     0, 
    );
    protected static $yyRindex= array(         1313,
          0,     0,  1889,     0,     0,   387,  2232,     0,  1408,     0, 
          0,   588,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   452,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   297,     0,     0,    96,     0,   773,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   515,  -112, 
        726,  -112,     0,   791,     0,     0,     0,     0,   811,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        731,     0,     0,   731,     0,     0,   764,     0,     0,     0, 
          0,     0,     0,     0,     0,   152,     0,     0,     0,     0, 
          0,     0,     0,   153,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  1020,  1146,     0, 
          0,     0,     0,   738,  1663,     0,    78,     0,     0,     0, 
          0,     0,     0,     0,   -32,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,  -181, 
        733,   748,  1735,  1805,  3040,  1845,  1873,  1963,     0,     0, 
          0,     0,     0,  1663,     0,   609,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   801, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  1708,     0,   951,     0,    38,     0, 
          0,     0,     0,  -181,     0,  1641,     0,     0,     0,     0, 
          0,     0,   445,     0,   742,     0,   777,     0,  1663,   784, 
        785,   229,   828,   251,     0,  1663,     0,     0,     0,   620, 
          0,     0,   161,   -31,   -23,    25,    27,    63,    65,    67, 
        209,   719,   812,   821,   656,     0,   287,  3872,  3818,     0, 
       3847,     0,  3951,     0,     0,   249,  2376,     0,     0,  3611, 
       3693,  3186,  3569,  3081,  3108,  3149,     0,  2259,  1545,     0, 
        788,     0,     0,     0,     0,     0,   849,     0,     0,     0, 
          0,     0,     0,     0,   757,     0,    -2,     0,     0,    28, 
          0,     0,     0,     0,   828,     0,   758,     0,  1243,  1279, 
        464,     0,   843,     0,     0,     0,     0,     0,   977,     0, 
          0,  1663,     0,   904,  1049,  3709,  3733,  3778,  3802,     0, 
          0,   828,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  -102,     0,     0, 
          0,     0,   762,     0,     0,   830,     0,     0,     0,     0, 
          0,   319,     0,     0,     0,     0,     0,  1663,   468,   757, 
        772,     0,     0,   828,     0,  3749,     0,     0,   828,   839, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   865,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
       -181,     0,  1078,     0,     0,   494,   504,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   757,   506,     0,     0, 
          0,   854,     0,   757,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   883,     0, 
        894,   894,     0,     0,   358,     0,     0,     0,     0,     0, 
         28,     0,     0,  1663,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   564,     0,     0,     0, 
          0,     0,     0,     0,     0,   245,     0,     0,   490,     0, 
          0,   895,     0,   865,     0,     0,   757,     0,     0,     0, 
          0,     0,   510,     0,   757,   854,     0,     0,     0,     0, 
          0,     0,     0,   551,     0,   757,   490,     0,     0,     0, 
          0,     0,   897,   245,   245,     0,     0,     0,     0,     0, 
        256,     0,     0,     0,     0,     0,     0,     0,     0,   385, 
        814,     0,     0,     0,     0,     0,   757,     0,     0,     0, 
        245,     0,     0,     0,     0,     0,     0,     0,   900,     0, 
          0,     0,     0,     0,     0,     0,   819,     0,     0,     0, 
          0,     0,     0,     0,     0,   757,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -91,     0,     0,     0,     0,   -91,     0, 
          0,     0,     0,   757,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,     0,   940,     0,     0,   864, 
        944,   -49,     0,   889,   875,   -19,     0,     0,     0,     0, 
        -95,  -396,     0,     0,     0,  1900,     0,   658,     0,     0, 
         55,   887,  -422,     0,     0,   -47,  -351,   507,   512,     0, 
       -124,  -352,     0,   473,     0,     0,     0,     0,   919,   921, 
          0,     0,   879,  -413,   779,    35,     0,   617,     0,     0, 
        465,  -193,     0,     0,  -448,     0,     0,  -299,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   501,   505,     0,   423,     0,     0,     0,     0,     0, 
        463,   472,     0,     0,     0,     0,     0,   837,   853,   690, 
          0,    30,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   695,     0,     0,     0,   807, 
          0,   820,     0,     0,     0,     0,     0,     0,     0,   872, 
          0,  1002, 
    );
    protected static $yyTable = array(11,
         60,    61,    62,   196,   595,    94,   147,   364,    76,   207, 
         26,   202,   207,   288,   144,    94,   462,   238,     1,   140, 
        238,   498,   114,    41,    42,   496,   207,   207,   382,    46, 
        101,    28,   104,   113,   238,   238,   286,   492,   492,     5, 
        138,   139,    63,    54,   330,    59,    59,    59,    31,    66, 
         67,    32,   104,   215,    44,   454,   200,    17,   536,    75, 
        231,   207,    28,   540,   500,   239,   522,   240,   239,   238, 
        240,    32,   144,    30,    59,    59,   523,    59,   306,   546, 
         10,   234,   239,   239,   240,   240,    32,   331,    17,   497, 
        194,   183,   231,   207,   543,   192,   190,    59,   191,   104, 
        193,   238,   109,   241,   306,   242,   241,   244,   242,   227, 
        244,   381,   579,   186,   170,   188,   180,   239,   177,   240, 
        241,   241,   242,   242,   244,   244,    29,    48,   214,   196, 
        234,   592,   473,    94,    45,   520,   177,   210,    59,    71, 
         59,   124,   598,   547,    59,   277,     9,   182,    34,   239, 
        306,   240,    32,    93,    59,   241,   457,   242,   144,   244, 
        293,    59,   234,    94,   153,   154,   155,   156,   157,   158, 
        177,   160,    10,   194,     9,   165,    49,   181,   192,   196, 
         43,    94,    55,   193,     9,   145,   426,   241,    71,   242, 
         59,   244,   303,   235,    59,   302,   572,   573,    26,    94, 
         10,   206,   177,   146,   206,    53,   535,   304,   199,    92, 
         10,   304,    91,   302,    59,   232,    56,   234,   206,   206, 
        596,   587,   243,   244,   245,   246,   247,   248,   249,   250, 
        251,   252,   253,   254,   255,   257,   258,   259,   261,   263, 
        266,   267,   270,   271,   272,   273,   274,   275,   276,   243, 
        278,    79,   243,   206,   237,    80,   283,    17,   306,   577, 
         64,   255,   196,   316,   446,   315,   243,   243,   194,   183, 
        114,   114,   236,   192,   190,   304,   191,   545,   193,   197, 
        198,   113,   113,   144,   362,   206,   250,   311,   172,   250, 
        172,   186,   250,   188,   237,   172,   284,    82,   172,    85, 
        172,   243,   297,    96,   289,   290,   250,   250,    86,   250, 
         90,   250,    88,    59,   324,   195,   325,    17,   326,   327, 
        162,   236,   328,   329,    89,   182,    28,   264,    10,    17, 
        264,   142,     9,   243,   199,   255,    17,    17,   411,   363, 
         17,   250,   250,   237,   264,   264,   172,   264,   445,   264, 
          9,   375,   488,   236,   102,   181,   319,   196,    10,   311, 
        285,   124,   489,   351,   106,   195,   378,    96,     9,    28, 
        143,   371,   250,   250,   298,   237,    10,   376,   144,   264, 
        172,   172,   207,   207,   199,   201,   311,   289,   290,    17, 
        238,   238,    59,   148,    10,   149,   320,   418,    58,   549, 
        550,    58,    59,   163,   490,   197,   198,   151,   423,   304, 
        264,   264,   446,   425,   412,    68,    58,   161,   166,   161, 
        416,   417,   544,   311,   161,   167,   574,   161,   311,   161, 
        528,   529,   471,   311,   255,   470,   321,   431,   239,   239, 
        240,   240,   207,    39,   209,   162,    59,    59,   195,   208, 
         58,    28,   353,   189,   187,   197,   198,   171,   172,   173, 
        174,   176,   455,   161,   184,   185,   212,   199,   104,   175, 
        178,   177,   179,   564,   565,   161,   241,   241,   242,   242, 
        244,   244,    59,   223,    46,    59,   124,   474,    44,    59, 
        112,   295,   122,   501,   479,   480,   483,   121,   296,   482, 
        110,    96,   111,    44,   106,   302,   305,   106,   102,   161, 
        161,   102,   354,    59,   317,   172,   172,   172,   172,   172, 
        172,   404,   162,   503,   355,   588,   402,   400,    28,   401, 
         57,   403,   356,    57,   104,   514,   307,   104,   197,   198, 
        366,   172,   307,   195,   105,   601,   144,   105,    68,   144, 
        145,   296,   296,   145,   296,   296,   296,   296,   296,   296, 
        124,   296,   199,   537,   308,   539,   318,    44,   172,    44, 
         59,   323,   296,   296,   206,   296,   296,   296,   306,   333, 
        434,   161,    57,   113,    69,    70,    71,    72,    73,    74, 
         59,   148,   350,   352,   148,   172,   172,   172,   172,   570, 
        358,   172,   360,   367,   306,   296,   368,   296,   296,   374, 
        405,   369,   377,   124,   392,   172,   172,   172,   172,   393, 
        172,   172,   243,   243,    75,   172,   172,   172,   172,   172, 
        398,   189,   187,   197,   198,   593,   396,   296,   296,   296, 
        296,   399,   184,   185,   161,   161,   161,   161,   161,   161, 
        306,   407,   250,   250,   250,   250,   250,   172,   172,   250, 
        250,   408,   250,   250,   250,   250,   250,   250,   413,   410, 
        161,   112,   414,   122,    37,    38,    39,   415,   121,   422, 
        424,   110,   428,   111,   432,   172,   306,   306,   306,   433, 
        264,   264,   264,   264,   264,   438,   181,   161,   437,   181, 
        264,   264,   264,   264,   264,   264,   439,   440,   441,   442, 
        453,   307,   456,   181,   181,   465,   457,   152,    70,    71, 
         72,    73,    74,   463,   161,   161,   161,   161,   466,    68, 
        161,   476,   467,   477,   485,   484,   469,   307,   481,   486, 
        487,   495,   502,    10,   161,   161,   161,   161,   181,   161, 
        161,   307,   307,   307,   161,   505,   161,   161,   161,   245, 
        506,   509,   245,    13,   113,   508,   510,   511,   516,   518, 
        117,   296,   517,   521,   296,   524,   245,   245,   178,   525, 
        181,   178,   538,   307,   220,   220,   161,   161,   220,   220, 
        220,   220,   220,   551,   220,   559,   178,   120,   334,   335, 
        336,   541,   562,   116,   552,   220,   220,   220,   220,   220, 
        220,   245,   395,   575,   161,   558,   569,   337,   338,   339, 
        340,   578,   341,   342,   296,   296,   296,   343,   576,   344, 
        178,   583,   586,   591,   296,   594,   597,   602,   220,   604, 
        220,   220,   606,   245,   296,   296,   296,    11,    30,    14, 
        435,   220,   246,    28,   296,   246,   176,    41,   180,   114, 
        115,   247,   178,   306,   247,   214,    40,   293,    98,   246, 
        246,   220,   220,   220,   294,   295,   215,    68,   247,   247, 
        180,   113,   176,    99,    51,   283,   283,   345,    57,   283, 
        283,   283,   283,   283,   283,   283,   212,   180,   152,    70, 
         71,    72,    73,    74,   246,    87,   283,   283,   283,   283, 
        283,   283,   176,   247,   296,   296,   296,   296,   296,   296, 
        296,   296,   296,    88,    10,   296,   296,   149,   296,   296, 
        296,   296,   296,   296,    84,    86,   246,    85,   151,   283, 
        176,   283,   283,   152,   256,   247,    27,   256,   108,    23, 
         84,   117,    14,    15,    16,   216,    18,    19,   107,    20, 
        361,   256,   256,   493,   499,    96,   526,    58,    57,   141, 
        504,   435,   283,   283,   283,    21,   435,   280,   120,   334, 
        335,   336,   194,   183,   116,   419,   515,   192,   190,   584, 
        191,   180,   193,   556,   180,   230,   256,   365,   337,   338, 
        339,   340,   557,   341,   342,   186,   217,   188,   343,   180, 
        344,   231,   373,   187,   187,   291,   213,   187,   187,   187, 
        187,   187,   187,   187,   282,   435,    40,     0,   256,   211, 
          0,    96,   306,     0,   187,   187,   187,   187,   187,   187, 
        114,   115,     0,   180,   435,   228,   137,    70,    71,    72, 
         73,    74,   238,     0,     0,   435,   220,   220,   306,   220, 
          0,   220,   220,   220,   220,     0,   220,   187,   345,   187, 
        187,   196,   306,   306,   306,   180,     0,     0,   220,   220, 
        220,   220,   220,     0,     0,     0,     0,     0,     0,   257, 
          0,     0,   257,     0,     0,     0,     0,     0,     0,     0, 
        187,   187,   187,     0,   306,   299,   257,   257,     0,     0, 
        220,     0,   220,   220,    32,    32,     0,     0,    32,    32, 
         32,    32,    32,    32,    32,     0,     0,     0,     0,     0, 
          0,     0,   245,   245,     0,    32,    32,    32,    32,    32, 
         32,   257,     0,   220,     0,   220,     0,   220,   220,   220, 
        220,   220,   220,   220,   220,   220,     0,    17,   220,   220, 
        283,   220,   220,   220,   220,   220,   220,   220,    32,     0, 
         32,    32,     0,   257,     0,     0,     0,     0,     0,   283, 
          0,     0,   227,   227,     0,     0,     0,   227,   227,   227, 
        227,   227,   227,     0,     0,     0,     0,     0,     0,     0, 
          0,    32,    32,    32,   238,   227,   227,   227,   227,     0, 
          0,   194,     0,     0,     0,     0,   192,   190,     0,   191, 
         13,   193,     0,     0,     0,   246,   246,     0,     0,     0, 
          0,     0,     0,     0,   247,   247,   227,     0,   227,   227, 
          0,     0,     0,     0,     0,     0,     0,     0,   283,   283, 
        283,   283,   283,   283,   283,   283,   283,   195,     0,   283, 
        283,     0,   283,   283,   283,   283,   283,   283,   283,   227, 
          0,   227,     0,     0,     0,     0,   199,     0,     0,   220, 
        220,     0,     0,   220,   220,   220,   220,   220,   187,   220, 
         14,    15,    16,    17,    18,    19,     0,    20,     0,     0, 
        196,     0,   220,   220,   220,   220,     0,   187,     0,     0, 
          0,     0,     0,    21,     0,   227,   227,   256,   256,   227, 
        227,   227,   227,   227,   227,   227,    13,     0,     0,     0, 
          0,   220,     0,   220,     0,     0,   220,     0,   227,   227, 
        227,   227,     0,     0,     0,   189,   187,   197,   198,     0, 
        220,     0,     0,     0,     0,     0,   184,   185,     0,     0, 
        218,     0,     0,     0,     0,     0,   220,     0,   220,   227, 
          0,     0,   227,     0,     0,     0,   187,   187,   187,   187, 
        187,   187,   187,   187,   187,     0,     0,   187,   187,    32, 
        187,   187,   187,   187,   187,   187,   187,     0,     0,     0, 
          0,     0,   227,     2,   227,     0,     0,     0,    32,    14, 
         15,    16,    17,    18,    19,     0,    20,     0,     0,   220, 
        220,   220,   220,   220,   220,   220,   220,   220,     0,    17, 
        220,   220,    21,   220,   220,   220,   220,   220,   220,   220, 
          0,     0,     0,     0,    17,    17,     0,    17,    17,    17, 
         17,    17,    17,     0,    17,     0,     0,   227,     0,     0, 
          0,     0,   257,   257,     0,    17,    17,    17,    17,    17, 
         17,     0,     0,     0,     0,     0,   227,    32,    32,    32, 
         32,    32,    32,    32,    32,    32,   195,     0,    32,    32, 
          0,    32,    32,    32,    32,    32,    32,    32,    17,     0, 
         17,    17,     0,     0,     0,   199,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    14,    15,    16,   216,    18, 
         19,     0,    20,     0,     0,     0,     0,     0,     0,     0, 
         17,    17,    17,    17,     0,     0,     0,     0,    21,     0, 
          0,     0,     0,     0,     0,   227,   227,   227,   227,   227, 
        227,   227,   227,   227,   220,     0,   227,   227,     0,   227, 
        227,   227,   227,   227,   227,   227,     0,     0,     0,   217, 
          0,     0,     0,   220,     0,     0,   197,   198,     0,     0, 
          0,    94,    94,     0,     0,    94,    94,    94,    94,    94, 
        227,    94,     2,     2,     2,     2,     2,     2,     0,     2, 
          0,     0,    94,    94,    94,    94,    94,     0,     0,   227, 
          0,     0,     2,     2,     2,     0,     2,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    94,    94,     0, 
          0,     0,   220,   220,   220,   220,   220,   220,   220,   220, 
        220,     0,    17,   220,   220,     0,   220,   220,   220,   220, 
        220,   220,   220,     0,    17,     0,     0,    17,    94,    94, 
         94,     0,     0,     0,     0,     0,     0,     0,   227,   227, 
        227,   227,   227,   227,   227,   227,   227,     0,     0,   227, 
        227,     0,   227,   227,   227,   227,   227,   227,   227,   277, 
        277,     0,     0,   277,   277,   277,   277,   277,     0,   277, 
          0,     0,     0,     0,     0,     0,     0,    17,    17,    17, 
        277,   277,   277,   277,   277,   277,     0,    17,     0,     0, 
          0,   314,     0,     0,     0,     0,     0,    17,    17,    17, 
          0,     0,     0,     0,   279,   279,     0,    17,   279,   279, 
        279,   279,   279,     0,   279,   277,   277,     0,     0,     0, 
          0,     0,     0,     0,     0,   279,   279,   279,   279,   279, 
        279,   271,   271,     0,     0,   271,   271,   271,   271,   271, 
          0,   271,     0,     0,     0,     0,   277,   277,   277,     0, 
          0,     0,   271,   271,   271,   271,   271,   271,     0,     0, 
        279,   279,     0,     0,     0,     0,     0,    17,    17,    17, 
         17,    17,    17,    17,    17,    17,     0,    17,    17,    17, 
          0,    17,    17,    17,    17,    17,    17,   271,   271,     0, 
          0,   279,   279,   279,     0,     0,     0,     0,     0,    13, 
          0,   272,   272,     0,     0,   272,   272,   272,   272,   272, 
          0,   272,     0,     0,     0,     0,    94,     0,   271,   271, 
          0,     0,   272,   272,   272,   272,   272,   272,     0,     0, 
          0,     0,     0,   294,    94,    94,     0,     0,     0,     0, 
          0,   270,   270,     0,    94,   270,   270,   270,   270,   270, 
          0,   270,     0,     0,     0,     0,     0,   272,   272,     0, 
        314,     0,   270,   270,   270,   270,   270,   270,     0,   273, 
        273,     0,     0,   273,   273,   273,   273,   273,     0,   273, 
        314,   314,   314,   314,   314,   314,   314,   314,   272,   272, 
        273,   273,   273,   273,   273,   273,     0,   270,   270,     0, 
          0,     0,     0,   314,    94,    94,    94,    94,    94,    94, 
         94,    94,    94,     0,     0,    94,    94,     0,    94,    94, 
         94,    94,    94,    94,     0,   273,   273,     0,   270,   270, 
          0,     0,   314,     0,   277,     0,     0,     0,     0,     5, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   277,     0,     0,   273,   273,     0,   274, 
        274,     0,     0,   274,   274,   274,   274,   274,     0,   274, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   279, 
        274,   274,   274,   274,   274,   274,     0,     0,    14,    15, 
         16,   216,    18,    19,     0,    20,     0,     0,   279,     0, 
          0,     0,     0,     0,     0,     0,   271,     0,     0,     0, 
          0,    21,     0,     0,     0,   274,   274,     0,     0,     0, 
          0,     0,   277,   277,   277,   277,   277,   277,   277,   277, 
        277,     0,     0,   277,   277,     0,   277,   277,   277,   277, 
        277,   277,   217,     0,     0,     0,   274,   274,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   279,   279,   279, 
        279,   279,   279,   279,   279,   279,   272,     0,   279,   279, 
          0,   279,   279,   279,   279,   279,   279,     0,     0,     0, 
          0,     0,     0,     0,   271,   271,     0,     0,   271,   271, 
        271,   271,   271,     0,     0,   271,   271,     0,   271,   271, 
        271,   271,   271,   271,     0,     0,   270,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     5,     5, 
          5,     5,     5,     5,     0,     5,     0,   194,   183,     0, 
          0,   236,   192,   190,   273,   191,     0,   193,     5,     5, 
          5,     5,     0,     0,     0,     0,     0,     0,     0,     0, 
        186,   170,   188,   180,   272,   272,     0,     0,   272,   272, 
        272,   272,   272,     0,     0,   272,   272,     0,   272,   272, 
        272,   272,   272,   272,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   182,     0,    13,     0,     0,     0, 
          0,     0,     0,     0,   270,   270,     0,     0,   270,   270, 
        270,   270,   270,     0,     0,   270,   270,     0,   270,   270, 
        270,   270,   270,   270,   181,     0,   196,     0,     0,   421, 
        460,     0,   273,   273,   274,     0,   273,   273,   273,   273, 
        273,     0,     0,   273,   273,     0,   273,   273,   273,   273, 
        273,   273,     0,     0,     0,   263,   263,     0,     0,   263, 
        263,   263,   263,   263,     0,   263,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   263,   263,   263,   263, 
        263,   263,     6,     0,     0,     0,   468,     0,     0,     0, 
          0,   194,   183,   475,     0,     0,   192,   190,     0,   191, 
          0,   193,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   263,   263,   394,   186,   170,   188,   180,     0,     0, 
          0,     0,   274,   274,     0,     0,   274,   274,   274,   274, 
        274,     0,     0,   274,   274,     0,   274,   274,   274,   274, 
        274,   274,   263,   263,     0,   194,   183,     0,   182,   461, 
        192,   190,     0,   191,     0,   193,   527,     0,     0,     0, 
          0,     0,     0,     0,   534,     0,     0,     0,   186,   170, 
        188,   180,     0,   252,     0,   542,   252,     0,   181,   252, 
        196,     0,     0,     0,     0,    14,    15,    16,   216,    18, 
         19,     0,    20,   252,   252,     0,   252,     0,   252,   194, 
        183,     0,   182,     0,   192,   190,   571,   191,    21,   193, 
          0,     0,   195,     0,     0,     0,     0,     0,     0,     0, 
          0,   472,   186,   170,   188,   180,     0,     0,   252,   252, 
          0,   199,   181,     0,   196,   590,     0,     0,     0,   217, 
          0,     0,   194,   183,     0,     0,   507,   192,   190,     0, 
        191,     0,   193,   600,     0,     0,   182,     0,   603,   252, 
        252,     0,     0,   605,     0,   186,   170,   188,   180,     0, 
          0,     6,     6,     6,     6,     6,     6,     0,     6,     0, 
          0,     0,     0,     0,     0,     0,   181,     0,   196,     0, 
          0,     6,     6,     6,     6,     0,     0,     0,     0,   182, 
        189,   187,   197,   198,   171,   172,   173,   174,   176,     0, 
          0,   184,   185,     0,   168,   169,   175,   178,   177,   179, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   181, 
        263,   196,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   194,   183,     0,     0,   512,   192,   190,     0,   191, 
          0,   193,     0,     0,     0,     0,   195,     0,     0,     0, 
          0,     0,     0,     0,   186,   170,   188,   180,     0,     0, 
          0,     0,     0,     0,     0,   199,     0,     0,   194,   183, 
          0,     0,   513,   192,   190,     0,   191,     0,   193,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   182,     0, 
          0,   186,   170,   188,   180,     0,     0,     0,   263,   263, 
        195,     0,   263,   263,   263,   263,   263,     0,     0,   263, 
        263,     0,   263,   263,   263,   263,   263,   263,   181,   199, 
        196,     0,     0,     0,     0,   182,     0,     0,     0,     0, 
          0,     0,     0,     0,   189,   187,   197,   198,   171,   172, 
        173,   174,   176,     0,     0,   184,   185,     0,   168,   169, 
        175,   178,   177,   179,   195,   181,     0,   196,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   199,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   189,   187, 
        197,   198,   171,   172,   173,   174,   176,   195,     0,   184, 
        185,     0,   168,   169,   175,   178,   177,   179,     0,     0, 
          0,     0,     0,     0,     0,     0,   199,     0,     0,   252, 
        252,   252,   252,   252,     0,     0,   252,   252,     0,   252, 
        252,   252,   252,   252,   252,     0,     0,     0,     0,     0, 
          0,     0,   189,   187,   197,   198,   171,   172,   173,   174, 
        176,     0,     0,   184,   185,     0,   168,   169,   175,   178, 
        177,   179,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   189,   187,   197,   198,   171, 
        172,   173,   174,   176,     0,     0,   184,   185,     0,   168, 
        169,   175,   178,   177,   179,     0,   195,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   199,     0,   194,   183,     0, 
          0,   560,   192,   190,     0,   191,     0,   193,     0,     0, 
          0,     0,     0,   195,     0,     0,     0,     0,     0,     0, 
        186,   170,   188,   180,     0,     0,     0,     0,     0,     0, 
          0,     0,   199,     0,   194,   183,     0,     0,   561,   192, 
        190,     0,   191,     0,   193,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   182,     0,     0,   186,   170,   188, 
        180,     0,     0,     0,   189,   187,   197,   198,   171,   172, 
        173,   174,   176,     0,     0,   184,   185,     0,   168,   169, 
        175,   178,   177,   179,   181,     0,   196,     0,     0,     0, 
          0,   182,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   189,   187,   197,   198,   171,   172,   173,   174,   176, 
          0,     0,   184,   185,     0,   168,   169,   175,   178,   177, 
        179,   181,     0,   196,     0,     0,     0,     0,     0,     0, 
          0,   194,   183,     0,     0,     0,   192,   190,     0,   191, 
          0,   193,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   585,   186,   170,   188,   180,   194,   183, 
          0,     0,     0,   192,   190,     0,   191,     0,   193,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   599, 
          0,   186,   170,   188,   180,     0,   269,   269,   182,     0, 
        269,   269,   269,   269,   269,     0,   269,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   269,   269,   269, 
        269,   269,   269,     0,     0,   182,     0,     0,   181,     0, 
        196,     0,     0,     0,     0,     0,     0,   260,   260,     0, 
          0,   260,   260,   260,   260,   260,     0,   260,     0,     0, 
          0,     0,   269,   269,     0,   181,     0,   196,   260,   260, 
        260,   260,   260,   260,   261,   261,     0,     0,   261,   261, 
        261,   261,   261,     0,   261,     0,     0,     0,     0,     0, 
          0,     0,   195,   269,   269,   261,   261,   261,   261,   261, 
        261,     0,     0,   260,   260,     0,     0,     0,     0,     0, 
          0,   199,     0,     0,     0,   262,   262,     0,     0,   262, 
        262,   262,   262,   262,     0,   262,     0,     0,     0,   195, 
        261,   261,     0,     0,   260,   260,   262,   262,   262,   262, 
        262,   262,     0,     0,     0,     0,     0,     0,   199,     0, 
          0,     0,     0,   258,     0,     0,   258,     0,   258,   258, 
        258,   261,   261,     0,     0,     0,     0,     0,     0,     0, 
          0,   262,   262,   258,   258,   258,   258,   258,   258,     0, 
        189,   187,   197,   198,   171,   172,   173,   174,   176,     0, 
          0,   184,   185,     0,   168,   169,   175,   178,   177,   179, 
          0,     0,   262,   262,     0,     0,     0,     0,   258,   258, 
          0,     0,     0,     0,     0,     0,     0,   189,   187,   197, 
        198,   171,   172,   173,   174,   176,   195,     0,   184,   185, 
          0,   168,   169,   175,   178,   177,   179,     0,     0,   258, 
        258,     0,     0,     0,     0,   199,     0,     0,     0,     0, 
        194,   183,     0,   195,     0,   192,   190,     0,   191,     0, 
        193,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   199,   186,   170,   188,   180,   194,   183,     0, 
          0,     0,   192,   190,     0,   191,     0,   193,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        186,   170,   188,   180,     0,     0,     0,   182,     0,     0, 
          0,     0,     0,     0,   189,   187,   197,   198,   171,   172, 
        173,   174,   176,     0,     0,   184,   185,     0,   168,   169, 
        175,   178,   177,   179,   182,     0,     0,   181,     0,   196, 
          0,   189,   187,   197,   198,   171,   172,   173,   174,   176, 
          0,     0,   184,   185,     0,   168,   169,   175,   178,   177, 
        179,     0,     0,     0,   181,     0,   196,     0,     0,   269, 
        269,     0,     0,   269,   269,   269,   269,   269,     0,     0, 
        269,   269,     0,   269,   269,   269,   269,   269,   269,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        260,   260,     0,     0,   260,   260,   260,   260,   260,     0, 
          0,   260,   260,     0,   260,   260,   260,   260,   260,   260, 
          0,     0,     0,     0,     0,     0,     0,   261,   261,     0, 
          0,   261,   261,   261,   261,   261,     0,     0,   261,   261, 
          0,   261,   261,   261,   261,   261,   261,     0,     0,     0, 
        112,     0,   122,     0,     0,     0,     0,   121,     0,     0, 
        110,     0,   111,     0,     0,     0,     0,     0,   262,   262, 
          0,     0,   262,   262,   262,   262,   262,   264,     0,   262, 
        262,     0,   262,   262,   262,   262,   262,   262,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   258,   258,     0,    68,   258, 
        258,   258,   258,   258,     0,   195,   258,   258,     0,   258, 
        258,   258,   258,   258,   258,     0,   259,     0,     0,   259, 
          0,   259,   259,   259,   199,     0,     0,     0,     0,     0, 
          0,     0,   195,   113,     0,     0,   259,   259,   259,   259, 
        259,   259,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   199,     0,     0,     0,     0,     0,     0,   251,     0, 
          0,   251,     0,     0,   251,     0,     0,     0,     0,     0, 
          0,   259,   259,     0,     0,     0,     0,     0,   251,   251, 
          0,   251,     0,   251,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   189,   187,   197,   198,   171,   172,   173, 
        174,   176,   259,   259,   184,   185,     0,   168,   169,   175, 
        178,   177,   179,   251,   251,     0,     0,     0,     0,     0, 
        189,   187,   197,   198,   171,   172,   173,   174,   176,     0, 
          0,   184,   185,     0,     0,   169,   175,   178,   177,   179, 
        253,     0,     0,   253,   251,   251,   253,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   268,     0,     0,   268, 
        253,   253,   268,   253,     0,   253,     0,   152,    70,    71, 
         72,    73,    74,     0,     0,     0,   268,   268,     0,   268, 
        249,   268,     0,   249,     0,     0,   249,     0,     0,     0, 
          0,     0,     0,    10,     0,   253,   253,     0,     0,   205, 
        249,   249,   205,   249,     0,   249,     0,     0,     0,     0, 
          0,   268,   268,     0,     0,     0,   205,   205,     0,   205, 
        117,   205,     0,     0,     0,   267,   253,   253,   267,     0, 
          0,   267,     0,     0,     0,   249,   249,     0,     0,     0, 
          0,     0,   268,   268,     0,   267,   267,   120,   267,   248, 
        267,   205,   248,   116,     0,   248,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   265,   249,   249,   265,   248, 
        248,   265,   248,     0,   248,     0,     0,     0,     0,     0, 
        267,   267,     0,   205,     0,   265,   265,     0,   265,     0, 
        265,     0,     0,     0,   254,     0,     0,   254,     0,     0, 
        254,     0,     0,     0,   248,   248,     0,     0,   265,   114, 
        115,   267,   267,     0,   254,   254,     0,   254,     0,   254, 
        265,   265,   266,     0,     0,   266,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   248,   248,     0,     0,   266, 
        266,     0,   266,     0,   266,     0,     0,     0,     0,   254, 
        254,   265,   265,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   266,   266,     0,     0,   259,   259, 
        254,   254,   259,   259,   259,   259,   259,     0,     0,   259, 
        259,     0,   259,   259,   259,   259,   259,   259,   255,     0, 
          0,   255,     0,     0,   255,   266,   266,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   255,   255, 
          0,   255,     0,   255,   251,   251,   251,   251,   251,     0, 
          0,   251,   251,     0,   251,   251,   251,   251,   251,   251, 
          0,     0,   194,   183,     0,     0,     0,   192,   190,     0, 
        191,     0,   193,   255,   255,     0,   194,     0,     0,     0, 
          0,   192,   190,   194,   191,   186,   193,   188,   192,   190, 
          0,   191,     0,   193,     0,     0,     0,     0,     0,   186, 
          0,   188,     0,     0,   255,   255,   186,     0,   188,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   182, 
          0,     0,     0,     0,     0,     0,   253,   253,   253,   253, 
        253,     0,     0,   253,   253,     0,   253,   253,   253,   253, 
        253,   253,   268,   268,   268,   268,   268,     0,     0,   268, 
        268,   196,   268,   268,   268,   268,   268,   268,     0,     0, 
          0,     0,     0,     0,     0,   196,   249,   249,   249,   249, 
        249,     0,   196,   249,   249,     0,   249,   249,   249,   249, 
        249,   249,   205,   205,   205,   205,   205,     0,     0,     0, 
          0,     0,   205,   205,   205,   205,   205,   205,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   267,   267,   267,   267,   267,     0,     0,   267,   267, 
          0,   267,   267,   267,   267,   267,   267,     0,     0,     0, 
          0,     0,     0,     0,     0,   248,   248,   248,   248,   248, 
          0,     0,   248,   248,     0,   248,   248,   248,   248,   248, 
        248,   265,   265,   265,   265,   265,     0,     0,     0,     0, 
          0,   265,   265,   265,   265,   265,   265,   112,     0,   122, 
          0,     0,     0,     0,   121,     0,     0,   110,     0,   111, 
        254,   254,   254,   254,   254,     0,     0,     0,     0,     0, 
        254,   254,   254,   254,   254,   254,   268,     0,     0,     0, 
          0,     0,     0,     0,     0,   266,   266,   266,   266,   266, 
          0,     0,     0,     0,     0,   266,   266,   266,   266,   266, 
        266,     0,   112,     0,   122,    68,     0,     0,     0,   121, 
          0,   112,   110,   122,   111,     0,     0,   195,   121,     0, 
          0,   110,     0,   111,     0,     0,     0,   109,     0,     0, 
          0,   195,     0,     0,     0,     0,   199,     0,   195,   260, 
        113,     0,   112,     0,   122,     0,     0,     0,     0,   121, 
        199,     0,   110,     0,   111,     0,     0,   199,     0,     0, 
         68,     0,     0,     0,   255,   255,   255,   255,   255,    68, 
        262,     0,     0,     0,   255,   255,   255,   255,   255,   255, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   113,     0,     0,     0,     0, 
         68,     0,     0,     0,   113,   189,   187,   197,   198,     0, 
          0,     0,     0,     0,     0,     0,   184,   185,     0,   189, 
        187,   197,   198,     0,     0,     0,   189,   187,   197,   198, 
        184,   185,     0,     0,     0,   113,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   112,     0,   122,     0,     0, 
          0,     0,   121,     0,     0,   110,     0,   111,     0,     0, 
          0,     0,     0,     0,   152,    70,    71,    72,    73,    74, 
          0,     0,     0,     0,     0,     0,   112,     0,   122,     0, 
          0,     0,     0,   121,     0,   112,   110,   122,   111,     0, 
         10,     0,   121,     0,     0,   110,     0,   111,     0,     0, 
          0,     0,     0,    68,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   117,     0,   118, 
        119,    71,    72,    73,    74,     0,     0,     0,   152,    70, 
         71,    72,    73,    74,    68,   370,     0,     0,   113,     0, 
          0,     0,     0,    68,   120,    10,     0,     0,     0,     0, 
        116,     0,     0,     0,    10,     0,     0,     0,     0,   152, 
         70,    71,    72,    73,    74,     0,     0,     0,     0,   113, 
          0,     0,   117,     0,     0,     0,     0,     0,   113,     0, 
          0,   117,     0,     0,     0,    10,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   120, 
          0,     0,     0,     0,   269,   116,   114,   115,   120,     0, 
          0,     0,   117,     0,   116,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   120, 
          0,     0,     0,     0,     0,   116,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   114,   115,     0,     0,     0,     0,     0,     0,     0, 
        114,   115,   152,    70,    71,    72,    73,    74,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,    10,     0, 
          0,   114,   115,   152,    70,    71,    72,    73,    74,     0, 
          0,     0,   309,   310,    71,    72,    73,    74,     0,     0, 
          0,     0,     0,     0,     0,   117,     0,     0,     0,    10, 
          0,     0,     0,     0,     0,     0,     0,     0,    10,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   120,     0,     0,     0,   117,     0,   116,     0, 
          0,     0,     0,     0,     0,   117,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   120,     0,     0,     0,     0,     0,   116, 
          0,     0,   120,     0,     0,     0,     0,     0,   116,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   114,   115,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   114,   115,     0,     0,     0, 
          0,     0,     0,     0,   114,   115, 
    );
    protected static $yyCheck = array(4,
         50,    51,    52,   126,   124,    91,   102,   307,    56,    41, 
        123,    46,    44,   207,    91,    91,   413,    41,   303,   260, 
         44,   125,   125,    28,    29,    59,    58,    59,    40,    34, 
         80,    46,    82,   125,    58,    59,    40,   451,   452,   304, 
         88,    89,    42,    58,    63,    50,    51,    52,   283,    54, 
         55,   286,   102,   149,   260,   407,    91,    60,   507,   300, 
         93,    93,    46,   512,   461,    41,   489,    41,    44,    93, 
         44,    44,    91,    59,    79,    80,   490,    82,   260,    59, 
        286,    44,    58,    59,    58,    59,    59,   281,    91,   123, 
         37,    38,   125,   125,   517,    42,    43,   102,    45,   149, 
         47,   125,    58,    41,   286,    41,    44,    41,    44,   159, 
         44,   123,   561,    60,    61,    62,    63,    93,    41,    93, 
         58,    59,    58,    59,    58,    59,    46,    44,   148,   126, 
         93,   580,   432,    91,   340,   487,    59,   142,   143,    44, 
        145,    87,   591,   123,   149,   195,   260,    94,    64,   125, 
        332,   125,   125,    63,   159,    93,   260,    93,    91,    93, 
         93,   166,   125,    91,   110,   111,   112,   113,   114,   115, 
         93,   117,   286,    37,   260,   121,    93,   124,    42,   126, 
        260,    91,    58,    47,   260,    44,   380,   125,    93,   125, 
        195,   125,    44,   164,   199,    44,   549,   550,   311,    91, 
        286,    41,   125,    62,    44,    46,   506,    59,   331,    41, 
        286,    59,    44,    62,   219,   161,    40,   163,    58,    59, 
        340,   574,   168,   169,   170,   171,   172,   173,   174,   175, 
        176,   177,   178,   179,   180,   181,   182,   183,   184,   185, 
        186,   187,   188,   189,   190,   191,   192,   193,   194,    41, 
        196,    60,    44,    93,   340,   310,   260,   260,   229,   559, 
        260,   207,   126,   340,   340,   236,    58,    59,    37,    38, 
        373,   374,    44,    42,    43,   123,    45,   257,    47,   402, 
        403,   373,   374,    91,   304,   125,    38,   233,    33,    41, 
         35,    60,    44,    62,    44,    40,   300,   310,    43,    46, 
         45,    93,   260,    59,   260,   261,    58,    59,    59,    61, 
         41,    63,    61,   318,   260,   312,   262,   320,   264,   265, 
         40,    93,   268,   269,    61,    94,    46,    41,   286,   332, 
         44,   310,   260,   125,   331,   281,    40,   340,   358,   305, 
         44,    93,    94,    93,    58,    59,    91,    61,   396,    63, 
        260,   322,   330,   125,   311,   124,   260,   126,   286,   305, 
        364,   307,   340,    40,   123,   312,   332,   123,   260,    46, 
         58,   317,   124,   125,   332,   125,   286,   323,    91,    93, 
        125,   126,   414,   415,   331,   420,   332,   260,   261,    93, 
        414,   415,   397,   123,   286,    44,   300,   368,    41,   524, 
        525,    44,   407,    58,   332,   402,   403,   123,   374,   257, 
        124,   125,   340,   379,   360,    91,    59,    33,   123,    35, 
        366,   367,   518,   369,    40,   410,   551,    43,   374,    45, 
        344,   345,    41,   379,   380,    44,   340,   383,   414,   415, 
        414,   415,    44,   125,    44,    40,   451,   452,   312,    93, 
         93,    46,   260,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   408,    58,   411,   412,    93,   331,   518,   416, 
        417,   418,   419,   373,   374,    91,   414,   415,   414,   415, 
        414,   415,   487,   260,    40,   490,   432,   433,    44,   494, 
         33,   123,    35,   464,   440,   441,    41,    40,   260,    44, 
         43,   257,    45,    59,    41,   125,    40,    44,    41,   125, 
        126,    44,   320,   518,   257,   260,   261,   262,   263,   264, 
        265,    37,    40,   469,   332,   575,    42,    43,    46,    45, 
         41,    47,   340,    44,    41,   481,   123,    44,   402,   403, 
         58,   286,    91,   312,    41,   595,    41,    44,    91,    44, 
         41,    37,    38,    44,    40,    41,    42,    43,    44,    45, 
        506,    47,   331,   509,   123,   511,    44,   123,   313,   125, 
        575,    58,    58,    59,   414,    61,    62,    63,   260,    40, 
        123,    58,    93,   126,   260,   261,   262,   263,   264,   265, 
        595,    41,   260,   260,    44,   340,   341,   342,   343,   545, 
        123,   346,    40,    58,   286,    91,    41,    93,    94,    40, 
        126,    44,    93,   559,    40,   360,   361,   362,   363,   125, 
        365,   366,   414,   415,   300,   370,   371,   372,   373,   374, 
         40,   400,   401,   402,   403,   581,    61,   123,   124,   125, 
        126,    40,   411,   412,   260,   261,   262,   263,   264,   265, 
        332,    91,   404,   405,   406,   407,   408,   402,   403,   411, 
        412,    61,   414,   415,   416,   417,   418,   419,    41,   123, 
        286,    33,   125,    35,   300,   301,   302,   125,    40,   125, 
         41,    43,   340,    45,    40,   430,   300,   301,   302,    40, 
        404,   405,   406,   407,   408,    59,    41,   313,    40,    44, 
        414,   415,   416,   417,   418,   419,    59,    40,    40,   340, 
         40,   260,    59,    58,    59,    41,   260,   260,   261,   262, 
        263,   264,   265,   125,   340,   341,   342,   343,    41,    91, 
        346,   361,    59,   340,    46,    59,    61,   286,    61,    41, 
         44,    93,   125,   286,   360,   361,   362,   363,    93,   365, 
        366,   300,   301,   302,   370,   123,   372,   373,   374,    41, 
         59,    40,    44,    91,   126,   125,    44,   364,   123,   321, 
        313,   257,   260,   340,   260,    41,    58,    59,    41,    41, 
        125,    44,   340,   332,    37,    38,   402,   403,    41,    42, 
         43,    44,    45,    41,    47,    59,    59,   340,   341,   342, 
        343,   123,   371,   346,   125,    58,    59,    60,    61,    62, 
         63,    93,   348,    40,   430,   125,   125,   360,   361,   362, 
        363,    59,   365,   366,   310,   311,   312,   370,   123,   372, 
         93,   125,   125,    41,   320,    58,   125,    41,    91,   123, 
         93,    94,   125,   125,   330,   331,   332,   260,   123,    59, 
        386,    41,    41,   123,   340,    44,    93,   125,    58,   402, 
        403,    41,   125,    91,    44,   257,   125,    91,    41,    58, 
         59,   124,   125,   126,    91,    91,   257,    91,    58,    59, 
         93,   125,   125,    41,   123,    37,    38,   430,    59,    41, 
         42,    43,    44,    45,    46,    47,   125,    59,   260,   261, 
        262,   263,   264,   265,    93,    41,    58,    59,    60,    61, 
         62,    63,    59,    93,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    41,   286,   411,   412,   364,   414,   415, 
        416,   417,   418,   419,    41,    41,   125,    41,   125,    91, 
         41,    93,    94,   125,    41,   125,     7,    44,    85,     6, 
         62,   313,   280,   281,   282,   283,   284,   285,    84,   287, 
        303,    58,    59,   452,   458,    79,   494,    49,    48,    91, 
        470,   507,   124,   125,   126,   303,   512,   199,   340,   341, 
        342,   343,    37,    38,   346,   369,   482,    42,    43,   567, 
         45,    41,    47,   531,    44,   159,    93,   308,   360,   361, 
        362,   363,   531,   365,   366,    60,   334,    62,   370,    59, 
        372,   159,   318,    37,    38,   209,   145,    41,    42,    43, 
         44,    45,    46,    47,   205,   561,    25,    -1,   125,   143, 
         -1,   145,   260,    -1,    58,    59,    60,    61,    62,    63, 
        402,   403,    -1,    93,   580,   159,   260,   261,   262,   263, 
        264,   265,   166,    -1,    -1,   591,    37,    38,   286,   312, 
         -1,    42,    43,    44,    45,    -1,    47,    91,   430,    93, 
         94,   126,   300,   301,   302,   125,    -1,    -1,   331,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        124,   125,   126,    -1,   332,   219,    58,    59,    -1,    -1, 
         91,    -1,    93,    94,    37,    38,    -1,    -1,    41,    42, 
         43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   414,   415,    -1,    58,    59,    60,    61,    62, 
         63,    93,    -1,   124,    -1,   126,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   410,   411,   412, 
        312,   414,   415,   416,   417,   418,   419,   420,    91,    -1, 
         93,    94,    -1,   125,    -1,    -1,    -1,    -1,    -1,   331, 
         -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43,    44, 
         45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,   126,   318,    60,    61,    62,    63,    -1, 
         -1,    37,    -1,    -1,    -1,    -1,    42,    43,    -1,    45, 
         91,    47,    -1,    -1,    -1,   414,   415,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   414,   415,    91,    -1,    93,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   312,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   420,   124, 
         -1,   126,    -1,    -1,    -1,    -1,   331,    -1,    -1,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,   312,    47, 
        280,   281,   282,   283,   284,   285,    -1,   287,    -1,    -1, 
        126,    -1,    60,    61,    62,    63,    -1,   331,    -1,    -1, 
         -1,    -1,    -1,   303,    -1,    37,    38,   414,   415,    41, 
         42,    43,    44,    45,    46,    47,    91,    -1,    -1,    -1, 
         -1,   312,    -1,    91,    -1,    -1,    94,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,   400,   401,   402,   403,    -1, 
        331,    -1,    -1,    -1,    -1,    -1,   411,   412,    -1,    -1, 
        125,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126,    91, 
         -1,    -1,    94,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,   312, 
        414,   415,   416,   417,   418,   419,   420,    -1,    -1,    -1, 
         -1,    -1,   124,    91,   126,    -1,    -1,    -1,   331,   280, 
        281,   282,   283,   284,   285,    -1,   287,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,   410, 
        411,   412,   303,   414,   415,   416,   417,   418,   419,   420, 
         -1,    -1,    -1,    -1,    37,    38,    -1,    40,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,   414,   415,    -1,    58,    59,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,    -1,   331,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   312,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,   420,    91,    -1, 
         93,    94,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   280,   281,   282,   283,   284, 
        285,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        123,   124,   125,   126,    -1,    -1,    -1,    -1,   303,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,   312,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   420,    -1,    -1,    -1,   334, 
         -1,    -1,    -1,   331,    -1,    -1,   402,   403,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
        312,    47,   280,   281,   282,   283,   284,   285,    -1,   287, 
         -1,    -1,    58,    59,    60,    61,    62,    -1,    -1,   331, 
         -1,    -1,   300,   301,   302,    -1,   304,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   410,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   420,    -1,   257,    -1,    -1,   260,   124,   125, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   420,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   310,   311,   312, 
         58,    59,    60,    61,    62,    63,    -1,   320,    -1,    -1, 
         -1,    91,    -1,    -1,    -1,    -1,    -1,   330,   331,   332, 
         -1,    -1,    -1,    -1,    37,    38,    -1,   340,    41,    42, 
         43,    44,    45,    -1,    47,    93,    94,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62, 
         63,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,   124,   125,   126,    -1, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
         93,    94,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,   410,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    93,    94,    -1, 
         -1,   124,   125,   126,    -1,    -1,    -1,    -1,    -1,    91, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,   312,    -1,   124,   125, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,   125,   330,   331,    -1,    -1,    -1,    -1, 
         -1,    37,    38,    -1,   340,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1, 
        260,    -1,    58,    59,    60,    61,    62,    63,    -1,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
        280,   281,   282,   283,   284,   285,   286,   287,   124,   125, 
         58,    59,    60,    61,    62,    63,    -1,    93,    94,    -1, 
         -1,    -1,    -1,   303,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    93,    94,    -1,   124,   125, 
         -1,    -1,   332,    -1,   312,    -1,    -1,    -1,    -1,    91, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   331,    -1,    -1,   124,   125,    -1,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         58,    59,    60,    61,    62,    63,    -1,    -1,   280,   281, 
        282,   283,   284,   285,    -1,   287,    -1,    -1,   331,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,   303,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   334,    -1,    -1,    -1,   124,   125,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   312,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   280,   281, 
        282,   283,   284,   285,    -1,   287,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,   312,    45,    -1,    47,   300,   301, 
        302,   303,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    94,    -1,    91,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   124,    -1,   126,    -1,    -1,   370, 
        125,    -1,   400,   401,   312,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    91,    -1,    -1,    -1,   427,    -1,    -1,    -1, 
         -1,    37,    38,   434,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    94,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,   400,   401,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   124,   125,    -1,    37,    38,    -1,    94,    41, 
         42,    43,    -1,    45,    -1,    47,   497,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   505,    -1,    -1,    -1,    60,    61, 
         62,    63,    -1,    38,    -1,   516,    41,    -1,   124,    44, 
        126,    -1,    -1,    -1,    -1,   280,   281,   282,   283,   284, 
        285,    -1,   287,    58,    59,    -1,    61,    -1,    63,    37, 
         38,    -1,    94,    -1,    42,    43,   547,    45,   303,    47, 
         -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    59,    60,    61,    62,    63,    -1,    -1,    93,    94, 
         -1,   331,   124,    -1,   126,   576,    -1,    -1,    -1,   334, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,   594,    -1,    -1,    94,    -1,   599,   124, 
        125,    -1,    -1,   604,    -1,    60,    61,    62,    63,    -1, 
         -1,   280,   281,   282,   283,   284,   285,    -1,   287,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126,    -1, 
         -1,   300,   301,   302,   303,    -1,    -1,    -1,    -1,    94, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124, 
        312,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    37,    38, 
         -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,   400,   401, 
        312,    -1,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   124,   331, 
        126,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   312,   124,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   312,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    37,    38,    -1,    -1,    41,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    94,    -1,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,   124,    -1,   126,    -1,    -1,    -1, 
         -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    59,    60,    61,    62,    63,    37,    38, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         -1,    60,    61,    62,    63,    -1,    37,    38,    94,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    94,    -1,    -1,   124,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    93,    94,    -1,   124,    -1,   126,    58,    59, 
         60,    61,    62,    63,    37,    38,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,   124,   125,    58,    59,    60,    61,    62, 
         63,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,   331,    -1,    -1,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,   312, 
         93,    94,    -1,    -1,   124,   125,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1, 
         -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    43,    44, 
         45,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    94,    58,    59,    60,    61,    62,    63,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    93,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   312,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,   124, 
        125,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1, 
         37,    38,    -1,   312,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    60,    61,    62,    63,    37,    38,    -1, 
         -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    -1,    -1,    -1,    94,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    94,    -1,    -1,   124,    -1,   126, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,   124,    -1,   126,    -1,    -1,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
         33,    -1,    35,    -1,    -1,    -1,    -1,    40,    -1,    -1, 
         43,    -1,    45,    -1,    -1,    -1,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,    60,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    91,   404, 
        405,   406,   407,   408,    -1,   312,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,    38,    -1,    -1,    41, 
         -1,    43,    44,    45,   331,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,   126,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   331,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1, 
         -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   124,   125,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    93,    94,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419, 
         38,    -1,    -1,    41,   124,   125,    44,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41, 
         58,    59,    44,    61,    -1,    63,    -1,   260,   261,   262, 
        263,   264,   265,    -1,    -1,    -1,    58,    59,    -1,    61, 
         38,    63,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1, 
         -1,    -1,    -1,   286,    -1,    93,    94,    -1,    -1,    41, 
         58,    59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    58,    59,    -1,    61, 
        313,    63,    -1,    -1,    -1,    38,   124,   125,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1, 
         -1,    -1,   124,   125,    -1,    58,    59,   340,    61,    38, 
         63,    93,    41,   346,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    38,   124,   125,    41,    58, 
         59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         93,    94,    -1,   125,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1, 
         44,    -1,    -1,    -1,    93,    94,    -1,    -1,   401,   402, 
        403,   124,   125,    -1,    58,    59,    -1,    61,    -1,    63, 
         93,    94,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    93, 
         94,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,   400,   401, 
        124,   125,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    38,    -1, 
         -1,    41,    -1,    -1,    44,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    37,    38,    -1,    -1,    -1,    42,    43,    -1, 
         45,    -1,    47,    93,    94,    -1,    37,    -1,    -1,    -1, 
         -1,    42,    43,    37,    45,    60,    47,    62,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    60, 
         -1,    62,    -1,    -1,   124,   125,    60,    -1,    62,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,   126,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,   404,   405,   406,   407, 
        408,    -1,   126,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   404,   405,   406,   407,   408,    -1,    -1,    -1, 
         -1,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,   414,   415,   416,   417,   418,   419,    33,    -1,    35, 
         -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1, 
        414,   415,   416,   417,   418,   419,    62,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,    -1,    -1,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    33,    -1,    35,    91,    -1,    -1,    -1,    40, 
         -1,    33,    43,    35,    45,    -1,    -1,   312,    40,    -1, 
         -1,    43,    -1,    45,    -1,    -1,    -1,    58,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,   331,    -1,   312,    61, 
        126,    -1,    33,    -1,    35,    -1,    -1,    -1,    -1,    40, 
        331,    -1,    43,    -1,    45,    -1,    -1,   331,    -1,    -1, 
         91,    -1,    -1,    -1,   404,   405,   406,   407,   408,    91, 
         61,    -1,    -1,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,   126,   400,   401,   402,   403,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   411,   412,    -1,   400, 
        401,   402,   403,    -1,    -1,    -1,   400,   401,   402,   403, 
        411,   412,    -1,    -1,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    33,    -1,    35,    -1,    -1, 
         -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1, 
         -1,    -1,    -1,    -1,   260,   261,   262,   263,   264,   265, 
         -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    35,    -1, 
         -1,    -1,    -1,    40,    -1,    33,    43,    35,    45,    -1, 
        286,    -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1, 
         -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,   260, 
        261,   262,   263,   264,   265,    -1,    -1,    -1,   260,   261, 
        262,   263,   264,   265,    91,   123,    -1,    -1,   126,    -1, 
         -1,    -1,    -1,    91,   340,   286,    -1,    -1,    -1,    -1, 
        346,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,   265,    -1,    -1,    -1,    -1,   126, 
         -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,   313,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,   400,   346,   402,   403,   340,    -1, 
         -1,    -1,   313,    -1,   346,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        402,   403,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1, 
         -1,   402,   403,   260,   261,   262,   263,   264,   265,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,   286, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   340,    -1,    -1,    -1,   313,    -1,   346,    -1, 
         -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346, 
         -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, "'#'", NULL, "'%'", "'&'", 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", "'^'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", "'|'", "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_ARROW', NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', 'T_OCTAL', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', 'T_CLONE', NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', 'T_AS', 'T_THIS', NULL, 'T_CONST', NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 'T_OR_EQUAL', 'T_AND_EQUAL', 
      'T_XOR_EQUAL', 'T_NAV', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_WITH', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new \text\parser\generic\ParseException(sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new \text\parser\generic\ParseException(sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 182 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 194 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 194 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 7:  #line 205 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 206 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 9:  #line 210 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 210 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 218 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 219 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 220 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 226 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 231 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 232 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 20:  #line 238 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode(), TRUE); } break;

    case 21:  #line 238 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 22:  #line 247 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode(), TRUE); } break;

    case 23:  #line 247 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 24:  #line 256 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode(), TRUE); } break;

    case 25:  #line 256 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 26:  #line 267 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 268 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 272 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 29:  #line 273 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 30:  #line 277 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 31:  #line 278 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 32:  #line 282 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 33:  #line 283 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 34:  #line 287 "grammar/xp.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 35:  #line 288 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 292 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 37:  #line 293 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 38:  #line 294 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StaticInitializerNode($yyVals[-1+$yyTop])); } break;

    case 39:  #line 298 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 40:  #line 299 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 41:  #line 300 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 42:  #line 304 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 43:  #line 305 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 44:  #line 309 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 45:  #line 309 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 46:  #line 312 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 47:  #line 312 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 48:  #line 322 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 49:  #line 329 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 50:  #line 336 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ClassConstantNode($yyVals[-3+$yyTop], new TypeName($yyVals[-4+$yyTop]), $yyVals[-1+$yyTop]));
    } break;

    case 51:  #line 342 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 52:  #line 343 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IndexerNode(array('parameter' => $yyVals[-1+$yyTop]))); } break;

    case 53:  #line 347 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 54:  #line 348 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 55:  #line 352 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop]=> NULL); } break;

    case 56:  #line 353 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 57:  #line 357 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 58:  #line 358 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 59:  #line 364 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 60:  #line 364 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 61:  #line 375 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 62:  #line 375 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= new TypeName('self');
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= array_merge((array)$yyVals[0+$yyTop], array(new ReturnNode(new VariableNode($yyVals[-7+$yyTop]))));
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 63:  #line 386 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 64:  #line 386 "grammar/xp.jay"
    {
      /* Assert only certain methods are allowed here. This could be done by making*/
      /* __construct and friends keywords - or this way!*/
      switch ($yyVals[-6+$yyTop]) {
        case '__construct': $yyVal= $yyLex->create(new ConstructorNode(), TRUE); break;
        default: $this->error(
          E_ERROR, 
          sprintf(
            'Method "%s" requires a return type at %s, line %d (offset %d)',
            $yyVals[-6+$yyTop],
            $yyLex->fileName,
            $p[0],
            $p[1]
          ), 
          array('__construct')
        );
        $yyVal= $yyLex->create(new MethodNode(), TRUE);
      }
      $yyVal->position= $p;
      $yyVal->modifiers= $yyVals[-7+$yyTop][0];
      $yyVal->annotations= $yyVals[-7+$yyTop][1];
      $yyVal->parameters= $yyVals[-3+$yyTop];
      $yyVal->throws= $yyVals[-1+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 65:  #line 411 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode(), TRUE); } break;

    case 66:  #line 411 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 67:  #line 424 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 68:  #line 425 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 69:  #line 429 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 70:  #line 430 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 71:  #line 434 "grammar/xp.jay"
    {
      $yyVal= $yyVals[0+$yyTop];
    } break;

    case 72:  #line 437 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop] && $yyVals[-3+$yyTop]->parameters= array('default' => $yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 73:  #line 441 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 74:  #line 448 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 75:  #line 453 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= '$'.$yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 76:  #line 458 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 77:  #line 465 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 78:  #line 466 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 79:  #line 470 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 80:  #line 471 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 81:  #line 475 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 82:  #line 476 "grammar/xp.jay"
    { $yyVal= (array)$yyVals[-1+$yyTop]; } break;

    case 83:  #line 477 "grammar/xp.jay"
    { $yyVal= array($yyLex->create(new ReturnNode($yyVals[-1+$yyTop]))); } break;

    case 84:  #line 481 "grammar/xp.jay"
    { $yyVal= array(NULL, NULL); } break;

    case 85:  #line 482 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop][0]['type']); } break;

    case 86:  #line 483 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 87:  #line 487 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 88:  #line 488 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 89:  #line 492 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 90:  #line 493 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 91:  #line 497 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[-1+$yyTop]), $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 92:  #line 498 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[0+$yyTop], 'vararg' => TRUE), $yyVals[-2+$yyTop]); } break;

    case 93:  #line 499 "grammar/xp.jay"
    { $yyVal= array('assign' => $yyVals[-1+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 94:  #line 503 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[0+$yyTop], 'check' => TRUE); } break;

    case 95:  #line 504 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[-1+$yyTop], 'check' => FALSE); } break;

    case 96:  #line 508 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 97:  #line 509 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 98:  #line 513 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 101:  #line 519 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 102:  #line 523 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 104:  #line 528 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 105:  #line 529 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 106:  #line 530 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 113:  #line 549 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 115:  #line 554 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 116:  #line 555 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 117:  #line 559 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 118:  #line 559 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 119:  #line 562 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 120:  #line 562 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 121:  #line 567 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 122:  #line 567 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 123:  #line 577 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 124:  #line 577 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 125:  #line 582 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 126:  #line 582 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 127:  #line 586 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 128:  #line 586 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[-5+$yyTop];
    } break;

    case 129:  #line 590 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 130:  #line 590 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 131:  #line 594 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 133:  #line 595 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 135:  #line 596 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 136:  #line 596 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 137:  #line 599 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 138:  #line 599 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 139:  #line 604 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArmNode($yyVals[-4+$yyTop]['i'], $yyVals[-4+$yyTop]['v'], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 140:  #line 607 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new WithNode($yyVals[-4+$yyTop], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 142:  #line 614 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 143:  #line 615 "grammar/xp.jay"
    { $yyVal= array_merge_recursive($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 144:  #line 619 "grammar/xp.jay"
    {
      $yyVal= array('i' => array(), 'v' => array(new VariableNode($yyVals[0+$yyTop])));
    } break;

    case 145:  #line 622 "grammar/xp.jay"
    {
      $v= new VariableNode($yyVals[-2+$yyTop]);
      $yyVal= array('i' => array($yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => $v, 'expression' => $yyVals[0+$yyTop])))), 'v' => array($v)); 
    } break;

    case 146:  #line 629 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 147:  #line 630 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 148:  #line 634 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => new VariableNode($yyVals[-2+$yyTop]), 'expression' => $yyVals[0+$yyTop]))); 
    } break;

    case 149:  #line 640 "grammar/xp.jay"
    { $yyVal= array('value' => $yyVals[0+$yyTop]); } break;

    case 150:  #line 641 "grammar/xp.jay"
    { $yyVal= array('key' => $yyVals[-2+$yyTop], 'value' => $yyVals[0+$yyTop]); } break;

    case 151:  #line 645 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 153:  #line 650 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 154:  #line 651 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 155:  #line 655 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 156:  #line 655 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 157:  #line 659 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 158:  #line 659 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 159:  #line 665 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 160:  #line 666 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 161:  #line 670 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 162:  #line 671 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 163:  #line 671 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 164:  #line 676 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 165:  #line 677 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 166:  #line 681 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 167:  #line 682 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 168:  #line 686 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 169:  #line 686 "grammar/xp.jay"
    {
      $yyVal= array();
      foreach ($yyVals[-5+$yyTop] as $type) {
        $c= new CatchNode();
        $c->position= $p;
        $c->type= $type;
        $c->variable= $yyVals[-4+$yyTop];
        $c->statements= $yyVals[-1+$yyTop];
        $yyVal[]= $c;
      }
    } break;

    case 170:  #line 700 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 171:  #line 701 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 172:  #line 705 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 174:  #line 710 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 175:  #line 710 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 176:  #line 718 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 178:  #line 723 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 179:  #line 724 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 180:  #line 728 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 182:  #line 733 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 183:  #line 739 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->values= (array)$yyVals[-1+$yyTop];
    } break;

    case 184:  #line 744 "grammar/xp.jay"
    {
      $yyVal= new MapNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->elements= (array)$yyVals[-1+$yyTop];
    } break;

    case 185:  #line 752 "grammar/xp.jay"
    { 
      $yyVal= new StaticMemberAccessNode(NULL, $yyVals[0+$yyTop]); 
    } break;

    case 186:  #line 755 "grammar/xp.jay"
    { 
      $yyVal= new StaticMethodCallNode(NULL, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); 
    } break;

    case 187:  #line 758 "grammar/xp.jay"
    {
      $yyVal= new ConstantAccessNode(NULL, $yyVals[0+$yyTop]);
    } break;

    case 188:  #line 761 "grammar/xp.jay"
    {
      $yyVal= new ClassAccessNode(NULL);
    } break;

    case 189:  #line 767 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 190:  #line 767 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-2+$yyTop];
      }
    } break;

    case 191:  #line 773 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      }
    } break;

    case 192:  #line 779 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 193:  #line 779 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 194:  #line 788 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 195:  #line 788 "grammar/xp.jay"
    {
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[-1+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 196:  #line 798 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode($yyVals[-1+$yyTop])); } break;

    case 197:  #line 798 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-2+$yyTop];
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-4+$yyTop];
      } else {
        $yyVal= $yyVals[-4+$yyTop];
      }
    } break;

    case 198:  #line 807 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CloneNode($yyVals[0+$yyTop])); break;
    } break;

    case 199:  #line 810 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CastNode(array_merge($yyVals[0+$yyTop], array('expression' => $yyVals[-2+$yyTop])))); 
    } break;

    case 200:  #line 813 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 201:  #line 816 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 202:  #line 819 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 203:  #line 822 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 204:  #line 825 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 205:  #line 829 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 206:  #line 835 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 207:  #line 841 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 208:  #line 847 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 209:  #line 852 "grammar/xp.jay"
    { $yyVals[-5+$yyTop]= $yyLex->create(new LambdaNode($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); } break;

    case 210:  #line 852 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-7+$yyTop];
      }
    } break;

    case 211:  #line 858 "grammar/xp.jay"
    { 
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= new BracedExpressionNode($yyVals[-2+$yyTop]);
      } else {
        $yyVal= new BracedExpressionNode($yyVals[-2+$yyTop]); 
      }
    } break;

    case 212:  #line 869 "grammar/xp.jay"
    {
      $yyVal= array(new ReturnNode($yyVals[0+$yyTop]));
    } break;

    case 213:  #line 872 "grammar/xp.jay"
    {
      $yyVal= (array)$yyVals[-1+$yyTop];
    } break;

    case 214:  #line 878 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 216:  #line 883 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 217:  #line 884 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 218:  #line 888 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 219:  #line 889 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 220:  #line 893 "grammar/xp.jay"
    { switch ($yyVals[0+$yyTop]) {
      case 'true': $yyVal= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $yyVal= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $yyVal= $yyLex->create(new NullNode()); break;
      default: $yyVal= $yyLex->create(new ConstantNode($yyVals[0+$yyTop])); break;
    }} break;

    case 221:  #line 899 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 222:  #line 899 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 223:  #line 900 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IntegerNode($yyVals[0+$yyTop])); } break;

    case 224:  #line 901 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode($yyVals[0+$yyTop])); } break;

    case 225:  #line 902 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new OctalNode($yyVals[0+$yyTop])); } break;

    case 226:  #line 903 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode($yyVals[0+$yyTop])); } break;

    case 227:  #line 904 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode($yyVals[0+$yyTop])); } break;

    case 228:  #line 908 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => (array)$yyVals[0+$yyTop])));
    } break;

    case 229:  #line 911 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => (array)$yyVals[0+$yyTop])));
    } break;

    case 230:  #line 917 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 232:  #line 922 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 233:  #line 923 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 234:  #line 927 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 236:  #line 932 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 237:  #line 933 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 238:  #line 937 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 239:  #line 938 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 240:  #line 939 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 241:  #line 940 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 242:  #line 941 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 243:  #line 942 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 244:  #line 943 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 245:  #line 944 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 246:  #line 945 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 247:  #line 946 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 248:  #line 947 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 249:  #line 948 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 250:  #line 952 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 251:  #line 953 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 252:  #line 954 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 253:  #line 955 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 254:  #line 956 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 255:  #line 957 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 256:  #line 958 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 257:  #line 959 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 258:  #line 963 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 259:  #line 964 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 260:  #line 965 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 261:  #line 966 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 262:  #line 967 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 263:  #line 968 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 264:  #line 969 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 265:  #line 970 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 266:  #line 971 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 267:  #line 972 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 268:  #line 973 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 269:  #line 977 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 270:  #line 978 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 271:  #line 979 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 272:  #line 980 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 273:  #line 981 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 274:  #line 982 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 275:  #line 986 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 276:  #line 987 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 277:  #line 992 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 279:  #line 997 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop]); } break;

    case 280:  #line 998 "grammar/xp.jay"
    { $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop]; $yyVal= array($yyVals[0+$yyTop][0], $yyVals[-1+$yyTop]); } break;

    case 281:  #line 1002 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode(NULL)); } break;

    case 282:  #line 1002 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 283:  #line 1005 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MemberAccessNode(NULL, $yyVals[0+$yyTop], $yyVals[-1+$yyTop])); 
    } break;

    case 284:  #line 1008 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new MethodCallNode(NULL, $yyVals[-1+$yyTop], NULL, $yyVals[-2+$yyTop])); } break;

    case 285:  #line 1008 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 286:  #line 1011 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new InstanceCallNode(NULL, NULL, $yyVals[-1+$yyTop])); } break;

    case 287:  #line 1011 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 288:  #line 1017 "grammar/xp.jay"
    { $yyVal= FALSE; } break;

    case 289:  #line 1018 "grammar/xp.jay"
    { $yyVal= TRUE; } break;

    case 296:  #line 1036 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 297:  #line 1037 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 298:  #line 1041 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop]->compoundName().'[]'); } break;

    case 299:  #line 1045 "grammar/xp.jay"
    { $yyVal= new TypeName('[:'.$yyVals[-1+$yyTop]->compoundName().']'); } break;

    case 300:  #line 1049 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 301:  #line 1050 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 303:  #line 1055 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 304:  #line 1059 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 305:  #line 1060 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 306:  #line 1066 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 307:  #line 1067 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 308:  #line 1071 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 309:  #line 1072 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 310:  #line 1076 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 311:  #line 1077 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 312:  #line 1078 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 313:  #line 1079 "grammar/xp.jay"
    { $yyVal= MODIFIER_PACKAGE; } break;

    case 314:  #line 1080 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 315:  #line 1081 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 316:  #line 1082 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 317:  #line 1083 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2775 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
