<?php
#line 2 "grammar/xp.jay"
namespace xp\compiler\syntax\xp;

use xp\compiler\types\TypeName;
use xp\compiler\ast\ParseTree;
use xp\compiler\ast\PackageNode;
use xp\compiler\ast\ImportNode;
use xp\compiler\ast\StaticImportNode;
use xp\compiler\ast\NativeImportNode;
use xp\compiler\ast\AnnotationNode;
use xp\compiler\ast\ClassNode;
use xp\compiler\ast\EnumNode;
use xp\compiler\ast\EnumMemberNode;
use xp\compiler\ast\InterfaceNode;
use xp\compiler\ast\FieldNode;
use xp\compiler\ast\PropertyNode;
use xp\compiler\ast\IndexerNode;
use xp\compiler\ast\ConstructorNode;
use xp\compiler\ast\MethodNode;
use xp\compiler\ast\OperatorNode;
use xp\compiler\ast\ReturnNode;
use xp\compiler\ast\InstanceCreationNode;
use xp\compiler\ast\VariableNode;
use xp\compiler\ast\ArrayAccessNode;
use xp\compiler\ast\CastNode;
use xp\compiler\ast\TryNode;
use xp\compiler\ast\CatchNode;
use xp\compiler\ast\ThrowNode;
use xp\compiler\ast\FinallyNode;
use xp\compiler\ast\ForNode;
use xp\compiler\ast\ForeachNode;
use xp\compiler\ast\DoNode;
use xp\compiler\ast\WhileNode;
use xp\compiler\ast\AssignmentNode;
use xp\compiler\ast\InvocationNode;
use xp\compiler\ast\MethodCallNode;
use xp\compiler\ast\InstanceCallNode;
use xp\compiler\ast\StaticMethodCallNode;
use xp\compiler\ast\MemberAccessNode;
use xp\compiler\ast\StaticMemberAccessNode;
use xp\compiler\ast\ConstantNode;
use xp\compiler\ast\ConstantAccessNode;
use xp\compiler\ast\ClassAccessNode;
use xp\compiler\ast\IntegerNode;
use xp\compiler\ast\HexNode;
use xp\compiler\ast\OctalNode;
use xp\compiler\ast\DecimalNode;
use xp\compiler\ast\StringNode;
use xp\compiler\ast\BooleanNode;
use xp\compiler\ast\NullNode;
use xp\compiler\ast\ArrayNode;
use xp\compiler\ast\MapNode;
use xp\compiler\ast\ClassConstantNode;
use xp\compiler\ast\InstanceOfNode;
use xp\compiler\ast\ComparisonNode;
use xp\compiler\ast\BinaryOpNode;
use xp\compiler\ast\BooleanOpNode;
use xp\compiler\ast\UnaryOpNode;
use xp\compiler\ast\TernaryNode;
use xp\compiler\ast\SwitchNode;
use xp\compiler\ast\CaseNode;
use xp\compiler\ast\DefaultNode;
use xp\compiler\ast\BreakNode;
use xp\compiler\ast\ContinueNode;
use xp\compiler\ast\CloneNode;
use xp\compiler\ast\IfNode;
use xp\compiler\ast\ElseNode;
use xp\compiler\ast\StaticInitializerNode;
use xp\compiler\ast\LambdaNode;
use xp\compiler\ast\WithNode;
use xp\compiler\ast\ArmNode;
use xp\compiler\ast\BracedExpressionNode;
#line 75 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends \text\parser\generic\AbstractParser {
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_CONCAT_EQUAL= 416;
    const T_MOD_EQUAL= 408;
    const T_AND_EQUAL= 418;
    const T_OR_EQUAL= 417;
    const T_XOR_EQUAL= 419;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_SE= 401;
    const T_GE= 400;
    const T_ARROW= 257;
    const T_EXP= 421;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_AS= 331;
    const T_NEW= 346;
    const T_CLONE= 313;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_OCTAL= 265;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_THIS= 332;
    const T_CONST= 334;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const T_NAV= 420;
    const T_WITH= 430;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     9,     7, 
          8,     8,     8,    10,    10,    10,     4,     4,     4,    13, 
          3,    17,     3,    19,     3,    14,    14,    15,    15,    20, 
         20,    22,    22,    16,    16,    23,    23,    23,    18,    18, 
         18,    27,    27,    29,    28,    30,    28,    24,    24,    24, 
         34,    34,    35,    35,    38,    38,    33,    33,    40,    25, 
         43,    25,    45,    25,    47,    25,    11,    11,    48,    48, 
         50,    50,    50,    51,    51,    51,    52,    52,    53,    53, 
         42,    42,    42,    39,    39,    39,    44,    44,    54,    54, 
         37,    37,    37,    55,    55,    41,    41,    46,    46,    46, 
         46,    46,    46,    26,    26,    56,    56,    59,    57,    60, 
         57,    63,    57,    65,    57,    67,    57,    68,    57,    69, 
         57,    71,    57,    72,    57,    73,    57,    74,    57,    57, 
         57,    57,    76,    76,    78,    78,    77,    77,    79,    66, 
         66,    70,    70,    80,    80,    82,    81,    83,    81,    61, 
         61,    62,    84,    62,    75,    75,    85,    85,    89,    88, 
         90,    90,    86,    86,    91,    87,    64,    64,    92,    92, 
         58,    58,    93,    93,    93,    97,    97,    97,    97,    99, 
         31,    31,   100,    31,   101,    31,   102,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,    31,   110, 
         31,    31,   109,   109,   108,   108,   111,   111,   112,   112, 
         36,   114,    36,    36,    36,    36,    36,    36,   113,   113, 
         96,    96,   115,   115,   117,   117,   116,   116,   103,   103, 
        103,   103,   103,   103,   103,   103,   103,   103,   103,   103, 
        104,   104,   104,   104,   104,   104,   104,   104,   105,   105, 
        105,   105,   105,   105,   105,   105,   105,   105,   105,   105, 
        106,   106,   106,   106,   106,   106,   107,   107,    98,    98, 
        118,   118,   120,   119,   119,   123,   119,   124,   119,   121, 
        121,   122,   122,   122,    32,    32,    32,    12,    12,    94, 
         95,   125,   125,   126,   126,    21,    21,    49,    49,   127, 
        127,   128,   128,   128,   128,   128,   128,   128,   128, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     0,     7, 
          0,     1,     1,     1,     1,     3,     1,     3,     3,     0, 
          9,     0,     9,     0,     8,     0,     2,     0,     2,     0, 
          2,     0,     3,     2,     0,     1,     1,     4,     3,     1, 
          0,     1,     3,     0,     3,     0,     6,     5,     6,     6, 
          1,     4,     1,     2,     2,     4,     0,     2,     0,     9, 
          0,     9,     0,     8,     0,    10,     4,     1,     1,     3, 
          2,     5,     5,     3,     3,     1,     1,     3,     3,     3, 
          1,     3,     3,     0,     2,     1,     0,     1,     1,     3, 
          3,     3,     4,     1,     2,     0,     2,     1,     1,     1, 
          1,     1,     1,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     8,     0, 
          8,     0,     3,     0,     3,     0,     4,     0,     6,     7, 
          7,     2,     1,     3,     1,     3,     1,     3,     3,     1, 
          3,     0,     1,     1,     2,     0,     5,     0,     4,     1, 
          3,     0,     0,     3,     2,     1,     1,     2,     0,     9, 
          1,     3,     0,     1,     0,     5,     0,     1,     1,     3, 
          0,     1,     5,     4,     4,     1,     4,     1,     1,     0, 
          3,     2,     0,     4,     0,     5,     0,     6,     2,     3, 
          1,     1,     1,     1,     1,     5,     3,     3,     3,     0, 
          8,     4,     1,     3,     0,     1,     1,     3,     1,     2, 
          1,     0,     4,     1,     1,     1,     1,     1,     1,     1, 
          1,     1,     1,     3,     0,     1,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     4,     4, 
          3,     3,     3,     3,     3,     3,     4,     4,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     4,     4,     3, 
          2,     2,     2,     2,     2,     2,     2,     2,     0,     1, 
          1,     2,     0,     4,     2,     0,     6,     0,     5,     1, 
          1,     1,     1,     1,     1,     1,     1,     1,     4,     3, 
          4,     1,     3,     1,     3,     1,     3,     0,     1,     1, 
          2,     1,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     9,     0,     0,     7,     0,     0, 
          0,     0,     0,   302,   304,   303,   306,   308,   307,   309, 
        305,     1,     0,    68,     0,   300,     8,     0,     0,     4, 
         12,    13,     0,     0,     0,    69,    20,    24,    22,   301, 
         18,    19,     0,     0,     0,    76,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    70,    67,     0,     0, 
          0,     0,    15,     0,     0,    74,    75,   212,     0,   218, 
        214,   217,   215,   216,     0,     0,     0,    77,     0,     0, 
          0,     0,     0,     0,     0,    10,     0,     0,     0,    72, 
          0,    73,     0,     0,   285,     0,   286,   287,     0,   292, 
         27,     0,     0,     0,    31,    35,     0,    16,   221,     0, 
          0,     0,     0,     0,     0,   183,     0,     0,     0,   180, 
          0,     0,     0,     0,     0,   219,     0,   220,   191,   192, 
        193,   194,   195,     0,     0,   223,   211,    79,    80,     0, 
         78,     0,     0,     0,     0,   289,    29,    35,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   189, 
          0,   187,     0,     0,     0,     0,   185,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   267,   268,     0, 
        273,   281,   280,   182,   270,     0,     0,     0,   213,     0, 
        295,     0,   290,   293,     0,   297,     0,     0,    25,     0, 
         34,    36,    37,     0,     0,     0,    42,     0,     0,     0, 
          0,     0,     0,     0,     0,   181,     0,   209,     0,     0, 
          0,   207,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   199,     0, 
          0,   190,     0,   272,   282,   284,   283,   278,     0,   170, 
          0,     0,   226,   224,   291,    21,     0,     0,     0,     0, 
          0,     0,     0,    23,     0,    35,     0,   184,     0,     0, 
          0,   202,   210,     0,     0,     0,   179,   176,     0,     0, 
          0,     0,     0,     0,     0,     0,    95,     0,     0,   276, 
        108,     0,   126,   112,   116,   118,   114,   122,   124,   110, 
        120,     0,     0,     0,     0,   106,     0,    63,     0,     0, 
          0,     0,     0,     0,    35,    45,     0,    43,     0,     0, 
          0,     0,     0,     0,     0,     0,   208,     0,   186,     0, 
        274,     0,     0,     0,   128,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,    38,   132,   107,     0, 
          0,    61,    59,    98,    99,   100,   101,   102,   103,     0, 
          0,     0,     0,     0,     0,     0,     0,   174,   175,   188, 
          0,   200,     0,   279,     0,     0,     0,     0,     0,   133, 
          0,     0,     0,     0,   150,     0,     0,   123,   125,     0, 
          0,     0,     0,   137,     0,     0,    89,     0,     0,     0, 
          0,     0,    65,     0,     0,    48,     0,     0,    53,    33, 
          0,   173,   204,     0,   177,   277,   109,     0,     0,     0, 
          0,   127,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    50,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    52,    55,     0,    49,    54,    47, 
        201,     0,     0,   134,     0,     0,     0,   151,     0,     0, 
          0,     0,     0,     0,   138,     0,     0,     0,     0,    90, 
         92,    91,     0,     0,     0,     0,     0,   159,   165,   129, 
          0,   156,   157,     0,     0,   117,     0,   141,     0,     0, 
          0,     0,    93,    97,     0,    81,     0,    64,     0,     0, 
          0,    56,     0,     0,   155,   164,   158,   130,     0,     0, 
          0,   153,   111,   146,   148,     0,     0,   144,   131,     0, 
          0,    62,    60,     0,     0,     0,     0,   119,   115,     0, 
          0,     0,   121,   145,    83,    82,    66,   161,     0,     0, 
          0,   154,     0,     0,     0,     0,   166,   113,     0,   149, 
        162,     0,   147,     0,     0,   160, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    22,   123,     4,     7,     8,    33,    12,    65, 
        220,    95,    50,    81,   103,   150,    52,   225,    51,    83, 
        105,   356,   221,   222,   223,   343,   226,   227,   302,   303, 
        344,   281,   403,   354,   448,   125,   437,   449,   481,   442, 
        509,   538,   441,   438,   391,   400,   484,    35,    24,    36, 
         47,    77,    78,   439,   440,   345,   346,   257,   374,   384, 
        426,   553,   378,   126,   381,   468,   379,   380,   385,   556, 
        382,   383,   377,   417,   520,   419,   433,   420,   434,   557, 
        558,   571,   572,   570,   521,   545,   522,   523,   543,   579, 
        544,   127,   230,    97,    98,   128,   319,   204,   164,   159, 
        243,   234,   129,   130,   131,   132,   133,   240,   366,   454, 
        241,   242,   134,    87,   135,   136,   294,   205,   206,   283, 
        207,   289,   373,   329,    99,   100,    25,    26, 
    );
    protected static $yySindex = array(         -284,
          0,     0,  -277,   126,     0,   911,  -277,     0,    44,    48, 
        -15,   188,    21,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   237,     0,  1049,     0,     0,   126,   126,     0, 
          0,     0,   -73,    78,    65,     0,     0,     0,     0,     0, 
          0,     0,   158,    98,   210,     0,   235,    21,  1049,   126, 
        126,   126,    -8,   126,   126,   229,     0,     0,   238,    -5, 
         -3,    -5,     0,   282,   277,     0,     0,     0,   287,     0, 
          0,     0,     0,     0,   364,   403,   268,     0,    74,   126, 
        134,   126,   328,   134,    -8,     0,  4594,   451,   451,     0, 
         18,     0,   154,   408,     0,   381,     0,     0,    12,     0, 
          0,   126,   354,   441,     0,     0,   358,     0,     0,  4785, 
       4785,  4785,  4785,  4785,  4785,     0,  4785,   463,   448,     0, 
       4785,   372,   102,  3214,   -42,     0,   469,     0,     0,     0, 
          0,     0,     0,   425,   475,     0,     0,     0,     0,   287, 
          0,   126,   -63,   430,    74,     0,     0,     0,   126,   842, 
        286,   303,  -109,  -109,  -111,  -109,  -109,  -109,   -63,     0, 
       4785,     0,  4785,   -42,  2075,   -79,     0,  4785,  4785,  4785, 
       4785,  4785,  4785,  4785,  4785,  4785,  4785,  4785,  4785,  4785, 
       4785,  4785,  4785,  4630,  4717,  4524,  4785,  4533,  4785,  4785, 
       4785,  4785,  4785,  4785,  4785,   126,  4785,     0,     0,   -63, 
          0,     0,     0,     0,     0,   -42,    24,  4785,     0,   129, 
          0,   -14,     0,     0,   855,     0,   427,   300,     0,    37, 
          0,     0,     0,     0,   422,   156,     0,   528,   381,   -42, 
        450,   452,  3214,  4785,  3214,     0,   -42,     0,   -80,   317, 
        536,     0,    41,  3311,    -2,    -2,    -2,    -2,    -2,    -2, 
         -2,    -2,    -2,    -2,    -2,  3214,   525,  3338,  1703,    20, 
       4785,    46,  4785,    46,  4785,  4785,   -29,   -29,  4785,  4785, 
        -29,   -29,   151,   151,  -117,  -117,  -117,  -111,     0,  -109, 
         88,     0,  4785,     0,     0,     0,     0,     0,   544,     0, 
        527,   448,     0,     0,     0,     0,   616,   327,   326,   329, 
         39,   467,   546,     0,   286,     0,  4785,     0,  4785,   -48, 
        551,     0,     0,  4726,   -79,   554,     0,     0,   -42,  4785, 
         -2,    -2,   -29,   -29,   -29,   -29,     0,   502,  4785,     0, 
          0,    26,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   564,   486,  2265,   616,     0,   552,     0,   572,   574, 
        749,   533,   555,   496,     0,     0,  4785,     0,  1226,   585, 
        503,   508,   -42,   616,  3214,   509,     0,  4785,     0,   220, 
          0,   594,  4785,  4785,     0,   296,  4785,   606,   607,   417, 
        610,   598,   599,   613,   620,   331,     0,     0,     0,   451, 
         10,     0,     0,     0,     0,     0,     0,     0,     0,   645, 
         10,  4785,   631,   409,  1145,  2460,   467,     0,     0,     0, 
        567,     0,   652,     0,   654,   637,   616,   638,   461,     0, 
       2487,  4785,  4785,   616,     0,   337,   362,     0,     0,  4785, 
       4785,   649,   470,     0,   647,   671,     0,   677,   675,   -27, 
         94,    94,     0,   627,  3214,     0,    76,   -99,     0,     0, 
        467,     0,     0,   -42,     0,     0,     0,   609,  4785,   296, 
        617,     0,   682,  2527,   622,   709,   708,   389,  2595,  2650, 
       4785,   331,   632,     0,   501,   435,    10,   426,   555,    10, 
        721,   675,   723,    10,     0,     0,   616,     0,     0,     0, 
          0,    51,  3214,     0,   616,  4785,   417,     0,  4785,   428, 
       4785,   417,   648,  3214,     0,   616,   555,   126,   -52,     0, 
          0,     0,   675,   435,   435,   724,   651,     0,     0,     0, 
         51,     0,     0,   663,   711,     0,  2693,     0,  2760,   401, 
         82,   665,     0,     0,  4785,     0,   616,     0,   -52,   -52, 
        435,     0,   733,   670,     0,     0,     0,     0,  4785,   715, 
        417,     0,     0,     0,     0,   672,    82,     0,     0,  2914, 
        686,     0,     0,   -52,   126,   616,   754,     0,     0,   417, 
       4785,   744,     0,     0,     0,     0,     0,     0,   -51,   688, 
        417,     0,  3079,   616,   126,   773,     0,     0,   616,     0, 
          0,   693,     0,   616,   690,     0, 
    );
    protected static $yyRindex= array(          444,
          0,     0,  1471,     0,     0,   269,  1862,     0,   763,     0, 
          0,   558,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   224,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    71,     0,     0,    89,     0,   437,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   801,  -102, 
        705,  -102,     0,   770,     0,     0,     0,     0,   789,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        714,     0,     0,   714,     0,     0,   738,     0,     0,     0, 
          0,     0,     0,     0,     0,   132,     0,     0,     0,     0, 
          0,     0,     0,   -39,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  1253,  1638,     0, 
          0,     0,     0,   768,  1402,     0,    66,     0,     0,     0, 
          0,     0,     0,     0,    38,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   108, 
        726,   954,  1815,  1842,  3148,  1869,  1939,  1967,     0,     0, 
          0,     0,     0,  1402,     0,   577,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   782, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,  1430,     0,   791,     0,    59, 
          0,     0,     0,     0,   108,     0,  1363,     0,     0,     0, 
          0,     0,     0,    83,     0,   728,     0,   758,     0,  1402, 
        767,   775,    85,   827,    96,     0,  1402,     0,     0,     0, 
        614,     0,     0,    61,    28,    55,   215,   500,   559,   596, 
        629,   642,   650,   692,   740,   395,     0,  4121,  2007,  4194, 
          0,  4282,     0,  4298,     0,     0,  3710,  3804,     0,     0, 
       3861,  3898,  3596,  3640,  3380,  3408,  3477,  3175,     0,  2036, 
       1376,     0,   780,     0,     0,     0,     0,     0,   991,     0, 
          0,     0,     0,     0,     0,     0,   757,     0,    35,     0, 
          0,   -21,     0,     0,     0,     0,   827,     0,   760,     0, 
          0,     0,     0,     0,     0,  1186,     0,     0,  1402,     0, 
        811,   879,  4026,  4042,  4100,  4137,     0,     0,   827,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,  -119,     0,     0,     0,     0,   751, 
          0,     0,   824,     0,     0,     0,     0,     0,   175,     0, 
          0,     0,  1402,   757,   765,     0,     0,   827,     0,  4326, 
          0,     0,   827,   832,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        856,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   108,     0,  1213,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   757,   489,     0,     0, 
          0,   837,     0,   757,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   857,     0, 
        858,   858,     0,     0,   424,     0,     0,     0,     0,     0, 
        -21,     0,     0,  1402,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   537,     0,     0,     0, 
          0,     0,     0,     0,     0,     9,     0,     0,   -12,     0, 
          0,   859,     0,   856,     0,     0,   757,     0,     0,     0, 
          0,     0,   490,     0,   757,   837,     0,     0,     0,     0, 
          0,     0,     0,   504,     0,   757,   -12,     0,     0,     0, 
          0,     0,   862,     9,     9,     0,     0,     0,     0,     0, 
        236,     0,     0,     0,     0,     0,     0,     0,     0,   302, 
        781,     0,     0,     0,     0,     0,   757,     0,     0,     0, 
          9,     0,     0,     0,     0,     0,     0,     0,   827,     0, 
          0,     0,     0,     0,     0,     0,   783,     0,     0,     0, 
          0,     0,     0,     0,     0,   757,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -86,     0,     0,     0,     0,   -86,     0, 
          0,     0,     0,   757,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,     0,   898,     0,     0,   822, 
        904,   -49,     0,   850,   829,    27,     0,     0,     0,     0, 
        -97,  -291,     0,     0,     0,  2536,     0,   612,     0,     0, 
         56,    -9,  -305,     0,     0,   -34,  -359,   471,   476,     0, 
       -184,  -156,     0,   438,     0,     0,     0,     0,   881,   880, 
          0,     0,   841,   -89,   734,     0,   983,  -171,     0,     0, 
        370,     0,     0,   602,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   479,   472,     0, 
        378,     0,     0,     0,     0,     0,   420,   421,     0,     0, 
          0,     0,     0,   784,   786,   639,     0,   -47,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   633,     0,     0,     0,   737,     0,   746,     0,     0, 
          0,     0,     0,     0,     0,   805,     0,   928, 
    );
    protected static $yyTable = array(11,
         60,    61,    62,   203,   147,   105,   536,   194,   197,   109, 
        144,    94,   192,   190,   197,   191,   197,   193,     1,   296, 
         26,    76,    32,    41,    42,   488,     5,    94,    57,    46, 
        101,    57,   104,    63,   194,   183,   290,    32,   104,   192, 
        190,   444,   191,    30,   193,    59,    59,    59,   201,    66, 
         67,   216,   104,   138,   139,   145,   194,   186,   170,   188, 
        180,   192,   190,   288,   191,   376,   193,    96,   198,    96, 
        537,   198,   585,   146,    59,    59,   144,    59,   295,   186, 
         57,   188,   194,   296,    34,   198,   198,   192,   190,    28, 
        191,   182,   193,    29,    17,   229,   197,    59,   229,   104, 
         94,   197,   225,    32,   197,   186,   168,   188,    48,   228, 
         17,   328,   229,   229,    17,   452,   236,   510,   197,   197, 
        198,   181,    46,   197,   168,    17,    44,    94,   227,   144, 
        222,    96,    71,   212,   486,    96,    93,   211,    59,   228, 
         59,    44,   124,    28,    59,   197,   279,   229,   375,   229, 
        327,   225,   198,   197,    59,    54,   239,    49,   168,   490, 
        447,    59,   222,    17,    94,   153,   154,   155,   156,   157, 
        158,   197,   160,   512,   215,   294,   165,   227,   144,   229, 
          9,    71,   308,   225,    94,   197,    43,   194,   228,   312, 
        168,    59,   192,   294,   196,    59,     9,   193,   487,   305, 
        196,   533,   416,    53,   535,    44,    10,    44,    26,   227, 
        301,   291,   292,   200,   306,    59,   233,   296,   235,   200, 
        228,   200,    10,   244,   245,   246,   247,   248,   249,   250, 
        251,   252,   253,   254,   255,   256,   258,   259,   260,   262, 
        264,   267,   268,   271,   272,   273,   274,   275,   276,   277, 
        278,    64,   280,   105,   105,   230,   194,   183,   230,   313, 
        238,   192,   190,   256,   191,    96,   193,    55,   163,     9, 
        163,   369,   230,   230,    56,   163,   197,   140,   163,   186, 
        163,   188,   196,   285,   198,   199,   104,   104,   586,   124, 
        198,   199,   198,   199,    17,    10,   299,    79,   350,    39, 
        316,   200,   478,   195,    80,   239,    82,   230,    92,   196, 
         59,    91,   479,   182,   299,   410,   321,    75,   322,    68, 
        323,   324,    10,   286,   325,   326,   163,    85,   200,   539, 
        540,   196,   359,     9,   152,    86,   152,    44,   256,   230, 
        317,   152,   162,   181,   152,   197,   152,    88,    28,   436, 
        200,   482,   482,     9,    17,   435,   564,   196,   351,    10, 
        163,   163,   124,    10,   124,   348,    17,   298,   300,   365, 
        352,    28,   198,   199,    17,   370,   200,   202,   353,    10, 
        318,   405,   562,   563,   124,     9,    59,   287,   291,   292, 
        513,   195,   152,   298,   518,   519,    59,   189,   187,   198, 
        199,   171,   172,   173,   174,   176,   491,   577,   184,   185, 
        534,    10,   406,   175,   178,   177,   179,    45,   195,   189, 
        187,   198,   199,   124,    89,   480,   152,   152,   124,   256, 
        184,   185,   421,   436,   298,   172,    59,    59,   172,   298, 
        195,   198,   198,    90,   102,   189,   187,   198,   199,   112, 
        106,   122,   172,   172,   554,   555,   121,   445,   104,   110, 
        298,   111,   196,   142,    58,   143,   195,    58,   229,   229, 
         31,   144,    59,    32,   197,    59,   148,   124,   464,    59, 
        151,   200,    58,   299,   149,   469,   470,   172,    69,    70, 
         71,    72,    73,    74,   166,   163,   163,   163,   163,   163, 
        163,   461,   162,    59,   460,   163,   298,    68,    28,   299, 
        473,   167,   208,   472,   493,   578,    58,   209,   210,   172, 
        161,   163,   213,   299,   299,   299,   504,   298,    75,   135, 
        136,   196,   135,   136,     2,   591,    37,    38,    39,   424, 
        231,    68,   113,   231,   139,   224,   304,   139,   163,   297, 
        200,   124,   198,   199,   527,   299,   529,   231,   231,   298, 
         59,   152,   152,   152,   152,   152,   152,   307,   298,   298, 
        298,   195,   309,   314,   310,   163,   163,   163,   163,   315, 
         59,   163,   320,   330,   161,   357,   347,   152,   349,   355, 
        560,   363,   231,   368,   371,   163,   163,   163,   163,   232, 
        163,   163,   232,   386,   124,   163,   163,   163,   163,   163, 
        387,   392,   390,   393,   152,   402,   232,   232,   404,   189, 
        187,   198,   199,   401,   231,   407,   583,   408,   230,   230, 
        184,   185,   409,   412,   414,   418,   233,   163,   163,   233, 
        195,   152,   152,   152,   152,   422,   423,   152,   112,   427, 
        122,   232,   430,   233,   233,   121,   428,   429,   110,   431, 
        111,   152,   152,   152,   152,   163,   152,   152,   447,   235, 
        432,   152,   235,   152,   152,   152,   152,    70,    71,    72, 
         73,    74,   234,   232,   443,   234,   235,   235,   233,   446, 
        236,   453,   455,   236,   456,   457,   298,   466,   459,   234, 
        234,   467,    10,   152,   152,   474,    68,   236,   236,   471, 
        137,    70,    71,    72,    73,    74,   475,   476,   477,   485, 
        233,   235,   298,     2,     2,     2,     2,     2,     2,   117, 
          2,   152,   237,   492,   234,   237,   298,   298,   298,   495, 
        496,   113,   236,     2,     2,     2,   498,     2,   499,   237, 
        237,   500,   501,   235,   506,   508,   120,   331,   332,   333, 
        507,   514,   116,   515,   541,   511,   234,   528,   298,   549, 
        531,   552,   565,   568,   236,   542,   334,   335,   336,   337, 
        238,   338,   339,   238,   237,   398,   340,   548,   341,   559, 
        396,   394,   566,   395,   581,   397,   573,   238,   238,    17, 
         17,   584,    17,    17,    17,    17,    17,    17,   169,    17, 
        576,   169,   587,   592,   596,   594,   237,    11,   114,   115, 
         17,    17,    17,    17,    17,    17,   169,    30,    14,   211, 
        167,   171,   238,   205,   171,   311,    28,   288,   288,   171, 
        288,   288,   288,   288,   288,   288,   342,   288,   285,   171, 
         41,   247,    40,    17,   247,    17,    17,   286,   288,   288, 
        169,   288,   288,   288,   238,   287,   526,   167,   247,   247, 
        206,   530,   171,    51,   399,   152,    70,    71,    72,    73, 
         74,   104,    57,   171,   167,    17,    17,    17,    17,   203, 
        171,   288,   169,   288,   288,   167,    87,    88,    84,    86, 
        140,    10,    85,   247,    27,   142,   108,   143,   360,    23, 
        361,    84,   107,   231,   231,   171,   358,   483,   489,   248, 
        569,   516,   248,   288,   288,   288,   288,    57,   117,    58, 
        372,   141,    13,   282,   574,   247,   248,   248,   494,   582, 
        546,   547,   231,   505,   232,    13,   293,   367,   362,   214, 
        588,   284,    40,     0,     0,   120,   331,   332,   333,     0, 
          0,   116,     0,     0,     0,     0,   219,     0,     0,   413, 
          0,   248,   232,   232,   415,   334,   335,   336,   337,   296, 
        338,   339,     0,     0,     0,   340,     0,   341,     0,     0, 
        211,   211,     0,     0,   211,   211,   211,   211,   211,     0, 
        211,    13,     0,   248,     0,     0,     0,     0,     0,   233, 
        233,   211,   211,   211,   211,   211,   211,   114,   115,    17, 
          0,     0,    17,   463,     0,     0,     0,   275,   275,     0, 
          0,   275,   275,   275,   275,   275,   275,   275,     0,     0, 
          0,     0,   235,   235,   211,   342,   211,   211,   275,   275, 
        275,   275,   275,   275,     0,   234,   234,   288,     0,     0, 
        288,     0,     0,   236,   236,     0,     0,     0,     0,     0, 
          0,     0,    17,    17,    17,     0,     0,   211,   211,   211, 
          0,   275,    17,   275,   275,     0,     0,     0,     0,     0, 
          0,     0,    17,    17,    17,     0,     0,   525,     0,     0, 
          0,     0,    17,     0,     0,   237,   237,     0,     0,     0, 
        288,   288,   288,     0,   275,   275,   275,     0,     0,     0, 
        288,    14,    15,    16,   217,    18,    19,     0,    20,     0, 
        288,   288,   288,     0,    14,    15,    16,   217,    18,    19, 
        288,    20,     0,     0,    21,     0,     0,     0,     0,     0, 
        567,     0,     0,   238,   238,     0,     0,    21,     0,     0, 
          0,     0,    17,    17,    17,    17,    17,    17,    17,    17, 
         17,     0,    17,    17,    17,   218,    17,    17,    17,    17, 
         17,    17,     0,    17,     0,     0,     0,     0,   218,     0, 
         14,    15,    16,    17,    18,    19,     0,    20,     0,     0, 
        288,   288,   288,   288,   288,   288,   288,   288,   288,     0, 
          0,   288,   288,    21,   288,   288,   288,   288,   288,   288, 
          0,   288,   178,   178,   247,   247,   178,   178,   178,   178, 
        178,   178,   178,     0,     0,    13,     0,     0,     0,     0, 
          0,     0,     0,   178,   178,   178,   178,   178,   178,    32, 
         32,     0,     0,    32,    32,    32,    32,    32,    32,    32, 
          0,     0,     0,     0,     0,   211,     0,     0,     0,   450, 
         32,    32,    32,    32,    32,    32,   178,     0,   178,   178, 
          0,     0,     0,     0,   211,     0,     0,     0,     0,   211, 
        211,     0,   248,   248,   211,   211,   211,   211,     0,   211, 
          0,     0,   275,    32,     0,    32,    32,     0,     0,   178, 
        178,   178,   211,   211,   211,   211,    13,     0,     0,     0, 
          0,   275,     0,     0,     0,     0,     0,   389,    14,    15, 
         16,    17,    18,    19,     0,    20,    32,    32,    32,     0, 
          0,     0,     0,   211,     0,   211,   211,     0,     0,     0, 
          0,    21,     0,   211,   211,   211,   211,   211,   211,   211, 
        211,   211,   425,    17,   211,   211,     0,   211,   211,   211, 
        211,   211,   211,   211,   211,     0,   211,     0,   211,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        275,   275,   275,   275,   275,   275,   275,   275,   275,     0, 
          0,   275,   275,     0,   275,   275,   275,   275,   275,   275, 
        275,   275,    94,    94,     0,     0,    94,    94,    94,    94, 
         94,     0,    94,     0,    14,    15,    16,   217,    18,    19, 
          0,    20,     0,    94,    94,    94,    94,    94,   269,   269, 
          0,     0,   269,   269,   269,   269,   269,    21,   269,     0, 
          0,     0,     0,   306,     0,     0,     0,     0,     0,   269, 
        269,   269,   269,   269,   269,     0,   271,   271,    94,    94, 
        271,   271,   271,   271,   271,     0,   271,     0,   218,   425, 
          0,     0,     0,     0,   425,     0,     0,   271,   271,   271, 
        271,   271,   271,     0,   269,   269,     0,   178,     0,    94, 
         94,    94,     0,     0,     0,    14,    15,    16,   217,    18, 
         19,     0,    20,     0,     0,     0,   178,     0,     0,     0, 
          0,     0,   271,   271,    32,   269,   269,   269,    21,     0, 
          0,     0,     0,   425,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    32,     0,     0,     0,     0,     0,     0, 
          0,     0,   425,   271,   271,   271,     0,     0,     0,   218, 
          0,     5,     0,   425,   211,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   211,     0,   178,   178,   178,   178,   178, 
        178,   178,   178,   178,     0,     0,   178,   178,     0,   178, 
        178,   178,   178,   178,   178,   178,   178,     0,     0,     0, 
          0,     0,    32,    32,    32,    32,    32,    32,    32,    32, 
         32,     0,   306,    32,    32,     0,    32,    32,    32,    32, 
         32,    32,    32,    32,     0,     0,     0,     0,     0,     0, 
          0,     0,   306,   306,   306,   306,   306,   306,   306,   306, 
          0,     0,   211,   211,   211,   211,   211,   211,   211,   211, 
        211,     0,    17,   211,   211,   306,   211,   211,   211,   211, 
        211,   211,   211,   211,   218,   218,     0,     0,     0,   218, 
        218,   218,   218,   218,   218,     0,     0,    94,     0,     0, 
          0,     0,     0,     0,   306,     0,     0,   218,   218,   218, 
        218,     0,     0,     0,     0,    94,    94,     0,     0,     0, 
          0,     0,     0,   269,     0,    94,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   218,     0, 
        218,   218,   269,     0,     0,     0,     0,     0,     0,   194, 
        183,   271,     0,     0,   192,   190,     0,   191,     0,   193, 
          5,     5,     5,     5,     5,     5,     0,     5,     0,     0, 
        271,   218,   186,   218,   188,     0,     0,     0,     0,     0, 
          5,     5,     5,     5,     0,    94,    94,    94,    94,    94, 
         94,    94,    94,    94,     0,     0,    94,    94,     0,    94, 
         94,    94,    94,    94,    94,     0,    94,     0,     0,     0, 
          0,   269,   269,   269,   269,   269,   269,   269,   269,   269, 
          0,     0,   269,   269,     0,   269,   269,   269,   269,   269, 
        269,     0,   269,     0,     0,     0,     0,     0,   197,   271, 
        271,   271,   271,   271,   271,   271,   271,   271,     0,     0, 
        271,   271,     0,   271,   271,   271,   271,   271,   271,     0, 
        271,   263,   263,     0,     0,   263,   263,   263,   263,   263, 
          0,   263,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   263,   263,   263,   263,   263,   263,   264,   264, 
          0,     0,   264,   264,   264,   264,   264,     0,   264,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   264, 
        264,   264,   264,   264,   264,   262,   262,   263,   263,   262, 
        262,   262,   262,   262,     0,   262,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   262,   262,   262,   262, 
        262,   262,     0,     0,   264,   264,     0,     0,   263,   263, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   218, 
          0,     0,     6,     0,     0,     0,     0,     0,     0,     0, 
          0,   262,   262,     0,     0,   264,   264,     0,   218,     0, 
          0,     0,     0,     0,     0,   265,   265,     0,     0,   265, 
        265,   265,   265,   265,     0,   265,     0,     0,     0,     0, 
          0,     0,   262,   262,     0,     0,   265,   265,   265,   265, 
        265,   265,     0,   266,   266,     0,     0,   266,   266,   266, 
        266,   266,     0,   266,   196,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   266,   266,   266,   266,   266,   266, 
          0,   265,   265,   200,     0,     0,     0,   218,   218,   218, 
        218,   218,   218,   218,   218,   218,     0,   257,   218,   218, 
        257,   218,   218,   218,   218,   218,   218,   218,   218,   266, 
        266,     0,   265,   265,   257,   257,     0,   257,     0,   257, 
          0,     0,   254,   254,     0,     0,   254,   254,   254,   254, 
        254,     0,   254,     0,     0,     0,     0,     0,     0,     0, 
        266,   266,     0,   254,   254,   254,   254,   254,   254,   257, 
        257,     0,   189,   187,   198,   199,     0,     0,     0,     0, 
          0,   194,   183,   184,   185,   237,   192,   190,     0,   191, 
          0,   193,     0,   195,     0,     0,   263,     0,   254,   254, 
        257,   257,     0,     0,   186,   170,   188,   180,     0,     0, 
          0,     6,     6,     6,     6,     6,     6,     0,     6,     0, 
          0,     0,     0,   264,     0,     0,     0,     0,     0,   254, 
        254,     6,     6,     6,     6,     0,     0,     0,   182,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        262,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   181,     0, 
        197,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   263,   263,     0,     0,   263,   263, 
        263,   263,   263,     0,     0,   263,   263,     0,   263,   263, 
        263,   263,   263,   263,     0,   263,     0,     0,     0,     0, 
          0,   264,   264,     0,     0,   264,   264,   264,   264,   264, 
        265,     0,   264,   264,     0,   264,   264,   264,   264,   264, 
        264,     0,   264,     0,     0,     0,     0,     0,   262,   262, 
          0,     0,   262,   262,   262,   262,   262,     0,   266,   262, 
        262,     0,   262,   262,   262,   262,   262,   262,     0,   262, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   194,   183,     0,     0,     0,   192,   190,     0,   191, 
          0,   193,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   388,   186,   170,   188,   180,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   265,   265, 
          0,     0,   265,   265,   265,   265,   265,   254,     0,   265, 
        265,     0,   265,   265,   265,   265,   265,   265,   182,   265, 
          0,     0,     0,     0,     0,     0,   266,   266,     0,     0, 
        266,   266,   266,   266,   266,     0,     0,   266,   266,     0, 
        266,   266,   266,   266,   266,   266,   196,   266,   181,     0, 
        197,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   200,     0,     0,     0,     0, 
        257,   257,   257,   257,   257,     0,     0,     0,     0,     0, 
        257,   257,   257,   257,   257,   257,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   254,   254,     0,     0,   254, 
        254,   254,   254,   254,     0,     0,   254,   254,     0,   254, 
        254,   254,   254,   254,   254,     0,   254,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   189,   187,   198,   199,   171,   172, 
        173,   174,   176,     0,     0,   184,   185,     0,   168,   169, 
        175,   178,   177,   179,     0,   195,   194,   183,     0,     0, 
        451,   192,   190,     0,   191,     0,   193,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   186, 
        170,   188,   180,   194,   183,     0,     0,     0,   192,   190, 
          0,   191,     0,   193,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   462,   186,   170,   188,   180, 
          0,     0,     0,   182,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   194,   183,     0,     0,   497,   192,   190, 
          0,   191,     0,   193,     0,     0,   196,     0,     0,     0, 
        182,     0,     0,   181,     0,   197,   186,   170,   188,   180, 
          0,     0,     0,     0,     0,   200,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        181,     0,   197,     0,     0,     0,     0,     0,     0,     0, 
        182,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   194,   183,     0,     0,   502,   192,   190,     0,   191, 
          0,   193,     0,     0,     0,     0,     0,     0,     0,     0, 
        181,     0,   197,     0,   186,   170,   188,   180,     0,     0, 
          0,     0,     0,     0,   189,   187,   198,   199,   171,   172, 
        173,   174,   176,     0,     0,   184,   185,     0,   168,   169, 
        175,   178,   177,   179,     0,   195,   194,   183,   182,     0, 
        503,   192,   190,     0,   191,     0,   193,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   186, 
        170,   188,   180,     0,     0,     0,     0,     0,   181,     0, 
        197,     0,     0,     0,     0,     0,     0,     0,     0,   194, 
        183,     0,     0,   550,   192,   190,     0,   191,     0,   193, 
          0,     0,     0,   182,     0,     0,     0,     0,     0,     0, 
          0,     0,   186,   170,   188,   180,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   196,     0,   181,     0,   197,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   182,     0,     0,     0, 
        200,     0,     0,     0,     0,     0,   194,   183,   196,     0, 
        551,   192,   190,     0,   191,     0,   193,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   181,   200,   197,   186, 
        170,   188,   180,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   196,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   182,     0,     0,     0,   200,     0,   189, 
        187,   198,   199,   171,   172,   173,   174,   176,     0,     0, 
        184,   185,     0,   168,   169,   175,   178,   177,   179,     0, 
        195,     0,     0,   181,     0,   197,   189,   187,   198,   199, 
        171,   172,   173,   174,   176,     0,     0,   184,   185,   411, 
        168,   169,   175,   178,   177,   179,   196,   195,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   200,   189,   187,   198,   199, 
        171,   172,   173,   174,   176,     0,     0,   184,   185,     0, 
        168,   169,   175,   178,   177,   179,     0,   195,     0,     0, 
        194,   183,   458,     0,     0,   192,   190,     0,   191,   465, 
        193,   196,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   575,   186,   170,   188,   180,     0,     0,     0, 
        200,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   189,   187,   198,   199,   171,   172, 
        173,   174,   176,     0,   196,   184,   185,   182,   168,   169, 
        175,   178,   177,   179,     0,   195,     0,     0,     0,     0, 
          0,     0,   517,   200,     0,     0,     0,     0,     0,     0, 
        524,     0,     0,     0,     0,     0,     0,   181,     0,   197, 
          0,   532,     0,     0,     0,     0,     0,     0,     0,   189, 
        187,   198,   199,   171,   172,   173,   174,   176,     0,     0, 
        184,   185,     0,   168,   169,   175,   178,   177,   179,     0, 
        195,   196,   561,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        200,     0,   189,   187,   198,   199,   171,   172,   173,   174, 
        176,   580,     0,   184,   185,     0,   168,   169,   175,   178, 
        177,   179,     0,   195,     0,   194,   183,     0,     0,   590, 
        192,   190,     0,   191,   593,   193,     0,     0,     0,   595, 
          0,     0,     0,     0,     0,     0,   589,     0,   186,   170, 
        188,   180,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   189, 
        187,   198,   199,   171,   172,   173,   174,   176,     0,     0, 
        184,   185,   182,   168,   169,   175,   178,   177,   179,     0, 
        195,     0,     0,     0,   261,   261,     0,     0,   261,   261, 
        261,   261,   261,     0,   261,     0,     0,     0,     0,     0, 
          0,     0,   181,     0,   197,   261,   261,   261,   261,   261, 
        261,   260,   260,     0,     0,   260,   260,   260,   260,   260, 
          0,   260,     0,     0,     0,   196,     0,     0,     0,     0, 
          0,     0,   260,   260,   260,   260,   260,   260,     0,     0, 
        261,   261,     0,     0,   200,     0,     0,     0,     0,     0, 
        194,   183,     0,     0,     0,   192,   190,     0,   191,     0, 
        193,     0,     0,     0,     0,     0,     0,   260,   260,     0, 
          0,   261,   261,   186,   170,   188,   180,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   260,   260, 
          0,     0,     0,     0,     0,     0,     0,   182,     0,     0, 
          0,     0,     0,   189,   187,   198,   199,   171,   172,   173, 
        174,   176,     0,     0,   184,   185,     0,   168,   169,   175, 
        178,   177,   179,     0,   195,     0,     0,   181,     0,   197, 
          0,     0,     0,     0,     0,     0,     0,   194,   183,     0, 
          0,     0,   192,   190,     0,   191,     0,   193,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        186,   170,   188,   180,   194,   183,     0,     0,     0,   192, 
        190,     0,   191,     0,   193,     0,     0,     0,     0,     0, 
        196,     0,     0,     0,     0,     0,     0,   186,     0,   188, 
          0,     0,     0,     0,   182,     0,     0,     0,     0,   200, 
          0,     0,     0,     0,     0,     0,   251,   251,     0,     0, 
        251,   251,   251,   251,   251,     0,   251,     0,     0,     0, 
          0,   182,     0,     0,   181,     0,   197,   251,   251,   251, 
        251,   251,   251,     0,   252,   252,     0,     0,   252,   252, 
        252,   252,   252,     0,   252,     0,     0,     0,     0,     0, 
          0,     0,     0,   197,     0,   252,   252,   252,   252,   252, 
        252,     0,   251,   251,     0,     0,     0,     0,   189,   187, 
        198,   199,   171,   172,   173,   174,   176,     0,     0,   184, 
        185,     0,   168,   169,   175,   178,   177,   179,     0,   195, 
        252,   252,     0,   251,   251,     0,     0,     0,     0,     0, 
          0,     0,     0,   253,   253,     0,     0,   253,   253,   253, 
        253,   253,     0,   253,     0,   196,     0,     0,     0,     0, 
          0,   252,   252,     0,   253,   253,   253,   253,   253,   253, 
          0,     0,     0,     0,   200,     0,     0,   261,   261,     0, 
          0,   261,   261,   261,   261,   261,     0,     0,   261,   261, 
          0,   261,   261,   261,   261,   261,   261,     0,   261,   253, 
        253,     0,     0,     0,   260,   260,     0,     0,   260,   260, 
        260,   260,   260,     0,     0,   260,   260,     0,   260,   260, 
        260,   260,   260,   260,     0,   260,     0,     0,     0,     0, 
        253,   253,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   189,   187,   198,   199,   171,   172,   173, 
        174,   176,   196,     0,   184,   185,     0,   168,   169,   175, 
        178,   177,   179,   249,   195,     0,   249,     0,   249,   249, 
        249,   200,     0,     0,     0,     0,     0,     0,     0,   196, 
          0,     0,     0,   249,   249,   249,   249,   249,   249,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   200,     0, 
          0,     0,     0,     0,     0,     0,     0,   250,     0,     0, 
        250,     0,   250,   250,   250,     0,     0,     0,   249,   249, 
          0,     0,     0,     0,     0,     0,     0,   250,   250,   250, 
        250,   250,   250,     0,     0,     0,     0,     0,     0,     0, 
        189,   187,   198,   199,   171,   172,   173,   174,   176,   249, 
        249,   184,   185,     0,     0,   169,   175,   178,   177,   179, 
          0,   195,   250,   250,     0,     0,     0,   189,   187,   198, 
        199,     0,     0,     0,     0,     0,     0,   241,   184,   185, 
        241,     0,     0,   241,     0,     0,     0,     0,   195,     0, 
          0,     0,     0,   250,   250,     0,     0,   241,   241,     0, 
        241,     0,   241,     0,     0,     0,     0,     0,     0,   251, 
        251,     0,     0,   251,   251,   251,   251,   251,     0,     0, 
        251,   251,     0,   251,   251,   251,   251,   251,   251,     0, 
          0,     0,   241,   241,     0,     0,     0,   252,   252,     0, 
          0,   252,   252,   252,   252,   252,     0,     0,   252,   252, 
          0,   252,   252,   252,   252,   252,   252,     0,     0,     0, 
          0,     0,     0,   241,   241,     0,     0,     0,     0,     0, 
          0,   243,     0,     0,   243,     0,     0,   243,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   243,   243,     0,   243,     0,   243,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   253,   253,     0,     0, 
        253,   253,   253,   253,   253,     0,     0,   253,   253,     0, 
        253,   253,   253,   253,   253,   253,   243,   243,   242,     0, 
          0,   242,     0,     0,   242,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   242,   242, 
          0,   242,     0,   242,     0,     0,     0,   243,   243,     0, 
          0,     0,     0,     0,     0,   244,     0,     0,   244,     0, 
          0,   244,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   242,   242,   244,   244,     0,   244,     0, 
        244,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   242,   242,     0,     0,     0,     0, 
        244,   244,     0,     0,     0,   249,   249,     0,     0,   249, 
        249,   249,   249,   249,     0,     0,   249,   249,     0,   249, 
        249,   249,   249,   249,   249,     0,     0,     0,     0,     0, 
          0,   244,   244,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   250, 
        250,     0,     0,   250,   250,   250,   250,   250,     0,     0, 
        250,   250,     0,   250,   250,   250,   250,   250,   250,     0, 
          0,     0,     0,   259,     0,     0,   259,     0,     0,   259, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   240, 
          0,     0,   240,   259,   259,   240,   259,     0,   259,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   240, 
        240,     0,   240,     0,   240,     0,     0,     0,     0,     0, 
          0,     0,     0,   241,   241,   241,   241,   241,   259,   259, 
        241,   241,     0,   241,   241,   241,   241,   241,   241,     0, 
          0,     0,     0,     0,   240,   240,     0,   258,     0,     0, 
        258,     0,     0,   258,     0,     0,     0,     0,     0,   259, 
        259,     0,     0,     0,     0,     0,     0,   258,   258,     0, 
        258,   255,   258,     0,   255,   240,   240,     0,     0,     0, 
          0,     0,     0,     0,   239,     0,     0,   239,   255,   255, 
        239,   255,     0,   255,     0,     0,     0,     0,     0,     0, 
          0,     0,   258,   258,   239,   239,     0,   239,     0,   239, 
          0,     0,     0,     0,     0,     0,     0,   243,   243,   243, 
        243,   243,     0,   255,   243,   243,     0,   243,   243,   243, 
        243,   243,   243,   258,   258,     0,     0,     0,     0,   239, 
        239,   256,     0,     0,   256,     0,     0,   256,     0,     0, 
          0,     0,     0,     0,   255,   255,     0,     0,     0,     0, 
          0,   256,   256,     0,   256,     0,   256,     0,     0,     0, 
        239,   239,     0,     0,   242,   242,   242,   242,   242,     0, 
          0,   242,   242,     0,   242,   242,   242,   242,   242,   242, 
          0,     0,     0,     0,     0,     0,   256,   256,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   244,   244,   244,   244,   244,     0,     0,   244,   244, 
          0,   244,   244,   244,   244,   244,   244,   256,   256,   245, 
          0,     0,   245,     0,     0,   245,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   246,     0,     0,   246,   245, 
        245,   246,   245,     0,   245,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   246,   246,     0,   246,     0, 
        246,     0,     0,     0,     0,     0,   196,     0,     0,   196, 
          0,     0,     0,     0,   245,   245,     0,     0,     0,     0, 
          0,     0,     0,   196,   196,     0,   196,     0,   196,     0, 
        246,   246,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   245,   245,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   196,     0, 
          0,   246,   246,     0,     0,     0,     0,     0,     0,   259, 
        259,   259,   259,   259,     0,     0,   259,   259,     0,   259, 
        259,   259,   259,   259,   259,   240,   240,   240,   240,   240, 
        196,     0,   240,   240,     0,   240,   240,   240,   240,   240, 
        240,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   258,   258,   258,   258,   258,     0,     0, 
        258,   258,     0,   258,   258,   258,   258,   258,   258,     0, 
          0,     0,     0,     0,   255,   255,   255,   255,   255,     0, 
          0,     0,     0,     0,   255,   255,   255,   255,   255,   255, 
        239,   239,   239,   239,   239,     0,     0,   239,   239,     0, 
        239,   239,   239,   239,   239,   239,   112,     0,   122,     0, 
          0,     0,     0,   121,     0,   112,   110,   122,   111,     0, 
          0,     0,   121,     0,     0,   110,     0,   111,     0,     0, 
          0,     0,     0,   265,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   269,     0,     0,   256,   256,   256, 
        256,   256,     0,     0,     0,     0,     0,   256,   256,   256, 
        256,   256,   256,     0,    68,     0,     0,     0,     0,     0, 
          0,     0,     0,    68,     0,     0,   112,     0,   122,     0, 
          0,     0,     0,   121,     0,     0,   110,     0,   111,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   113, 
          0,   109,     0,     0,     0,     0,     0,     0,   113,     0, 
          0,     0,   112,     0,   122,     0,     0,     0,     0,   121, 
          0,     0,   110,     0,   111,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,    68,   245,   245,   245,   245,   245, 
        261,     0,     0,     0,     0,   245,   245,   245,   245,   245, 
        245,   246,   246,   246,   246,   246,     0,     0,     0,     0, 
          0,   246,   246,   246,   246,   246,   246,     0,     0,   113, 
         68,     0,     0,     0,     0,     0,     0,     0,     0,   196, 
        196,   196,   196,   196,     0,     0,     0,     0,     0,   196, 
        196,   196,   196,   196,   196,     0,     0,     0,     0,   112, 
          0,   122,     0,     0,     0,   113,   121,     0,   112,   110, 
        122,   111,     0,     0,     0,   121,     0,     0,   110,     0, 
        111,     0,     0,     0,     0,     0,     0,   263,     0,     0, 
          0,     0,     0,   152,    70,    71,    72,    73,    74,     0, 
          0,     0,   152,    70,    71,    72,    73,    74,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    68,     0,    10, 
          0,     0,     0,     0,     0,     0,    68,   112,    10,   122, 
          0,     0,     0,     0,   121,     0,     0,   110,     0,   111, 
          0,     0,     0,     0,     0,     0,   117,     0,     0,     0, 
          0,     0,   113,     0,     0,   117,     0,     0,   364,     0, 
          0,   113,     0,   118,   119,    71,    72,    73,    74,     0, 
          0,     0,     0,   120,     0,     0,     0,     0,     0,   116, 
          0,     0,   120,     0,     0,    68,     0,     0,   116,    10, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   152, 
         70,    71,    72,    73,    74,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   117,     0,     0,     0, 
        113,     0,     0,     0,     0,    10,     0,     0,     0,     0, 
          0,     0,     0,     0,   266,   114,   115,     0,     0,     0, 
          0,     0,   270,   120,   114,   115,     0,     0,     0,   116, 
          0,     0,   117,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   120, 
          0,     0,     0,     0,     0,   116,   152,    70,    71,    72, 
         73,    74,     0,     0,     0,   152,    70,    71,    72,    73, 
         74,     0,     0,     0,     0,   114,   115,     0,     0,     0, 
          0,     0,    10,     0,     0,     0,     0,     0,     0,     0, 
          0,    10,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   117, 
          0,   114,   115,     0,     0,     0,     0,     0,   117,     0, 
          0,     0,     0,     0,   152,    70,    71,    72,    73,    74, 
          0,     0,     0,     0,     0,     0,   120,     0,     0,     0, 
          0,     0,   116,     0,     0,   120,     0,     0,     0,     0, 
         10,   116,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   117,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   114,   115, 
          0,     0,     0,     0,   120,     0,     0,   114,   115,     0, 
        116,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   114,   115, 
    );
    protected static $yyCheck = array(4,
         50,    51,    52,    46,   102,   125,    59,    37,   126,    58, 
         91,    91,    42,    43,   126,    45,   126,    47,   303,    59, 
        123,    56,    44,    28,    29,   125,   304,    91,    41,    34, 
         80,    44,    82,    42,    37,    38,   208,    59,   125,    42, 
         43,   401,    45,    59,    47,    50,    51,    52,    91,    54, 
         55,   149,   102,    88,    89,    44,    37,    60,    61,    62, 
         63,    42,    43,    40,    45,    40,    47,    59,    41,    79, 
        123,    44,   124,    62,    79,    80,    91,    82,    93,    60, 
         93,    62,    37,   123,    64,    58,    59,    42,    43,    46, 
         45,    94,    47,    46,    60,    41,   126,   102,    44,   149, 
         91,    41,    44,   125,    44,    60,    41,    62,    44,   159, 
         40,   283,    58,    59,    44,   407,   164,   477,    58,    59, 
         93,   124,    40,   126,    59,    91,    44,    91,    44,    91, 
         93,   123,    44,   143,    59,   145,    63,   142,   143,    44, 
        145,    59,    87,    46,   149,   126,   196,    93,   123,   159, 
         63,    93,   125,    93,   159,    58,   166,    93,    93,   451, 
        260,   166,   125,    93,    91,   110,   111,   112,   113,   114, 
        115,   126,   117,   479,   148,    44,   121,    93,    91,   125, 
        260,    93,   230,   125,    91,   125,   260,    37,    93,   237, 
        125,   196,    42,    62,   312,   200,   260,    47,   123,    44, 
        312,   507,   374,    46,   257,   123,   286,   125,   311,   125, 
        220,   260,   261,   331,    59,   220,   161,   257,   163,   331, 
        125,   331,   286,   168,   169,   170,   171,   172,   173,   174, 
        175,   176,   177,   178,   179,   180,   181,   182,   183,   184, 
        185,   186,   187,   188,   189,   190,   191,   192,   193,   194, 
        195,   260,   197,   373,   374,    41,    37,    38,    44,   340, 
        340,    42,    43,   208,    45,   257,    47,    58,    33,   260, 
         35,   319,    58,    59,    40,    40,   126,   260,    43,    60, 
         45,    62,   312,   260,   402,   403,   373,   374,   340,   234, 
        402,   403,   402,   403,   260,   286,   260,    60,   260,   125, 
        260,   331,   330,   421,   310,   315,   310,    93,    41,   312, 
        315,    44,   340,    94,    91,   363,   261,   300,   263,    91, 
        265,   266,   286,   300,   269,   270,    91,    46,   331,   514, 
        515,   312,   306,   260,    33,    59,    35,   260,   283,   125, 
        300,    40,    40,   124,    43,   126,    45,    61,    46,   340, 
        331,   441,   442,   260,   320,   390,   541,   312,   320,   286, 
        125,   126,   307,   286,   309,    40,   332,   260,   332,   314, 
        332,    46,   402,   403,   340,   320,   331,   420,   340,   286, 
        340,   355,   539,   540,   329,   260,   391,   364,   260,   261, 
        480,   421,    91,   286,   344,   345,   401,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,   454,   564,   411,   412, 
        508,   286,   357,   416,   417,   418,   419,   340,   421,   400, 
        401,   402,   403,   368,    61,   332,   125,   126,   373,   374, 
        411,   412,   377,   340,   260,    41,   441,   442,    44,   332, 
        421,   414,   415,    41,   311,   400,   401,   402,   403,    33, 
        123,    35,    58,    59,   373,   374,    40,   402,   508,    43, 
        286,    45,   312,   310,    41,    58,   421,    44,   414,   415, 
        283,    91,   477,   286,   414,   480,   123,   422,   423,   484, 
        123,   331,    59,   260,    44,   430,   431,    93,   260,   261, 
        262,   263,   264,   265,   123,   260,   261,   262,   263,   264, 
        265,    41,    40,   508,    44,    58,   332,    91,    46,   286, 
         41,   410,    44,    44,   459,   565,    93,    93,    44,   125, 
         58,   286,    93,   300,   301,   302,   471,    91,   300,    41, 
         41,   312,    44,    44,    91,   585,   300,   301,   302,   123, 
         41,    91,   126,    44,    41,   260,   125,    44,   313,   123, 
        331,   496,   402,   403,   499,   332,   501,    58,    59,   260, 
        565,   260,   261,   262,   263,   264,   265,    40,   300,   301, 
        302,   421,   123,   257,   123,   340,   341,   342,   343,    44, 
        585,   346,    58,    40,    58,    40,   260,   286,   260,   123, 
        535,    41,    93,    40,    93,   360,   361,   362,   363,    41, 
        365,   366,    44,    40,   549,   370,   371,   372,   373,   374, 
        125,    40,    61,    40,   313,    61,    58,    59,   123,   400, 
        401,   402,   403,    91,   125,    41,   571,   125,   414,   415, 
        411,   412,   125,   125,    41,   340,    41,   402,   403,    44, 
        421,   340,   341,   342,   343,    40,    40,   346,    33,    40, 
         35,    93,    40,    58,    59,    40,    59,    59,    43,    40, 
         45,   360,   361,   362,   363,   430,   365,   366,   260,    41, 
        340,   370,    44,   372,   373,   374,   260,   261,   262,   263, 
        264,   265,    41,   125,    40,    44,    58,    59,    93,    59, 
         41,   125,    41,    44,    41,    59,   260,   361,    61,    58, 
         59,   340,   286,   402,   403,    59,    91,    58,    59,    61, 
        260,   261,   262,   263,   264,   265,    46,    41,    44,    93, 
        125,    93,   286,   280,   281,   282,   283,   284,   285,   313, 
        287,   430,    41,   125,    93,    44,   300,   301,   302,   123, 
         59,   126,    93,   300,   301,   302,   125,   304,    40,    58, 
         59,    44,   364,   125,   123,   321,   340,   341,   342,   343, 
        260,    41,   346,    41,    41,   340,   125,   340,   332,    59, 
        123,   371,    40,    59,   125,   125,   360,   361,   362,   363, 
         41,   365,   366,    44,    93,    37,   370,   125,   372,   125, 
         42,    43,   123,    45,    41,    47,   125,    58,    59,    37, 
         38,    58,    40,    41,    42,    43,    44,    45,    41,    47, 
        125,    44,   125,    41,   125,   123,   125,   260,   402,   403, 
         58,    59,    60,    61,    62,    63,    59,   123,    59,    41, 
         93,    41,    93,   257,    44,   234,   123,    37,    38,    58, 
         40,    41,    42,    43,    44,    45,   430,    47,    91,    59, 
        125,    41,   125,    91,    44,    93,    94,    91,    58,    59, 
         93,    61,    62,    63,   125,    91,   497,    41,    58,    59, 
        257,   502,    93,   123,   126,   260,   261,   262,   263,   264, 
        265,   125,    59,    93,   125,   123,   124,   125,   126,   125, 
         59,    91,   125,    93,    94,    59,    41,    41,    41,    41, 
        364,   286,    41,    93,     7,   125,    85,   125,   307,     6, 
        309,    62,    84,   414,   415,   125,   305,   442,   448,    41, 
        551,   484,    44,   123,   124,   125,   126,    48,   313,    49, 
        329,    91,    91,   200,   557,   125,    58,    59,   460,   570, 
        521,   521,   159,   472,   159,    91,   210,   315,   310,   145, 
        581,   206,    25,    -1,    -1,   340,   341,   342,   343,    -1, 
         -1,   346,    -1,    -1,    -1,    -1,   125,    -1,    -1,   368, 
         -1,    93,   414,   415,   373,   360,   361,   362,   363,   125, 
        365,   366,    -1,    -1,    -1,   370,    -1,   372,    -1,    -1, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,    91,    -1,   125,    -1,    -1,    -1,    -1,    -1,   414, 
        415,    58,    59,    60,    61,    62,    63,   402,   403,   257, 
         -1,    -1,   260,   422,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    46,    47,    -1,    -1, 
         -1,    -1,   414,   415,    91,   430,    93,    94,    58,    59, 
         60,    61,    62,    63,    -1,   414,   415,   257,    -1,    -1, 
        260,    -1,    -1,   414,   415,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   310,   311,   312,    -1,    -1,   124,   125,   126, 
         -1,    91,   320,    93,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   330,   331,   332,    -1,    -1,   496,    -1,    -1, 
         -1,    -1,   340,    -1,    -1,   414,   415,    -1,    -1,    -1, 
        310,   311,   312,    -1,   124,   125,   126,    -1,    -1,    -1, 
        320,   280,   281,   282,   283,   284,   285,    -1,   287,    -1, 
        330,   331,   332,    -1,   280,   281,   282,   283,   284,   285, 
        340,   287,    -1,    -1,   303,    -1,    -1,    -1,    -1,    -1, 
        549,    -1,    -1,   414,   415,    -1,    -1,   303,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   410,   411,   412,   334,   414,   415,   416,   417, 
        418,   419,    -1,   421,    -1,    -1,    -1,    -1,   334,    -1, 
        280,   281,   282,   283,   284,   285,    -1,   287,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,   303,   414,   415,   416,   417,   418,   419, 
         -1,   421,    37,    38,   414,   415,    41,    42,    43,    44, 
         45,    46,    47,    -1,    -1,    91,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    46,    47, 
         -1,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,   125, 
         58,    59,    60,    61,    62,    63,    91,    -1,    93,    94, 
         -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    37, 
         38,    -1,   414,   415,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,   312,    91,    -1,    93,    94,    -1,    -1,   124, 
        125,   126,    60,    61,    62,    63,    91,    -1,    -1,    -1, 
         -1,   331,    -1,    -1,    -1,    -1,    -1,   345,   280,   281, 
        282,   283,   284,   285,    -1,   287,   124,   125,   126,    -1, 
         -1,    -1,    -1,    91,    -1,    93,    94,    -1,    -1,    -1, 
         -1,   303,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   380,   410,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,   421,    -1,   124,    -1,   126,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
        420,   421,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,   280,   281,   282,   283,   284,   285, 
         -1,   287,    -1,    58,    59,    60,    61,    62,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,   303,    47,    -1, 
         -1,    -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    60,    61,    62,    63,    -1,    37,    38,    93,    94, 
         41,    42,    43,    44,    45,    -1,    47,    -1,   334,   497, 
         -1,    -1,    -1,    -1,   502,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    93,    94,    -1,   312,    -1,   124, 
        125,   126,    -1,    -1,    -1,   280,   281,   282,   283,   284, 
        285,    -1,   287,    -1,    -1,    -1,   331,    -1,    -1,    -1, 
         -1,    -1,    93,    94,   312,   124,   125,   126,   303,    -1, 
         -1,    -1,    -1,   551,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   570,   124,   125,   126,    -1,    -1,    -1,   334, 
         -1,    91,    -1,   581,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   331,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   420,   421,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   260,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   420,   421,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   286,   287, 
         -1,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,   410,   411,   412,   303,   414,   415,   416,   417, 
        418,   419,   420,   421,    37,    38,    -1,    -1,    -1,    42, 
         43,    44,    45,    46,    47,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    -1,   332,    -1,    -1,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,   330,   331,    -1,    -1,    -1, 
         -1,    -1,    -1,   312,    -1,   340,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1, 
         93,    94,   331,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         38,   312,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
        280,   281,   282,   283,   284,   285,    -1,   287,    -1,    -1, 
        331,   124,    60,   126,    62,    -1,    -1,    -1,    -1,    -1, 
        300,   301,   302,   303,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,    -1,    -1,    -1,    -1,    -1,   126,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
        421,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    60,    61,    62,    63,    37,    38,    93,    94,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    -1,    93,    94,    -1,    -1,   124,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    94,    -1,    -1,   124,   125,    -1,   331,    -1, 
         -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,   124,   125,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    63, 
         -1,    93,    94,   331,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    41,   411,   412, 
         44,   414,   415,   416,   417,   418,   419,   420,   421,    93, 
         94,    -1,   124,   125,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    37,    38,    -1,    -1,    41,    42,    43,    44, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        124,   125,    -1,    58,    59,    60,    61,    62,    63,    93, 
         94,    -1,   400,   401,   402,   403,    -1,    -1,    -1,    -1, 
         -1,    37,    38,   411,   412,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,   421,    -1,    -1,   312,    -1,    93,    94, 
        124,   125,    -1,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,   280,   281,   282,   283,   284,   285,    -1,   287,    -1, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,   124, 
        125,   300,   301,   302,   303,    -1,    -1,    -1,    94,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
        312,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,    -1,    -1,    -1,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,   312,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,   421, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    -1,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,   312,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    94,   421, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,   312,   421,   124,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1, 
        414,   415,   416,   417,   418,   419,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    37,    38,    -1,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    37,    38,    -1,    -1,    -1,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,   312,    -1,    -1,    -1, 
         94,    -1,    -1,   124,    -1,   126,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        124,    -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        124,    -1,   126,    -1,    60,    61,    62,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    37,    38,    94,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,   124,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37, 
         38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   312,    -1,   124,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1,    -1, 
        331,    -1,    -1,    -1,    -1,    -1,    37,    38,   312,    -1, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   124,   331,   126,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    94,    -1,    -1,    -1,   331,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
        421,    -1,    -1,   124,    -1,   126,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,   364, 
        414,   415,   416,   417,   418,   419,   312,   421,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,   421,    -1,    -1, 
         37,    38,   417,    -1,    -1,    42,    43,    -1,    45,   424, 
         47,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
        331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,   312,   411,   412,    94,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,    -1,    -1, 
         -1,    -1,   487,   331,    -1,    -1,    -1,    -1,    -1,    -1, 
        495,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126, 
         -1,   506,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
        421,   312,   537,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        331,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,   566,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,   421,    -1,    37,    38,    -1,    -1,   584, 
         42,    43,    -1,    45,   589,    47,    -1,    -1,    -1,   594, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    94,   414,   415,   416,   417,   418,   419,    -1, 
        421,    -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   124,    -1,   126,    58,    59,    60,    61,    62, 
         63,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
         93,    94,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1, 
         37,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1, 
         -1,   124,   125,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,   421,    -1,    -1,   124,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    61,    62,    63,    37,    38,    -1,    -1,    -1,    42, 
         43,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,    -1,    -1,    60,    -1,    62, 
         -1,    -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,   331, 
         -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    94,    -1,    -1,   124,    -1,   126,    58,    59,    60, 
         61,    62,    63,    -1,    37,    38,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   126,    -1,    58,    59,    60,    61,    62, 
         63,    -1,    93,    94,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,   421, 
         93,    94,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    58,    59,    60,    61,    62,    63, 
         -1,    -1,    -1,    -1,   331,    -1,    -1,   400,   401,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,   421,    93, 
         94,    -1,    -1,    -1,   400,   401,    -1,    -1,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,    -1,    -1, 
        124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   312,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    38,   421,    -1,    41,    -1,    43,    44, 
         45,   331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312, 
         -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    -1,    -1, 
         41,    -1,    43,    44,    45,    -1,    -1,    -1,    93,    94, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,   404,   405,   406,   407,   408,   124, 
        125,   411,   412,    -1,    -1,   415,   416,   417,   418,   419, 
         -1,   421,    93,    94,    -1,    -1,    -1,   400,   401,   402, 
        403,    -1,    -1,    -1,    -1,    -1,    -1,    38,   411,   412, 
         41,    -1,    -1,    44,    -1,    -1,    -1,    -1,   421,    -1, 
         -1,    -1,    -1,   124,   125,    -1,    -1,    58,    59,    -1, 
         61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    93,    94,    -1,    -1,    -1,   400,   401,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    -1, 
         -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    93,    94,    38,    -1, 
         -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59, 
         -1,    61,    -1,    63,    -1,    -1,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    94,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1, 
         93,    94,    -1,    -1,    -1,   400,   401,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38, 
         -1,    -1,    41,    58,    59,    44,    61,    -1,    63,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    93,    94, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    38,    -1,    -1, 
         41,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,   124, 
        125,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1, 
         61,    41,    63,    -1,    44,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    58,    59, 
         44,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    93,    94,    58,    59,    -1,    61,    -1,    63, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    93,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   124,   125,    -1,    -1,    -1,    -1,    93, 
         94,    38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
        124,   125,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,   124,   125,    38, 
         -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    58, 
         59,    44,    61,    -1,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    44, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1, 
         93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   404,   405,   406,   407,   408, 
        125,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,    -1,    -1,    -1,   414,   415,   416,   417,   418,   419, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    33,    -1,    35,    -1, 
         -1,    -1,    -1,    40,    -1,    33,    43,    35,    45,    -1, 
         -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1, 
         -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    62,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,    -1,    -1,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    91,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    91,    -1,    -1,    33,    -1,    35,    -1, 
         -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126, 
         -1,    58,    -1,    -1,    -1,    -1,    -1,    -1,   126,    -1, 
         -1,    -1,    33,    -1,    35,    -1,    -1,    -1,    -1,    40, 
         -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    91,   404,   405,   406,   407,   408, 
         61,    -1,    -1,    -1,    -1,   414,   415,   416,   417,   418, 
        419,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,   126, 
         91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   404, 
        405,   406,   407,   408,    -1,    -1,    -1,    -1,    -1,   414, 
        415,   416,   417,   418,   419,    -1,    -1,    -1,    -1,    33, 
         -1,    35,    -1,    -1,    -1,   126,    40,    -1,    33,    43, 
         35,    45,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    61,    -1,    -1, 
         -1,    -1,    -1,   260,   261,   262,   263,   264,   265,    -1, 
         -1,    -1,   260,   261,   262,   263,   264,   265,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,   286, 
         -1,    -1,    -1,    -1,    -1,    -1,    91,    33,   286,    35, 
         -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1, 
         -1,    -1,   126,    -1,    -1,   313,    -1,    -1,   123,    -1, 
         -1,   126,    -1,   260,   261,   262,   263,   264,   265,    -1, 
         -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346, 
         -1,    -1,   340,    -1,    -1,    91,    -1,    -1,   346,   286, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260, 
        261,   262,   263,   264,   265,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   401,   402,   403,    -1,    -1,    -1, 
         -1,    -1,   400,   340,   402,   403,    -1,    -1,    -1,   346, 
         -1,    -1,   313,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   340, 
         -1,    -1,    -1,    -1,    -1,   346,   260,   261,   262,   263, 
        264,   265,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
        265,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313, 
         -1,   402,   403,    -1,    -1,    -1,    -1,    -1,   313,    -1, 
         -1,    -1,    -1,    -1,   260,   261,   262,   263,   264,   265, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1, 
         -1,    -1,   346,    -1,    -1,   340,    -1,    -1,    -1,    -1, 
        286,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
         -1,    -1,    -1,    -1,   340,    -1,    -1,   402,   403,    -1, 
        346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, "'#'", NULL, "'%'", "'&'", 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", "'^'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", "'|'", "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_ARROW', NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', 'T_OCTAL', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', 'T_CLONE', NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', 'T_AS', 'T_THIS', NULL, 'T_CONST', NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 'T_OR_EQUAL', 'T_AND_EQUAL', 
      'T_XOR_EQUAL', 'T_NAV', 'T_EXP', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_WITH', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new \text\parser\generic\ParseException(sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new \text\parser\generic\ParseException(sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 184 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 196 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 196 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 7:  #line 207 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 208 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 9:  #line 212 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 10:  #line 212 "grammar/xp.jay"
    {
      $yyVals[-4+$yyTop]->position= $p;
      $yyVals[-4+$yyTop]->name= $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop];
      $yyVal= $yyVals[-4+$yyTop];
    } break;

    case 11:  #line 220 "grammar/xp.jay"
    { $yyVal= new ImportNode(); } break;

    case 12:  #line 221 "grammar/xp.jay"
    { $yyVal= new StaticImportNode(); } break;

    case 13:  #line 222 "grammar/xp.jay"
    { $yyVal= new NativeImportNode(); } break;

    case 16:  #line 228 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 233 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 234 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 20:  #line 240 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode(), TRUE); } break;

    case 21:  #line 240 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 22:  #line 249 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode(), TRUE); } break;

    case 23:  #line 249 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 24:  #line 258 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode(), TRUE); } break;

    case 25:  #line 258 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 26:  #line 269 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 270 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 274 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 29:  #line 275 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 30:  #line 279 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 31:  #line 280 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 32:  #line 284 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 33:  #line 285 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 34:  #line 289 "grammar/xp.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 35:  #line 290 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 294 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 37:  #line 295 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 38:  #line 296 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StaticInitializerNode($yyVals[-1+$yyTop])); } break;

    case 39:  #line 300 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 40:  #line 301 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 41:  #line 302 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 42:  #line 306 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 43:  #line 307 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 44:  #line 311 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 45:  #line 311 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 46:  #line 314 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 47:  #line 314 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 48:  #line 324 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 49:  #line 331 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 50:  #line 338 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ClassConstantNode($yyVals[-3+$yyTop], new TypeName($yyVals[-4+$yyTop]), $yyVals[-1+$yyTop]));
    } break;

    case 51:  #line 344 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 52:  #line 345 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IndexerNode(array('parameter' => $yyVals[-1+$yyTop]))); } break;

    case 53:  #line 349 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 54:  #line 350 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 55:  #line 354 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop]=> NULL); } break;

    case 56:  #line 355 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 57:  #line 359 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 58:  #line 360 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 59:  #line 366 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 60:  #line 366 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 61:  #line 377 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 62:  #line 377 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= new TypeName('self');
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= array_merge((array)$yyVals[0+$yyTop], array(new ReturnNode(new VariableNode($yyVals[-7+$yyTop]))));
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 63:  #line 388 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 64:  #line 388 "grammar/xp.jay"
    {
      /* Assert only certain methods are allowed here. This could be done by making*/
      /* __construct and friends keywords - or this way!*/
      switch ($yyVals[-6+$yyTop]) {
        case '__construct': $yyVal= $yyLex->create(new ConstructorNode(), TRUE); break;
        default: $this->error(
          E_ERROR, 
          sprintf(
            'Method "%s" requires a return type at %s, line %d (offset %d)',
            $yyVals[-6+$yyTop],
            $yyLex->fileName,
            $p[0],
            $p[1]
          ), 
          array('__construct')
        );
        $yyVal= $yyLex->create(new MethodNode(), TRUE);
      }
      $yyVal->position= $p;
      $yyVal->modifiers= $yyVals[-7+$yyTop][0];
      $yyVal->annotations= $yyVals[-7+$yyTop][1];
      $yyVal->parameters= $yyVals[-3+$yyTop];
      $yyVal->throws= $yyVals[-1+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 65:  #line 413 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode(), TRUE); } break;

    case 66:  #line 413 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 67:  #line 426 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 68:  #line 427 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 69:  #line 431 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 70:  #line 432 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 71:  #line 436 "grammar/xp.jay"
    {
      $yyVal= $yyVals[0+$yyTop];
    } break;

    case 72:  #line 439 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop] && $yyVals[-3+$yyTop]->parameters= array('default' => $yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 73:  #line 443 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 74:  #line 450 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 75:  #line 455 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= '$'.$yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 76:  #line 460 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 77:  #line 467 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 78:  #line 468 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 79:  #line 472 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 80:  #line 473 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 81:  #line 477 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 82:  #line 478 "grammar/xp.jay"
    { $yyVal= (array)$yyVals[-1+$yyTop]; } break;

    case 83:  #line 479 "grammar/xp.jay"
    { $yyVal= array($yyLex->create(new ReturnNode($yyVals[-1+$yyTop]))); } break;

    case 84:  #line 483 "grammar/xp.jay"
    { $yyVal= array(NULL, NULL); } break;

    case 85:  #line 484 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop][0]['type']); } break;

    case 86:  #line 485 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 87:  #line 489 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 88:  #line 490 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 89:  #line 494 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 90:  #line 495 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 91:  #line 499 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[-1+$yyTop]), $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 92:  #line 500 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[0+$yyTop], 'vararg' => TRUE), $yyVals[-2+$yyTop]); } break;

    case 93:  #line 501 "grammar/xp.jay"
    { $yyVal= array('assign' => $yyVals[-1+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 94:  #line 505 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[0+$yyTop], 'check' => TRUE); } break;

    case 95:  #line 506 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[-1+$yyTop], 'check' => FALSE); } break;

    case 96:  #line 510 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 97:  #line 511 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 104:  #line 530 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 106:  #line 535 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 107:  #line 536 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 108:  #line 540 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 109:  #line 540 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 110:  #line 543 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 111:  #line 543 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 112:  #line 548 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 113:  #line 548 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 114:  #line 558 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 115:  #line 558 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 116:  #line 563 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 117:  #line 563 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 567 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 119:  #line 567 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[-5+$yyTop];
    } break;

    case 120:  #line 571 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 121:  #line 571 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 122:  #line 575 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 124:  #line 576 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 126:  #line 577 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 127:  #line 577 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 128:  #line 580 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 129:  #line 580 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 130:  #line 585 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArmNode($yyVals[-4+$yyTop]['i'], $yyVals[-4+$yyTop]['v'], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 131:  #line 588 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new WithNode($yyVals[-4+$yyTop], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 133:  #line 595 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 134:  #line 596 "grammar/xp.jay"
    { $yyVal= array_merge_recursive($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 135:  #line 600 "grammar/xp.jay"
    {
      $yyVal= array('i' => array(), 'v' => array(new VariableNode($yyVals[0+$yyTop])));
    } break;

    case 136:  #line 603 "grammar/xp.jay"
    {
      $v= new VariableNode($yyVals[-2+$yyTop]);
      $yyVal= array('i' => array($yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => $v, 'expression' => $yyVals[0+$yyTop])))), 'v' => array($v)); 
    } break;

    case 137:  #line 610 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 138:  #line 611 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 139:  #line 615 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => new VariableNode($yyVals[-2+$yyTop]), 'expression' => $yyVals[0+$yyTop]))); 
    } break;

    case 140:  #line 621 "grammar/xp.jay"
    { $yyVal= array('value' => $yyVals[0+$yyTop]); } break;

    case 141:  #line 622 "grammar/xp.jay"
    { $yyVal= array('key' => $yyVals[-2+$yyTop], 'value' => $yyVals[0+$yyTop]); } break;

    case 142:  #line 626 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 144:  #line 631 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 145:  #line 632 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 146:  #line 636 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 147:  #line 636 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 148:  #line 640 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 149:  #line 640 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 150:  #line 646 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 151:  #line 647 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 152:  #line 651 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 153:  #line 652 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 154:  #line 652 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 155:  #line 657 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 156:  #line 658 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 157:  #line 662 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 158:  #line 663 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 159:  #line 667 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 160:  #line 667 "grammar/xp.jay"
    {
      $yyVal= array();
      foreach ($yyVals[-5+$yyTop] as $type) {
        $c= new CatchNode();
        $c->position= $p;
        $c->type= $type;
        $c->variable= $yyVals[-4+$yyTop];
        $c->statements= $yyVals[-1+$yyTop];
        $yyVal[]= $c;
      }
    } break;

    case 161:  #line 681 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 162:  #line 682 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 163:  #line 686 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 165:  #line 691 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 166:  #line 691 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 167:  #line 699 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 169:  #line 704 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 170:  #line 705 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 171:  #line 709 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 173:  #line 714 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 174:  #line 720 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->values= (array)$yyVals[-1+$yyTop];
    } break;

    case 175:  #line 725 "grammar/xp.jay"
    {
      $yyVal= new MapNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->elements= (array)$yyVals[-1+$yyTop];
    } break;

    case 176:  #line 733 "grammar/xp.jay"
    { 
      $yyVal= new StaticMemberAccessNode(NULL, $yyVals[0+$yyTop]); 
    } break;

    case 177:  #line 736 "grammar/xp.jay"
    { 
      $yyVal= new StaticMethodCallNode(NULL, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); 
    } break;

    case 178:  #line 739 "grammar/xp.jay"
    {
      $yyVal= new ConstantAccessNode(NULL, $yyVals[0+$yyTop]);
    } break;

    case 179:  #line 742 "grammar/xp.jay"
    {
      $yyVal= new ClassAccessNode(NULL);
    } break;

    case 180:  #line 748 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 181:  #line 748 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-2+$yyTop];
      }
    } break;

    case 182:  #line 754 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      }
    } break;

    case 183:  #line 760 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 184:  #line 760 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 185:  #line 769 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 186:  #line 769 "grammar/xp.jay"
    {
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[-1+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 187:  #line 779 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode($yyVals[-1+$yyTop])); } break;

    case 188:  #line 779 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-2+$yyTop];
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-4+$yyTop];
      } else {
        $yyVal= $yyVals[-4+$yyTop];
      }
    } break;

    case 189:  #line 788 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CloneNode($yyVals[0+$yyTop])); break;
    } break;

    case 190:  #line 791 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CastNode(array_merge($yyVals[0+$yyTop], array('expression' => $yyVals[-2+$yyTop])))); 
    } break;

    case 191:  #line 794 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 192:  #line 797 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 193:  #line 800 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 194:  #line 803 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 195:  #line 806 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 196:  #line 810 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 197:  #line 816 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 198:  #line 822 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 199:  #line 828 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 200:  #line 833 "grammar/xp.jay"
    { $yyVals[-5+$yyTop]= $yyLex->create(new LambdaNode($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); } break;

    case 201:  #line 833 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-7+$yyTop];
      }
    } break;

    case 202:  #line 839 "grammar/xp.jay"
    { 
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= new BracedExpressionNode($yyVals[-2+$yyTop]);
      } else {
        $yyVal= new BracedExpressionNode($yyVals[-2+$yyTop]); 
      }
    } break;

    case 203:  #line 850 "grammar/xp.jay"
    {
      $yyVal= array(new ReturnNode($yyVals[0+$yyTop]));
    } break;

    case 204:  #line 853 "grammar/xp.jay"
    {
      $yyVal= (array)$yyVals[-1+$yyTop];
    } break;

    case 205:  #line 859 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 207:  #line 864 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 208:  #line 865 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 209:  #line 869 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 210:  #line 870 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 211:  #line 874 "grammar/xp.jay"
    { switch ($yyVals[0+$yyTop]) {
      case 'true': $yyVal= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $yyVal= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $yyVal= $yyLex->create(new NullNode()); break;
      default: $yyVal= $yyLex->create(new ConstantNode($yyVals[0+$yyTop])); break;
    }} break;

    case 212:  #line 880 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 213:  #line 880 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 214:  #line 881 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IntegerNode($yyVals[0+$yyTop])); } break;

    case 215:  #line 882 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode($yyVals[0+$yyTop])); } break;

    case 216:  #line 883 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new OctalNode($yyVals[0+$yyTop])); } break;

    case 217:  #line 884 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode($yyVals[0+$yyTop])); } break;

    case 218:  #line 885 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode($yyVals[0+$yyTop])); } break;

    case 219:  #line 889 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => (array)$yyVals[0+$yyTop])));
    } break;

    case 220:  #line 892 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => (array)$yyVals[0+$yyTop])));
    } break;

    case 221:  #line 898 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 223:  #line 903 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 224:  #line 904 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 225:  #line 908 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 227:  #line 913 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 228:  #line 914 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 229:  #line 918 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 230:  #line 919 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 231:  #line 920 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 232:  #line 921 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 233:  #line 922 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 234:  #line 923 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 235:  #line 924 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 236:  #line 925 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 237:  #line 926 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 238:  #line 927 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 239:  #line 928 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 240:  #line 929 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 241:  #line 933 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 242:  #line 934 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 243:  #line 935 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 244:  #line 936 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 245:  #line 937 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 246:  #line 938 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 247:  #line 939 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 248:  #line 940 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 249:  #line 944 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 250:  #line 945 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 251:  #line 946 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 252:  #line 947 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 253:  #line 948 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 254:  #line 949 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 255:  #line 950 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 256:  #line 951 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 257:  #line 952 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 258:  #line 953 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 259:  #line 954 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 260:  #line 955 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 261:  #line 959 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 262:  #line 960 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 263:  #line 961 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 264:  #line 962 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 265:  #line 963 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 266:  #line 964 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 267:  #line 968 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 268:  #line 969 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 269:  #line 974 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 271:  #line 979 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop]); } break;

    case 272:  #line 980 "grammar/xp.jay"
    { $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop]; $yyVal= array($yyVals[0+$yyTop][0], $yyVals[-1+$yyTop]); } break;

    case 273:  #line 984 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode(NULL)); } break;

    case 274:  #line 984 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 275:  #line 987 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MemberAccessNode(NULL, $yyVals[0+$yyTop], $yyVals[-1+$yyTop])); 
    } break;

    case 276:  #line 990 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new MethodCallNode(NULL, $yyVals[-1+$yyTop], NULL, $yyVals[-2+$yyTop])); } break;

    case 277:  #line 990 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 278:  #line 993 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new InstanceCallNode(NULL, NULL, $yyVals[-1+$yyTop])); } break;

    case 279:  #line 993 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 280:  #line 999 "grammar/xp.jay"
    { $yyVal= FALSE; } break;

    case 281:  #line 1000 "grammar/xp.jay"
    { $yyVal= TRUE; } break;

    case 288:  #line 1018 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 289:  #line 1019 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 290:  #line 1023 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop]->compoundName().'[]'); } break;

    case 291:  #line 1027 "grammar/xp.jay"
    { $yyVal= new TypeName('[:'.$yyVals[-1+$yyTop]->compoundName().']'); } break;

    case 292:  #line 1031 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 293:  #line 1032 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 295:  #line 1037 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 296:  #line 1041 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 297:  #line 1042 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 298:  #line 1048 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 299:  #line 1049 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 300:  #line 1053 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 301:  #line 1054 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 302:  #line 1058 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 303:  #line 1059 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 304:  #line 1060 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 305:  #line 1061 "grammar/xp.jay"
    { $yyVal= MODIFIER_PACKAGE; } break;

    case 306:  #line 1062 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 307:  #line 1063 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 308:  #line 1064 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 309:  #line 1065 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2820 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
