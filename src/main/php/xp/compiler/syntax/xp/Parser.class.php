<?php
#line 2 "grammar/xp.jay"
namespace xp\compiler\syntax\xp;

use xp\compiler\types\TypeName;
use xp\compiler\ast\ParseTree;
use xp\compiler\ast\PackageNode;
use xp\compiler\ast\ImportNode;
use xp\compiler\ast\StaticImportNode;
use xp\compiler\ast\NativeImportNode;
use xp\compiler\ast\AnnotationNode;
use xp\compiler\ast\ClassNode;
use xp\compiler\ast\EnumNode;
use xp\compiler\ast\EnumMemberNode;
use xp\compiler\ast\InterfaceNode;
use xp\compiler\ast\FieldNode;
use xp\compiler\ast\PropertyNode;
use xp\compiler\ast\IndexerNode;
use xp\compiler\ast\ConstructorNode;
use xp\compiler\ast\MethodNode;
use xp\compiler\ast\OperatorNode;
use xp\compiler\ast\ReturnNode;
use xp\compiler\ast\InstanceCreationNode;
use xp\compiler\ast\VariableNode;
use xp\compiler\ast\ArrayAccessNode;
use xp\compiler\ast\CastNode;
use xp\compiler\ast\TryNode;
use xp\compiler\ast\CatchNode;
use xp\compiler\ast\ThrowNode;
use xp\compiler\ast\FinallyNode;
use xp\compiler\ast\ForNode;
use xp\compiler\ast\ForeachNode;
use xp\compiler\ast\DoNode;
use xp\compiler\ast\WhileNode;
use xp\compiler\ast\AssignmentNode;
use xp\compiler\ast\InvocationNode;
use xp\compiler\ast\MethodCallNode;
use xp\compiler\ast\InstanceCallNode;
use xp\compiler\ast\StaticMethodCallNode;
use xp\compiler\ast\MemberAccessNode;
use xp\compiler\ast\StaticMemberAccessNode;
use xp\compiler\ast\ConstantNode;
use xp\compiler\ast\ConstantAccessNode;
use xp\compiler\ast\ClassAccessNode;
use xp\compiler\ast\IntegerNode;
use xp\compiler\ast\HexNode;
use xp\compiler\ast\OctalNode;
use xp\compiler\ast\DecimalNode;
use xp\compiler\ast\StringNode;
use xp\compiler\ast\BooleanNode;
use xp\compiler\ast\NullNode;
use xp\compiler\ast\ArrayNode;
use xp\compiler\ast\MapNode;
use xp\compiler\ast\ClassConstantNode;
use xp\compiler\ast\InstanceOfNode;
use xp\compiler\ast\ComparisonNode;
use xp\compiler\ast\BinaryOpNode;
use xp\compiler\ast\BooleanOpNode;
use xp\compiler\ast\UnaryOpNode;
use xp\compiler\ast\TernaryNode;
use xp\compiler\ast\SwitchNode;
use xp\compiler\ast\CaseNode;
use xp\compiler\ast\DefaultNode;
use xp\compiler\ast\BreakNode;
use xp\compiler\ast\ContinueNode;
use xp\compiler\ast\CloneNode;
use xp\compiler\ast\IfNode;
use xp\compiler\ast\ElseNode;
use xp\compiler\ast\StaticInitializerNode;
use xp\compiler\ast\LambdaNode;
use xp\compiler\ast\WithNode;
use xp\compiler\ast\ArmNode;
use xp\compiler\ast\BracedExpressionNode;
#line 75 "-"

  /**
   * Generated parser class
   *
   * @purpose  Parser implementation
   */
  class Parser extends \text\parser\generic\AbstractParser {
    const T_BOOLEAN_OR= 414;
    const T_BOOLEAN_AND= 415;
    const T_ADD_EQUAL= 404;
    const T_SUB_EQUAL= 405;
    const T_MUL_EQUAL= 406;
    const T_DIV_EQUAL= 407;
    const T_CONCAT_EQUAL= 416;
    const T_MOD_EQUAL= 408;
    const T_AND_EQUAL= 418;
    const T_OR_EQUAL= 417;
    const T_XOR_EQUAL= 419;
    const T_EQUALS= 411;
    const T_NOT_EQUALS= 412;
    const T_SE= 401;
    const T_GE= 400;
    const T_ARROW= 257;
    const T_EXP= 421;
    const T_INSTANCEOF= 312;
    const T_INC= 402;
    const T_DEC= 403;
    const T_AS= 331;
    const T_NEW= 346;
    const T_CLONE= 313;
    const T_WORD= 260;
    const T_STRING= 261;
    const T_NUMBER= 262;
    const T_DECIMAL= 263;
    const T_HEX= 264;
    const T_OCTAL= 265;
    const T_PUBLIC= 280;
    const T_PRIVATE= 281;
    const T_PROTECTED= 282;
    const T_STATIC= 283;
    const T_FINAL= 284;
    const T_ABSTRACT= 285;
    const T_NATIVE= 286;
    const T_INLINE= 287;
    const T_CLASS= 300;
    const T_INTERFACE= 301;
    const T_ENUM= 302;
    const T_PACKAGE= 303;
    const T_IMPORT= 304;
    const T_EXTENDS= 310;
    const T_IMPLEMENTS= 311;
    const T_OPERATOR= 320;
    const T_THROWS= 321;
    const T_DOTS= 330;
    const T_THIS= 332;
    const T_CONST= 334;
    const T_VARIABLE= 340;
    const T_RETURN= 341;
    const T_TRY= 342;
    const T_THROW= 343;
    const T_CATCH= 344;
    const T_FINALLY= 345;
    const T_FOR= 360;
    const T_WHILE= 361;
    const T_DO= 362;
    const T_FOREACH= 363;
    const T_IN= 364;
    const T_BREAK= 365;
    const T_CONTINUE= 366;
    const T_IF= 370;
    const T_ELSE= 371;
    const T_SWITCH= 372;
    const T_CASE= 373;
    const T_DEFAULT= 374;
    const T_DOUBLE_COLON= 410;
    const T_DOUBLE_ARROW= 413;
    const T_NAV= 420;
    const T_WITH= 430;
    const YY_ERRORCODE= 256;

    protected static $yyLhs= array(-1,
          0,     1,     5,     1,     2,     2,     6,     6,     7,     7, 
          7,     7,     9,     9,     8,     8,     4,     4,     4,    13, 
          3,    17,     3,    19,     3,    14,    14,    15,    15,    20, 
         20,    22,    22,    16,    16,    23,    23,    23,    18,    18, 
         18,    27,    27,    29,    28,    30,    28,    24,    24,    24, 
         34,    34,    35,    35,    38,    38,    33,    33,    40,    25, 
         43,    25,    45,    25,    47,    25,    11,    11,    48,    48, 
         50,    50,    50,    51,    51,    51,    52,    52,    53,    53, 
         42,    42,    42,    39,    39,    39,    44,    44,    54,    54, 
         37,    37,    37,    55,    55,    41,    41,    46,    46,    46, 
         46,    46,    46,    26,    26,    56,    56,    59,    57,    60, 
         57,    63,    57,    65,    57,    67,    57,    68,    57,    69, 
         57,    71,    57,    72,    57,    73,    57,    74,    57,    57, 
         57,    57,    76,    76,    78,    78,    77,    77,    79,    66, 
         66,    70,    70,    80,    80,    82,    81,    83,    81,    61, 
         61,    62,    84,    62,    75,    75,    85,    85,    89,    88, 
         90,    90,    86,    86,    91,    87,    64,    64,    92,    92, 
         58,    58,    93,    93,    93,    97,    97,    97,    97,    99, 
         31,    31,   100,    31,   101,    31,   102,    31,    31,    31, 
         31,    31,    31,    31,    31,    31,    31,    31,    31,   110, 
         31,    31,   109,   109,   108,   108,   111,   111,   112,   112, 
         36,   114,    36,    36,    36,    36,    36,    36,   113,   113, 
         96,    96,   115,   115,   117,   117,   116,   116,   103,   103, 
        103,   103,   103,   103,   103,   103,   103,   103,   103,   103, 
        104,   104,   104,   104,   104,   104,   104,   104,   105,   105, 
        105,   105,   105,   105,   105,   105,   105,   105,   105,   105, 
        106,   106,   106,   106,   106,   106,   107,   107,    98,    98, 
        118,   118,   120,   119,   119,   122,   119,   123,   119,   121, 
        121,    10,    10,    10,    32,    32,    32,    12,    12,    94, 
         95,   124,   124,   125,   125,    21,    21,    49,    49,   126, 
        126,   127,   127,   127,   127,   127,   127,   127,   127, 
    );
    protected static $yyLen= array(2,
          3,     0,     0,     4,     0,     1,     1,     2,     5,     6, 
          6,     6,     1,     1,     1,     3,     1,     3,     3,     0, 
          9,     0,     9,     0,     8,     0,     2,     0,     2,     0, 
          2,     0,     3,     2,     0,     1,     1,     4,     3,     1, 
          0,     1,     3,     0,     3,     0,     6,     5,     6,     6, 
          1,     4,     1,     2,     2,     4,     0,     2,     0,     9, 
          0,     9,     0,     8,     0,    10,     4,     1,     1,     3, 
          2,     5,     5,     3,     3,     1,     1,     3,     3,     3, 
          1,     3,     3,     0,     2,     1,     0,     1,     1,     3, 
          3,     3,     4,     1,     2,     0,     2,     1,     1,     1, 
          1,     1,     1,     0,     1,     1,     2,     0,     4,     0, 
          7,     0,    10,     0,     8,     0,     6,     0,     8,     0, 
          8,     0,     3,     0,     3,     0,     4,     0,     6,     7, 
          7,     2,     1,     3,     1,     3,     1,     3,     3,     1, 
          3,     0,     1,     1,     2,     0,     5,     0,     4,     1, 
          3,     0,     0,     3,     2,     1,     1,     2,     0,     9, 
          1,     3,     0,     1,     0,     5,     0,     1,     1,     3, 
          0,     1,     5,     4,     4,     1,     4,     1,     1,     0, 
          3,     2,     0,     4,     0,     5,     0,     6,     2,     3, 
          1,     1,     1,     1,     1,     5,     3,     3,     3,     0, 
          8,     4,     1,     3,     0,     1,     1,     3,     1,     2, 
          1,     0,     4,     1,     1,     1,     1,     1,     1,     1, 
          1,     1,     1,     3,     0,     1,     3,     3,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     3,     4,     4, 
          3,     3,     3,     3,     3,     3,     4,     4,     3,     3, 
          3,     3,     3,     3,     3,     3,     3,     4,     4,     3, 
          2,     2,     2,     2,     2,     2,     2,     2,     0,     1, 
          1,     2,     0,     4,     2,     0,     6,     0,     5,     1, 
          1,     1,     1,     1,     1,     1,     1,     1,     4,     3, 
          4,     1,     3,     1,     3,     1,     3,     0,     1,     1, 
          2,     1,     1,     1,     1,     1,     1,     1,     1, 
    );
    protected static $yyDefRed= array(0,
          3,     0,     0,     0,     0,     0,     0,     7,     0,     0, 
          0,   282,     0,     0,   284,   283,     0,    15,     0,   302, 
        304,   303,   306,   308,   307,   309,   305,     1,     0,    68, 
          0,   300,     8,     0,     0,     4,     0,     0,     0,     0, 
          0,    69,    20,    24,    22,   301,    18,    19,     0,     0, 
          0,    14,     0,     0,     0,     0,    76,     0,     0,     0, 
          0,     0,     0,     0,    13,     0,     0,     9,     0,     0, 
          0,    70,    67,     0,     0,     0,     0,    11,    12,    10, 
         74,    75,   212,     0,   218,   214,   217,   215,   216,     0, 
          0,     0,    77,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    72,     0,    73,     0,     0,   285,     0,   286, 
        287,     0,   292,    27,     0,     0,     0,    31,    35,     0, 
        221,     0,     0,     0,     0,     0,     0,   183,     0,     0, 
          0,   180,     0,     0,     0,     0,     0,   219,     0,   220, 
        191,   192,   193,   194,   195,     0,     0,   223,   211,    79, 
         80,     0,    78,     0,     0,     0,     0,   289,    29,    35, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   189,     0,   187,     0,     0,     0,     0,   185,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   267, 
        268,     0,   273,   281,   280,   182,   270,     0,     0,     0, 
        213,     0,   295,     0,   290,   293,     0,   297,     0,     0, 
         25,     0,    34,    36,    37,     0,     0,     0,    42,     0, 
          0,     0,     0,     0,     0,     0,     0,   181,     0,   209, 
          0,     0,     0,   207,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        199,     0,     0,   190,     0,   272,   278,     0,   170,     0, 
          0,   226,   224,   291,    21,     0,     0,     0,     0,     0, 
          0,     0,    23,     0,    35,     0,   184,     0,     0,     0, 
        202,   210,     0,     0,     0,   179,   176,     0,     0,     0, 
          0,     0,     0,     0,     0,    95,     0,     0,   276,   108, 
          0,   126,   112,   116,   118,   114,   122,   124,   110,   120, 
          0,     0,     0,     0,   106,     0,    63,     0,     0,     0, 
          0,     0,     0,    35,    45,     0,    43,     0,     0,     0, 
          0,     0,     0,     0,     0,   208,     0,   186,     0,   274, 
          0,     0,     0,   128,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,    38,   132,   107,     0,     0, 
         61,    59,    98,    99,   100,   101,   102,   103,     0,     0, 
          0,     0,     0,     0,     0,     0,   174,   175,   188,     0, 
        200,     0,   279,     0,     0,     0,     0,     0,   133,     0, 
          0,     0,     0,   150,     0,     0,   123,   125,     0,     0, 
          0,     0,   137,     0,     0,    89,     0,     0,     0,     0, 
          0,    65,     0,     0,    48,     0,     0,    53,    33,     0, 
        173,   204,     0,   177,   277,   109,     0,     0,     0,     0, 
        127,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,    50,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    52,    55,     0,    49,    54,    47,   201, 
          0,     0,   134,     0,     0,     0,   151,     0,     0,     0, 
          0,     0,     0,   138,     0,     0,     0,     0,    90,    92, 
         91,     0,     0,     0,     0,     0,   159,   165,   129,     0, 
        156,   157,     0,     0,   117,     0,   141,     0,     0,     0, 
          0,    93,    97,     0,    81,     0,    64,     0,     0,     0, 
         56,     0,     0,   155,   164,   158,   130,     0,     0,     0, 
        153,   111,   146,   148,     0,     0,   144,   131,     0,     0, 
         62,    60,     0,     0,     0,     0,   119,   115,     0,     0, 
          0,   121,   145,    83,    82,    66,   161,     0,     0,     0, 
        154,     0,     0,     0,     0,   166,   113,     0,   149,   162, 
          0,   147,     0,     0,   160, 
    );
    protected static $yyDgoto= array(2,
          3,     6,    28,   135,     4,     7,     8,    17,    53,    18, 
        232,   108,    61,    96,   116,   162,    63,   237,    62,    98, 
        118,   365,   233,   234,   235,   352,   238,   239,   311,   312, 
        353,   293,   412,   363,   457,   137,   446,   458,   490,   451, 
        518,   547,   450,   447,   400,   409,   493,    41,    30,    42, 
         58,    92,    93,   448,   449,   354,   355,   269,   383,   393, 
        435,   562,   387,   138,   390,   477,   388,   389,   394,   565, 
        391,   392,   386,   426,   529,   428,   442,   429,   443,   566, 
        567,   580,   581,   579,   530,   554,   531,   532,   552,   588, 
        553,   139,   242,   110,   111,   140,   328,   216,   176,   171, 
        255,   246,   141,   142,   143,   144,   145,   252,   375,   463, 
        253,   254,   146,   100,   147,   148,   303,   217,   218,   295, 
        219,   382,   338,   112,   113,    31,    32, 
    );
    protected static $yySindex = array(         -176,
          0,     0,  -160,  -152,  -191,  1142,  -160,     0,   119,   165, 
        166,     0,  -188,  -188,     0,     0,   250,     0,   244,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   271,     0, 
        604,     0,     0,  -152,  -152,     0,   -33,   275,   -36,  -207, 
         77,     0,     0,     0,     0,     0,     0,     0,   -36,   -36, 
        -36,     0,   289,     0,   145,   307,     0,   290,   244,   604, 
       -152,  -152,  -152,   314,     0,   338,   345,     0,  -152,  -152, 
        685,     0,     0,   353,    99,   118,    99,     0,     0,     0, 
          0,     0,     0,   371,     0,     0,     0,     0,     0,   387, 
        412,   317,     0,    31,  -152,   144,  -152,   337,   144,  4568, 
        708,   708,     0,  -204,     0,   158,   415,     0,   395,     0, 
          0,    87,     0,     0,  -152,   392,   450,     0,     0,   402, 
          0,  4736,  4736,  4736,  4736,  4736,  4736,     0,  4736,   152, 
        474,     0,  4736,   418,   125,  3205,   -42,     0,   500,     0, 
          0,     0,     0,     0,     0,   462,   516,     0,     0,     0, 
          0,   371,     0,  -152,   -65,   469,    31,     0,     0,     0, 
       -152,  1680,   315,   159,   -49,   -49,  -116,   -49,   -49,   -49, 
        -65,     0,  4736,     0,  4736,   -42,  2276,   -59,     0,  4736, 
       4736,  4736,  4736,  4736,  4736,  4736,  4736,  4736,  4736,  4736, 
       4736,  4736,  4736,  4736,  4736,  4577,  4664,  4371,  4736,  4557, 
       4736,  4736,  4736,  4736,  4736,  4736,  4736,  -152,  4736,     0, 
          0,   -65,     0,     0,     0,     0,     0,   -42,   -25,  4736, 
          0,   184,     0,   141,     0,     0,  2060,     0,   453,   323, 
          0,   -53,     0,     0,     0,     0,   459,   283,     0,   549, 
        395,   -42,   472,   480,  3205,  4736,  3205,     0,   -42,     0, 
        -67,   340,   554,     0,  -227,  3344,  3422,  3422,  3422,  3422, 
       3422,  3422,  3422,  3422,  3422,  3422,  3422,  3205,   555,   100, 
        262,   738,  4736,  3411,  4736,  3411,  4736,  4736,    33,    33, 
       4736,  4736,    33,    33,    13,    13,    38,    38,    38,  -116, 
          0,   -49,    67,     0,  4736,     0,     0,   584,     0,   577, 
        474,     0,     0,     0,     0,   559,   352,   300,   382,   129, 
        521,   605,     0,   315,     0,  4736,     0,  4736,   -47,   611, 
          0,     0,  4675,   -59,   606,     0,     0,   -42,  4736,  3422, 
       3422,    33,    33,    33,    33,     0,   567,  4736,     0,     0, 
         48,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        621,   541,  2312,   559,     0,   608,     0,   627,   630,   506, 
        580,   615,   556,     0,     0,  4736,     0,   783,   631,   552, 
        557,   -42,   559,  3205,   561,     0,  4736,     0,   -20,     0, 
        639,  4736,  4736,     0,   341,  4736,   644,   648,   431,   659, 
        638,   641,   662,   663,   364,     0,     0,     0,   708,     7, 
          0,     0,     0,     0,     0,     0,     0,     0,   669,     7, 
       4736,   651,   452,  2101,  2466,   521,     0,     0,     0,   588, 
          0,   673,     0,   677,   660,   559,   668,   319,     0,  2493, 
       4736,  4736,   559,     0,   362,   384,     0,     0,  4736,  4736, 
        672,   349,     0,   681,   695,     0,   701,   699,  -205,   -63, 
        -63,     0,   652,  3205,     0,    65,   -88,     0,     0,   521, 
          0,     0,   -42,     0,     0,     0,   622,  4736,   341,   623, 
          0,   689,  2520,   624,   711,   709,   388,  2697,  2724,  4736, 
        364,   632,     0,   494,   443,     7,   425,   615,     7,   725, 
        699,   728,     7,     0,     0,   559,     0,     0,     0,     0, 
        173,  3205,     0,   559,  4736,   431,     0,  4736,   430,  4736, 
        431,   655,  3205,     0,   559,   615,  -152,     9,     0,     0, 
          0,   699,   443,   443,   743,   661,     0,     0,     0,   173, 
          0,     0,   664,   729,     0,  2765,     0,  2905,   444,   155, 
        692,     0,     0,  4736,     0,   559,     0,     9,     9,   443, 
          0,   762,   702,     0,     0,     0,     0,  4736,   759,   431, 
          0,     0,     0,     0,   712,   155,     0,     0,  2932,   713, 
          0,     0,     9,  -152,   559,   785,     0,     0,   431,  4736, 
        782,     0,     0,     0,     0,     0,     0,  -110,   716,   431, 
          0,  2959,   559,  -152,   801,     0,     0,   559,     0,     0, 
        720,     0,   559,   719,     0, 
    );
    protected static $yyRindex= array(          823,
          0,     0,  1476,     0,     0,   280,  1809,     0,   769,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
         55,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -43,   266,     0,     0,    82,     0,   277, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   897,  -111,   723,  -111,     0,     0,     0, 
          0,     0,     0,   806,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   727,     0,     0,   727,   758, 
          0,     0,     0,     0,     0,     0,     0,     0,   227,     0, 
          0,     0,     0,     0,     0,     0,    40,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,  1592, 
       1628,     0,     0,     0,     0,    59,  1395,     0,    30,     0, 
          0,     0,     0,     0,     0,     0,    94,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,  -120,   731,   596,  1783,  1851,  3028,  1891,  2013,  2040, 
          0,     0,     0,     0,     0,  1395,     0,   595,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   795,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,  1454,     0,   358, 
          0,   -10,     0,     0,     0,     0,  -120,     0,   476,     0, 
          0,     0,     0,     0,     0,   609,     0,   732,     0,   767, 
          0,  1395,   768,   774,    84,   825,    97,     0,  1395,     0, 
          0,     0,   610,     0,     0,    23,   -39,     4,    43,   421, 
        434,   440,   657,   746,   839,   934,   989,  1033,     0,  4328, 
       1823,  4168,     0,  4258,     0,  4274,     0,     0,  1323,  3835, 
          0,     0,  3872,  3942,  3633,  3677,  3450,  3539,  3607,  3152, 
          0,  2081,  1154,     0,   775,     0,     0,   994,     0,     0, 
          0,     0,     0,     0,     0,   744,     0,   210,     0,     0, 
        -15,     0,     0,     0,     0,   825,     0,   745,     0,     0, 
          0,     0,     0,     0,  1197,     0,     0,  1395,     0,  1053, 
       1226,  4059,  4075,  4099,  4144,     0,     0,   825,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   -90,     0,     0,     0,     0,   750,     0, 
          0,   816,     0,     0,     0,     0,     0,   237,     0,     0, 
          0,  1395,   744,   751,     0,     0,   825,     0,  4344,     0, 
          0,   825,   818,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   837, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,  -120,     0,  1294,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   744,   370,     0,     0,     0, 
        820,     0,   744,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   840,     0,   841, 
        841,     0,     0,   475,     0,     0,     0,     0,     0,   -15, 
          0,     0,  1395,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   526,     0,     0,     0,     0, 
          0,     0,     0,     0,    46,     0,     0,   291,     0,     0, 
        855,     0,   837,     0,     0,   744,     0,     0,     0,     0, 
          0,   379,     0,   744,   820,     0,     0,     0,     0,     0, 
          0,     0,   380,     0,   744,   291,     0,     0,     0,     0, 
          0,   862,    46,    46,     0,     0,     0,     0,     0,   245, 
          0,     0,     0,     0,     0,     0,     0,     0,   365,   779, 
          0,     0,     0,     0,     0,   744,     0,     0,     0,    46, 
          0,     0,     0,     0,     0,     0,     0,   825,     0,     0, 
          0,     0,     0,     0,     0,   781,     0,     0,     0,     0, 
          0,     0,     0,     0,   744,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   -79,     0,     0,     0,     0,   -79,     0,     0, 
          0,     0,   744,     0,     0, 
    );
    protected static $yyGindex= array(0,
          0,     0,     0,    -4,     0,     0,   902,   525,   572,   167, 
        904,   -54,     0,   834,   813,   -41,     0,     0,     0,     0, 
       -114,  -148,     0,     0,     0,   947,     0,   599,     0,     0, 
         56,   272,  -190,     0,     0,   -50,  -325,   458,   465,     0, 
        -98,  -230,     0,   424,     0,     0,     0,     0,   858,   864, 
          0,     0,   822,  -137,   718,     0,    41,  -181,     0,     0, 
        -34,     0,     0,   886,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   464,   447,     0, 
        377,     0,     0,     0,     0,     0,   406,   422,     0,     0, 
          0,     0,     0,   780,   786,   634,     0,   -56,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   642,     0,     0,     0,   741,     0,   736,     0,     0, 
          0,     0,     0,     0,   808,     0,   936, 
    );
    protected static $yyTable = array(11,
        159,   198,    16,   215,   198,    52,    75,    76,    77,   209, 
        121,    26,    50,   594,   297,    13,   206,   195,   198,   198, 
         91,   204,   202,   156,   203,   107,   205,   107,    32,    47, 
         48,   107,   325,   225,   105,    57,   497,   107,   299,   198, 
        114,   200,   117,    32,   229,   104,   228,   229,   213,   206, 
        150,   151,    55,   198,   204,   152,    74,    74,    74,   205, 
        117,   229,   229,   197,    81,    82,   197,   545,    12,   206, 
        168,    12,   326,   194,   204,   202,   209,   203,    10,   205, 
        197,   197,   225,   230,   453,   198,   230,   385,   168,    74, 
         74,    13,    74,   106,    14,    90,   229,   107,   296,   169, 
        230,   230,   169,   193,    96,   209,   117,     9,    15,    32, 
         74,    15,   327,   337,   225,   197,   240,   169,   227,   248, 
         59,   107,   168,   495,   487,    71,     1,   227,   229,   336, 
        157,   546,    56,    10,   488,   230,   206,   195,   209,   298, 
        228,   204,   202,     5,   203,   299,   205,   197,   158,   223, 
         74,   169,    74,   291,   168,   136,    74,   156,   209,   198, 
        519,   200,   296,   209,    34,   298,    74,   230,    96,    60, 
        384,   456,    16,    74,    71,    16,   227,   165,   166,   167, 
        168,   169,   170,   169,   172,   317,   222,   496,   177,   228, 
         34,   174,   321,   194,     9,   208,     9,    34,   174,    26, 
          9,   425,    69,    74,    34,    54,   308,    74,   227,   173, 
         35,   298,   300,   301,   212,    65,    54,    54,   222,   156, 
         10,   228,    10,    12,    36,   209,    10,    74,   245,   595, 
        247,   156,    10,   304,    12,   256,   257,   258,   259,   260, 
        261,   262,   263,   264,   265,   266,   267,   268,   270,   271, 
        272,   274,   276,   279,   280,   283,   284,   285,   286,   287, 
        288,   289,   290,    15,   292,   544,     9,   461,   489,    17, 
        294,   378,   322,   368,    15,   268,   445,   163,   309,   163, 
        250,   212,   105,   105,   163,   210,   211,   163,   294,   163, 
          9,   208,    10,   104,   104,    39,   296,   521,   206,   195, 
         17,   136,    96,   204,   202,    17,   203,    40,   205,    17, 
        212,   499,   491,   491,   299,   419,    10,   571,   572,    74, 
         51,   198,   414,   200,   208,   542,   314,    16,   330,    71, 
        331,    57,   332,   333,    57,   163,   334,   335,    16,   357, 
        299,   315,   586,   212,   208,    34,   445,    68,   444,   208, 
        268,   522,   210,   211,   299,   299,   299,   105,    17,   470, 
        104,    39,   469,   212,    70,   109,    16,   298,   212,   163, 
        163,   136,    78,   136,   198,   198,    49,   214,   374,   201, 
        199,   210,   211,    57,   379,   298,   299,   209,   359,   482, 
        196,   197,   481,   136,   398,    74,    79,   152,   171,   152, 
        207,   171,   543,    80,   152,    74,   500,   152,    95,   152, 
        135,   208,    94,   135,   210,   211,   171,   229,   229,   136, 
        139,   415,   136,   139,   548,   549,   224,    97,   109,   434, 
        212,   101,   136,   207,   210,   211,   197,   136,   268,   210, 
        211,   430,   241,   300,   301,    74,    74,   102,   360,   251, 
        171,   573,   103,   207,   115,   152,   230,   230,   207,   119, 
        361,   231,   117,   124,   231,   134,   454,   154,   362,    17, 
        133,   535,   155,   122,   232,   123,   539,   232,   231,   231, 
        233,    74,   171,   233,    74,   156,   136,   473,    74,   152, 
        152,   232,   232,   161,   478,   479,   298,   233,   233,   201, 
        199,   210,   211,   310,   163,   163,   163,   163,   163,   163, 
        196,   197,    74,   231,   160,    58,   527,   528,    58,   587, 
        207,    83,   298,   502,   163,   578,   232,   563,   564,    17, 
        163,   175,   233,    58,   179,   513,   298,    37,    38,   600, 
        178,    17,   407,   220,   591,   231,   434,   405,   403,    17, 
        404,   434,   406,   433,   221,   597,   125,   163,   232,   222, 
        136,   225,   298,   536,   233,   538,   306,    58,   298,    74, 
         43,    44,    45,   208,   236,   306,   298,   298,   298,   298, 
        298,   298,   307,   313,   163,   163,   163,   163,   316,    74, 
        163,   124,   212,   134,   318,   251,   323,   324,   133,   569, 
        434,   122,   319,   123,   163,   163,   163,   163,   298,   163, 
        163,   356,   329,   136,   163,   163,   163,   163,   163,   434, 
         64,    66,    67,   339,   152,   152,   152,   152,   152,   152, 
        434,   408,   211,   211,   173,   592,   211,   211,   211,   211, 
        211,   358,   211,   364,   366,   377,   163,   163,    46,    83, 
        152,   372,    44,   211,   211,   211,   211,   211,   211,   380, 
        395,   201,   199,   210,   211,   396,   401,    44,   399,   402, 
        410,   416,   196,   197,   163,   411,   417,   152,   413,   423, 
        427,   418,   207,   431,   125,   421,   211,   432,   211,   211, 
        164,    85,    86,    87,    88,    89,   437,   235,   436,   438, 
        235,   439,   440,   441,   152,   152,   152,   152,   452,   455, 
        152,   456,   462,   464,   235,   235,    10,   465,   466,   211, 
        211,   211,   475,   476,   152,   152,   152,   152,   468,   152, 
        152,    44,   480,    44,   152,   306,   152,   152,   152,   483, 
        484,   485,   486,   129,   494,   504,   501,   505,   507,   235, 
        508,   510,   509,   516,   515,   306,   306,   306,   306,   306, 
        306,   306,   306,   517,   520,   523,   152,   152,   524,   537, 
        132,   340,   341,   342,   206,    83,   128,   540,   306,   204, 
        202,   235,   203,   550,   205,   551,   234,   558,   557,   234, 
        343,   344,   345,   346,   152,   347,   348,   198,    83,   200, 
        349,   574,   350,   234,   234,    17,    17,   306,    17,    17, 
         17,    17,    17,    17,   561,    17,   568,   577,   164,    85, 
         86,    87,    88,    89,   575,   590,    17,    17,    17,    17, 
         17,    17,   126,   127,   231,   231,   582,   585,   234,   593, 
        596,   601,   603,   605,    10,    30,   211,   232,   232,    28, 
        167,   205,   171,   233,   233,    41,    40,   285,   286,    17, 
        351,    17,    17,   209,   287,   167,   206,   171,   104,   167, 
        234,   129,    51,    19,    57,   203,   171,    87,   167,   236, 
         88,    84,   236,    20,    21,    22,    23,    24,    25,   140, 
         26,    17,    17,    17,    17,    86,   236,   236,   132,   340, 
        341,   342,    85,   142,   128,   143,    27,   211,    33,    29, 
         99,   120,   367,     2,   498,   492,   525,    73,   343,   344, 
        345,   346,    72,   347,   348,   153,   211,   514,   349,   294, 
        350,   236,   503,   288,   288,   555,   288,   288,   288,   288, 
        288,   288,   583,   288,    84,    85,    86,    87,    88,    89, 
        243,   556,   371,   296,   288,   288,   244,   288,   288,   288, 
        126,   127,   302,   236,   226,   376,    46,   149,    85,    86, 
         87,    88,    89,     0,   237,     0,     0,   237,     0,     0, 
          0,     0,     0,     0,    90,     0,     0,   288,   351,   288, 
        288,   237,   237,     0,     0,   211,   211,   211,   211,   211, 
        211,   211,   211,   211,     0,    17,   211,   211,     0,   211, 
        211,   211,   211,   211,   211,   211,   211,     0,     0,   288, 
        288,   288,   288,     0,     0,    17,   237,     0,    17,   238, 
        275,   275,   238,     0,   275,   275,   275,   275,   275,   275, 
        275,     0,     0,     0,     0,     0,   238,   238,     0,   208, 
          0,   275,   275,   275,   275,   275,   275,     0,   237,     0, 
          0,     0,    20,    21,    22,   229,    24,    25,   212,    26, 
        235,   235,     0,   172,     0,     0,   172,     0,    17,    17, 
         17,   238,     0,     0,   275,    27,   275,   275,    17,     0, 
        172,   172,     0,   247,     0,     0,   247,     0,    17,    17, 
         17,     0,     2,     2,     2,     2,     2,     2,    17,     2, 
        247,   247,     0,   238,     0,     0,   230,   275,   275,   275, 
          0,     0,     2,     2,     2,   172,     2,     0,     0,     0, 
          0,   320,     0,     0,     0,     0,     0,   201,   199,   210, 
        211,     0,     0,     0,     0,   247,     0,     0,   196,   197, 
          0,     0,     0,   288,     0,     0,   288,   172,   207,   234, 
        234,     0,     0,     0,     0,     0,     0,     0,    17,    17, 
         17,    17,    17,    17,    17,    17,    17,   247,    17,    17, 
         17,     0,    17,    17,    17,    17,    17,    17,     0,    17, 
         94,    94,     0,     0,    94,    94,    94,    94,    94,     0, 
         94,   369,     0,   370,     0,     0,   288,   288,   288,     0, 
          0,    94,    94,    94,    94,    94,   288,     0,     0,     0, 
          0,     0,     0,   381,     0,     0,   288,   288,   288,     0, 
          0,     0,    19,   178,   178,     0,   288,   178,   178,   178, 
        178,   178,   178,   178,     0,     0,    94,    94,     0,     0, 
          0,     0,   236,   236,   178,   178,   178,   178,   178,   178, 
          0,     0,   422,     0,     0,     0,   248,   424,     0,   248, 
          0,     0,     0,     0,     0,     0,     0,    94,    94,    94, 
          0,     0,     0,   248,   248,     0,     0,   178,     0,   178, 
        178,     0,     0,     0,     0,     0,   288,   288,   288,   288, 
        288,   288,   288,   288,   288,   275,     0,   288,   288,     0, 
        288,   288,   288,   288,   288,   288,   472,   288,   248,   420, 
        178,   178,   178,     0,   275,     0,     0,     0,     0,     0, 
         32,    32,     0,     0,    32,    32,    32,    32,    32,    32, 
         32,     0,     0,     0,     0,     0,     0,   237,   237,     0, 
        248,    32,    32,    32,    32,    32,    32,     0,     0,     0, 
        241,     0,     0,   241,     0,     0,   241,     0,     0,     0, 
          0,     0,   467,     0,     0,     0,     0,     0,     0,   474, 
        241,   241,     0,   241,    32,   241,    32,    32,     0,     0, 
        534,     0,     0,   275,   275,   275,   275,   275,   275,   275, 
        275,   275,   238,   238,   275,   275,     0,   275,   275,   275, 
        275,   275,   275,   275,   275,   241,   241,    32,    32,    32, 
          0,    20,    21,    22,    23,    24,    25,     0,    26,     0, 
          0,   269,   269,     0,     0,   269,   269,   269,   269,   269, 
          0,   269,   526,   576,    27,     0,   241,   241,     0,     0, 
        533,     0,   269,   269,   269,   269,   269,   269,     0,     0, 
          0,   541,     0,     0,     0,    94,   247,   247,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    94,    94,     0,     0,   269,   269,     0, 
        271,   271,   570,    94,   271,   271,   271,   271,   271,     0, 
        271,     0,     0,     0,     0,     0,     0,     0,   178,     0, 
          0,   271,   271,   271,   271,   271,   271,     0,   269,   269, 
        269,   589,     0,     0,     0,     0,     0,   178,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   599, 
          0,     0,     0,     0,   602,     0,   271,   271,     0,   604, 
          0,     0,     0,    94,    94,    94,    94,    94,    94,    94, 
         94,    94,     0,     0,    94,    94,     5,    94,    94,    94, 
         94,    94,    94,     0,    94,     0,     0,   271,   271,   271, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   178,   178,   178,   178, 
        178,   178,   178,   178,   178,    32,     0,   178,   178,     0, 
        178,   178,   178,   178,   178,   178,   178,   178,     0,     0, 
          0,     0,     0,     0,    32,     0,     0,     0,   211,   211, 
          0,     0,     0,   211,   211,   211,   211,     0,   211,   248, 
        248,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   211,   211,   211,   211,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   218,   218,     0,     0,     0,   218, 
        218,   218,   218,   218,   218,     0,     0,     0,     0,     0, 
          0,     0,   211,     0,   211,   211,     0,   218,   218,   218, 
        218,     0,     0,    32,    32,    32,    32,    32,    32,    32, 
         32,    32,     0,     0,    32,    32,   269,    32,    32,    32, 
         32,    32,    32,    32,    32,   211,     0,   211,   218,     0, 
        218,   218,     0,     0,     0,   269,   241,   241,   241,   241, 
        241,     0,     0,   241,   241,     0,   241,   241,   241,   241, 
        241,   241,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   218,     0,   218,     0,     5,     5,     5,     5,     5, 
          5,     0,     5,     0,     0,   271,     0,     0,     0,     0, 
         19,     0,     0,     0,     0,     5,     5,     5,     5,     0, 
          0,     0,     0,     0,   271,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   269,   269,   269,   269,   269,   269, 
        269,   269,   269,     0,   231,   269,   269,     0,   269,   269, 
        269,   269,   269,   269,     0,   269,     0,     0,     0,   263, 
        263,     0,     0,   263,   263,   263,   263,   263,     0,   263, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        263,   263,   263,   263,   263,   263,     0,     0,     0,     0, 
          0,     0,     0,   271,   271,   271,   271,   271,   271,   271, 
        271,   271,     0,   257,   271,   271,   257,   271,   271,   271, 
        271,   271,   271,     0,   271,   263,   263,     0,     0,     0, 
        257,   257,     0,   257,     0,   257,     0,   264,   264,     0, 
          0,   264,   264,   264,   264,   264,     0,   264,     0,     6, 
          0,     0,     0,   211,     0,     0,   263,   263,   264,   264, 
        264,   264,   264,   264,     0,   257,   257,     0,     0,     0, 
          0,     0,   211,     0,     0,     0,     0,   262,   262,     0, 
          0,   262,   262,   262,   262,   262,     0,   262,     0,   218, 
          0,     0,     0,   264,   264,     0,   257,   257,   262,   262, 
        262,   262,   262,   262,     0,     0,     0,     0,   218,    20, 
         21,    22,   229,    24,    25,     0,    26,     0,     0,     0, 
          0,     0,     0,     0,   264,   264,     0,     0,     0,     0, 
          0,     0,    27,   262,   262,     0,     0,     0,     0,     0, 
          0,   211,   211,   211,   211,   211,   211,   211,   211,   211, 
          0,    17,   211,   211,     0,   211,   211,   211,   211,   211, 
        211,   211,   211,   230,   262,   262,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   218,   218,   218, 
        218,   218,   218,   218,   218,   218,     0,     0,   218,   218, 
          0,   218,   218,   218,   218,   218,   218,   218,   218,   265, 
        265,     0,     0,   265,   265,   265,   265,   265,     0,   265, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        265,   265,   265,   265,   265,   265,   266,   266,     0,     0, 
        266,   266,   266,   266,   266,     0,   266,     0,     6,     6, 
          6,     6,     6,     6,   263,     6,     0,   266,   266,   266, 
        266,   266,   266,     0,     0,   265,   265,     0,     6,     6, 
          6,     6,     0,     0,     0,     0,     0,   254,   254,     0, 
          0,   254,   254,   254,   254,   254,     0,   254,     0,     0, 
          0,     0,   266,   266,     0,     0,   265,   265,   254,   254, 
        254,   254,   254,   254,     0,     0,     0,     0,     0,     0, 
         19,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   264,   266,   266,     0,     0,     0,     0,     0, 
          0,     0,     0,   254,   254,     0,     0,     0,     0,     0, 
          0,     0,   263,   263,   305,     0,   263,   263,   263,   263, 
        263,    19,     0,   263,   263,     0,   263,   263,   263,   263, 
        263,   263,   262,   263,   254,   254,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   459,   257,   257,   257,   257, 
        257,     0,     0,     0,     0,     0,   257,   257,   257,   257, 
        257,   257,     0,     0,     0,     0,     0,     0,     0,     0, 
        264,   264,     0,     0,   264,   264,   264,   264,   264,     0, 
          0,   264,   264,     0,   264,   264,   264,   264,   264,   264, 
          0,   264,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        262,   262,     0,     0,   262,   262,   262,   262,   262,     0, 
          0,   262,   262,     0,   262,   262,   262,   262,   262,   262, 
          0,   262,   206,   195,     0,     0,   249,   204,   202,     0, 
        203,     0,   205,     0,   265,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   198,   182,   200,   192,    20, 
         21,    22,   229,    24,    25,     0,    26,     0,   206,   195, 
          0,   266,     0,   204,   202,     0,   203,     0,   205,     0, 
          0,     0,    27,     0,     0,     0,     0,     0,     0,   194, 
        397,   198,   182,   200,   192,     0,     0,     0,     0,     0, 
         20,    21,    22,   229,    24,    25,     0,    26,     0,     0, 
          0,     0,   254,   230,     0,     0,     0,     0,     0,   193, 
          0,   209,     0,    27,     0,   194,     0,     0,     0,     0, 
          0,     0,   265,   265,     0,     0,   265,   265,   265,   265, 
        265,     0,     0,   265,   265,     0,   265,   265,   265,   265, 
        265,   265,     0,   265,   230,   193,     0,   209,     0,   266, 
        266,     0,     0,   266,   266,   266,   266,   266,     0,     0, 
        266,   266,     0,   266,   266,   266,   266,   266,   266,     0, 
        266,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        254,   254,     0,     0,   254,   254,   254,   254,   254,     0, 
          0,   254,   254,     0,   254,   254,   254,   254,   254,   254, 
          0,   254,   206,   195,     0,     0,   460,   204,   202,     0, 
        203,     0,   205,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   198,   182,   200,   192,   206, 
        195,     0,     0,     0,   204,   202,     0,   203,     0,   205, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   471,   198,   182,   200,   192,   206,   195,     0,   194, 
        506,   204,   202,     0,   203,     0,   205,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   198, 
        182,   200,   192,     0,     0,     0,   194,   208,     0,   193, 
          0,   209,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   212,     0,     0,     0, 
          0,     0,     0,   194,     0,     0,   193,     0,   209,     0, 
          0,     0,     0,   208,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   212,   193,     0,   209,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   201,   199,   210,   211,   183, 
        184,   185,   186,   188,     0,     0,   196,   197,     0,   180, 
        181,   187,   190,   189,   191,     0,   207,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   201,   199,   210,   211,   183,   184,   185,   186,   188, 
          0,     0,   196,   197,     0,   180,   181,   187,   190,   189, 
        191,     0,   207,   206,   195,     0,     0,   511,   204,   202, 
          0,   203,     0,   205,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   198,   182,   200,   192, 
        206,   195,     0,     0,   512,   204,   202,     0,   203,     0, 
        205,     0,     0,     0,     0,     0,     0,   208,     0,     0, 
          0,     0,     0,   198,   182,   200,   192,     0,     0,     0, 
        194,     0,     0,     0,     0,     0,   212,     0,     0,     0, 
          0,   206,   195,     0,   208,   559,   204,   202,     0,   203, 
          0,   205,     0,     0,     0,     0,     0,   194,     0,     0, 
        193,     0,   209,   212,   198,   182,   200,   192,     0,     0, 
          0,   208,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   193,     0,   209, 
        212,     0,     0,     0,     0,     0,     0,     0,   194,     0, 
          0,     0,     0,     0,     0,   201,   199,   210,   211,   183, 
        184,   185,   186,   188,     0,     0,   196,   197,     0,   180, 
        181,   187,   190,   189,   191,     0,   207,     0,   193,     0, 
        209,     0,   201,   199,   210,   211,   183,   184,   185,   186, 
        188,     0,     0,   196,   197,     0,   180,   181,   187,   190, 
        189,   191,     0,   207,     0,     0,     0,     0,     0,   201, 
        199,   210,   211,   183,   184,   185,   186,   188,     0,     0, 
        196,   197,     0,   180,   181,   187,   190,   189,   191,     0, 
        207,   206,   195,     0,     0,   560,   204,   202,     0,   203, 
          0,   205,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   198,   182,   200,   192,   206,   195, 
          0,     0,     0,   204,   202,     0,   203,     0,   205,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        584,   198,   182,   200,   192,   206,   195,     0,   194,     0, 
        204,   202,     0,   203,     0,   205,     0,     0,   208,     0, 
          0,     0,     0,     0,     0,     0,   598,     0,   198,   182, 
        200,   192,     0,     0,     0,   194,     0,   212,   193,     0, 
        209,     0,     0,     0,     0,   208,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   194,     0,   212,   193,     0,   209,     0,     0, 
          0,     0,     0,     0,   261,   261,     0,     0,   261,   261, 
        261,   261,   261,     0,   261,     0,   208,     0,     0,     0, 
          0,     0,   193,     0,   209,   261,   261,   261,   261,   261, 
        261,     0,     0,     0,     0,   212,   201,   199,   210,   211, 
        183,   184,   185,   186,   188,     0,     0,   196,   197,     0, 
        180,   181,   187,   190,   189,   191,     0,   207,     0,     0, 
        261,   261,     0,   201,   199,   210,   211,   183,   184,   185, 
        186,   188,     0,     0,   196,   197,     0,   180,   181,   187, 
        190,   189,   191,     0,   207,     0,     0,     0,     0,     0, 
          0,   261,   261,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   201,   199,   210,   211,   183,   184, 
        185,   186,   188,     0,     0,   196,   197,     0,   180,   181, 
        187,   190,   189,   191,     0,   207,     0,     0,   260,   260, 
          0,     0,   260,   260,   260,   260,   260,     0,   260,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   260, 
        260,   260,   260,   260,   260,     0,   208,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   212,     0,     0,     0,     0, 
          0,   206,   195,   208,   260,   260,   204,   202,     0,   203, 
          0,   205,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   212,     0,   198,   182,   200,   192,     0,     0, 
        208,     0,     0,     0,     0,   260,   260,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   212, 
          0,     0,     0,     0,     0,     0,     0,     0,   194,     0, 
          0,     0,     0,     0,   201,   199,   210,   211,   183,   184, 
        185,   186,   188,     0,     0,   196,   197,     0,   180,   181, 
        187,   190,   189,   191,     0,   207,     0,     0,   193,     0, 
        209,   201,   199,   210,   211,   183,   184,   185,   186,   188, 
          0,     0,   196,   197,     0,   180,   181,   187,   190,   189, 
        191,     0,   207,     0,     0,     0,     0,     0,   201,   199, 
        210,   211,   183,   184,   185,   186,   188,     0,     0,   196, 
        197,     0,   180,   181,   187,   190,   189,   191,     0,   207, 
        206,   195,     0,     0,     0,   204,   202,     0,   203,     0, 
        205,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   198,   182,   200,   192,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   261,   261,     0, 
          0,   261,   261,   261,   261,   261,     0,   194,   261,   261, 
          0,   261,   261,   261,   261,   261,   261,   206,   261,     0, 
          0,     0,   204,   202,     0,   203,     0,   205,   206,   195, 
          0,     0,     0,   204,   202,     0,   203,   193,   205,   209, 
        198,     0,   200,     0,     0,     0,     0,     0,     0,     0, 
          0,   198,   182,   200,   192,     0,   251,   251,     0,     0, 
        251,   251,   251,   251,   251,     0,   251,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   251,   251,   251, 
        251,   251,   251,     0,     0,   194,   208,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   212,   209,     0,     0,     0, 
          0,     0,   251,   251,     0,   193,     0,   209,     0,     0, 
          0,   260,   260,     0,     0,   260,   260,   260,   260,   260, 
          0,     0,   260,   260,     0,   260,   260,   260,   260,   260, 
        260,     0,   260,   251,   251,   252,   252,     0,     0,   252, 
        252,   252,   252,   252,     0,   252,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   252,   252,   252,   252, 
        252,   252,     0,     0,   201,   199,   210,   211,   183,   184, 
        185,   186,   188,     0,     0,   196,   197,     0,   180,   181, 
        187,   190,   189,   191,     0,   207,     0,     0,     0,     0, 
          0,   252,   252,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,   253,   253,     0,     0,   253,   253,   253, 
        253,   253,     0,   253,     0,   208,     0,     0,     0,     0, 
          0,     0,   252,   252,   253,   253,   253,   253,   253,   253, 
        249,     0,     0,   249,   212,   249,   249,   249,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        249,   249,   249,   249,   249,   249,     0,     0,     0,   253, 
        253,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,   250,     0,     0,   250,     0,   250, 
        250,   250,   208,     0,     0,   249,   249,     0,     0,     0, 
        253,   253,     0,   208,   250,   250,   250,   250,   250,   250, 
          0,   212,     0,   201,   199,   210,   211,   183,   184,   185, 
        186,   188,   212,     0,   196,   197,   249,   249,   181,   187, 
        190,   189,   191,     0,   207,     0,     0,     0,     0,   250, 
        250,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        250,   250,     0,     0,     0,     0,     0,     0,     0,     0, 
        201,   199,   210,   211,     0,     0,     0,     0,     0,     0, 
          0,   201,   199,   210,   211,   183,   184,   185,   186,   188, 
          0,   207,   196,   197,     0,     0,     0,   187,   190,   189, 
        191,     0,   207,     0,     0,     0,     0,     0,     0,   251, 
        251,     0,     0,   251,   251,   251,   251,   251,     0,     0, 
        251,   251,     0,   251,   251,   251,   251,   251,   251,     0, 
          0,     0,   243,     0,     0,   243,     0,     0,   243,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   243,   243,     0,   243,     0,   243,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   242, 
          0,     0,   242,     0,     0,   242,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   243,   243,   242, 
        242,     0,   242,     0,   242,     0,     0,     0,   252,   252, 
          0,     0,   252,   252,   252,   252,   252,     0,     0,   252, 
        252,     0,   252,   252,   252,   252,   252,   252,   243,   243, 
          0,     0,     0,     0,   242,   242,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,   244, 
          0,     0,   244,     0,     0,   244,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   242,   242,     0,     0,   244, 
        244,     0,   244,     0,   244,     0,   253,   253,     0,     0, 
        253,   253,   253,   253,   253,     0,     0,   253,   253,     0, 
        253,   253,   253,   253,   253,   253,     0,     0,     0,     0, 
          0,     0,   249,   249,   244,   244,   249,   249,   249,   249, 
        249,     0,     0,   249,   249,     0,   249,   249,   249,   249, 
        249,   249,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   244,   244,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   250,   250,     0,     0, 
        250,   250,   250,   250,   250,     0,     0,   250,   250,     0, 
        250,   250,   250,   250,   250,   250,   259,     0,     0,   259, 
          0,     0,   259,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   240,     0,     0,   240,   259,   259,   240,   259, 
          0,   259,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   240,   240,     0,   240,   258,   240,     0,   258, 
          0,     0,   258,     0,     0,     0,     0,     0,     0,     0, 
          0,   259,   259,     0,     0,     0,   258,   258,     0,   258, 
          0,   258,     0,     0,     0,     0,     0,   240,   240,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   239,   259,   259,   239,     0,     0,   239,     0,     0, 
          0,   258,   258,     0,     0,     0,     0,     0,   240,   240, 
          0,   239,   239,     0,   239,   256,   239,     0,   256,     0, 
          0,   256,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,   258,   258,     0,   256,   256,     0,   256,     0, 
        256,     0,     0,     0,     0,     0,   239,   239,   243,   243, 
        243,   243,   243,     0,     0,   243,   243,     0,   243,   243, 
        243,   243,   243,   243,     0,     0,     0,     0,     0,     0, 
        256,   256,     0,     0,     0,     0,     0,   239,   239,     0, 
          0,     0,     0,     0,     0,   242,   242,   242,   242,   242, 
          0,     0,   242,   242,     0,   242,   242,   242,   242,   242, 
        242,   256,   256,     0,     0,   245,     0,     0,   245,     0, 
          0,   245,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   246,     0,     0,   246,   245,   245,   246,   245,     0, 
        245,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   246,   246,     0,   246,     0,   246,     0,     0,     0, 
          0,     0,     0,     0,     0,   244,   244,   244,   244,   244, 
        245,   245,   244,   244,     0,   244,   244,   244,   244,   244, 
        244,     0,     0,     0,     0,     0,   246,   246,   255,     0, 
          0,   255,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   245,   245,     0,   196,   255,   255,   196,   255,     0, 
        255,     0,     0,     0,     0,     0,     0,   246,   246,     0, 
          0,   196,   196,   124,   196,   134,   196,     0,     0,     0, 
        133,     0,     0,   122,     0,   123,     0,     0,     0,     0, 
        255,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        277,     0,     0,     0,     0,     0,   196,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,   255,   255,     0,     0,     0,     0,     0,     0,     0, 
          0,    83,   259,   259,   259,   259,   259,     0,   196,   259, 
        259,     0,   259,   259,   259,   259,   259,   259,   240,   240, 
        240,   240,   240,     0,     0,   240,   240,     0,   240,   240, 
        240,   240,   240,   240,     0,     0,   125,     0,     0,     0, 
          0,     0,   258,   258,   258,   258,   258,     0,     0,   258, 
        258,     0,   258,   258,   258,   258,   258,   258,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   239,   239,   239, 
        239,   239,     0,     0,   239,   239,     0,   239,   239,   239, 
        239,   239,   239,     0,     0,     0,     0,     0,     0,     0, 
          0,   256,   256,   256,   256,   256,     0,     0,     0,     0, 
          0,   256,   256,   256,   256,   256,   256,     0,     0,   124, 
          0,   134,     0,     0,     0,     0,   133,     0,     0,   122, 
        124,   123,   134,     0,     0,     0,     0,   133,     0,   124, 
        122,   134,   123,     0,     0,     0,   133,     0,   281,   122, 
          0,   123,     0,     0,     0,   121,     0,     0,     0,     0, 
        164,    85,    86,    87,    88,    89,     0,   273,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,    83,     0,     0, 
          0,     0,     0,     0,     0,     0,    10,     0,    83,     0, 
          0,   245,   245,   245,   245,   245,     0,    83,     0,     0, 
          0,   245,   245,   245,   245,   245,   245,   246,   246,   246, 
        246,   246,   125,   129,     0,     0,     0,   246,   246,   246, 
        246,   246,   246,   125,     0,     0,   124,     0,   134,     0, 
          0,     0,   125,   133,     0,     0,   122,   124,   123,   134, 
        132,     0,     0,     0,   133,     0,   128,   122,     0,   123, 
          0,     0,     0,     0,   275,     0,     0,     0,     0,     0, 
          0,   255,   255,   255,   255,   255,     0,     0,     0,     0, 
          0,   255,   255,   255,   255,   255,   255,   196,   196,   196, 
        196,   196,     0,     0,    83,     0,     0,   196,   196,   196, 
        196,   196,   196,     0,     0,    83,     0,     0,   124,     0, 
        134,   278,   126,   127,     0,   133,     0,     0,   122,     0, 
        123,     0,     0,     0,     0,     0,     0,     0,     0,   125, 
          0,     0,     0,     0,     0,     0,     0,   373,     0,     0, 
        125,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,   164,    85,    86,    87, 
         88,    89,     0,     0,     0,     0,    83,   130,   131,    86, 
         87,    88,    89,     0,     0,     0,   164,    85,    86,    87, 
         88,    89,    10,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,    10,     0,     0,     0,     0,     0,     0, 
          0,   125,    10,     0,     0,     0,     0,     0,     0,   129, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
        129,     0,     0,     0,     0,     0,     0,     0,     0,   129, 
          0,     0,     0,     0,     0,     0,   132,     0,     0,     0, 
          0,     0,   128,     0,     0,     0,     0,   132,     0,     0, 
          0,     0,     0,   128,     0,     0,   132,     0,     0,     0, 
          0,     0,   128,   164,    85,    86,    87,    88,    89,     0, 
          0,     0,     0,     0,   164,    85,    86,    87,    88,    89, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,    10, 
          0,     0,     0,     0,     0,     0,   282,     0,   126,   127, 
         10,     0,     0,     0,     0,     0,     0,     0,     0,   126, 
        127,     0,     0,     0,     0,     0,   129,     0,   126,   127, 
          0,     0,     0,     0,     0,     0,     0,   129,     0,     0, 
          0,     0,     0,     0,     0,   164,    85,    86,    87,    88, 
         89,     0,     0,   132,     0,     0,     0,     0,     0,   128, 
          0,     0,     0,     0,   132,     0,     0,     0,     0,     0, 
        128,    10,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,   129,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,   126,   127,     0,     0,     0, 
          0,     0,     0,     0,     0,   132,   126,   127,     0,     0, 
          0,   128,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,     0,     0,     0, 
          0,     0,     0,     0,     0,     0,     0,   126,   127, 
    );
    protected static $yyCheck = array(4,
        115,    41,    46,    46,    44,    42,    61,    62,    63,   126, 
         58,   123,    46,   124,    40,    59,    37,    38,    58,    59, 
         71,    42,    43,    91,    45,    91,    47,    91,    44,    34, 
         35,    91,   260,    44,   125,    40,   125,    91,   220,    60, 
         95,    62,    97,    59,    41,   125,   161,    44,    91,    37, 
        101,   102,   260,    93,    42,   260,    61,    62,    63,    47, 
        115,    58,    59,    41,    69,    70,    44,    59,   260,    37, 
         41,   260,   300,    94,    42,    43,   126,    45,   286,    47, 
         58,    59,    93,    41,   410,   125,    44,    40,    59,    94, 
         95,   283,    97,    63,   286,   300,    93,    91,    59,    41, 
         58,    59,    44,   124,    59,   126,   161,   260,   300,   125, 
        115,   300,   340,   295,   125,    93,   171,    59,   160,   176, 
         44,    91,    93,    59,   330,    44,   303,    44,   125,    63, 
         44,   123,   340,   286,   340,    93,    37,    38,   126,   260, 
         44,    42,    43,   304,    45,    91,    47,   125,    62,   154, 
        155,    93,   157,   208,   125,   100,   161,    91,   126,    60, 
        486,    62,   123,   126,    46,   286,   171,   125,   123,    93, 
        123,   260,   364,   178,    93,   364,    93,   122,   123,   124, 
        125,   126,   127,   125,   129,   242,    93,   123,   133,    93, 
         46,    40,   249,    94,   260,   312,   260,    46,    40,   311, 
        260,   383,    58,   208,    46,    39,   260,   212,   125,    58, 
         46,   332,   260,   261,   331,    49,    50,    51,   125,    91, 
        286,   125,   286,   260,    59,   126,   286,   232,   173,   340, 
        175,    91,   286,    93,   260,   180,   181,   182,   183,   184, 
        185,   186,   187,   188,   189,   190,   191,   192,   193,   194, 
        195,   196,   197,   198,   199,   200,   201,   202,   203,   204, 
        205,   206,   207,   300,   209,   257,   260,   416,   332,    60, 
         44,   328,   340,   315,   300,   220,   340,    33,   332,    35, 
        340,   331,   373,   374,    40,   402,   403,    43,    62,    45, 
        260,   312,   286,   373,   374,    46,   257,   488,    37,    38, 
         91,   246,   257,    42,    43,    40,    45,    64,    47,    44, 
        331,   460,   450,   451,   260,   372,   286,   548,   549,   324, 
         46,    60,   364,    62,   312,   516,    44,   364,   273,    40, 
        275,    41,   277,   278,    44,    91,   281,   282,   364,    40, 
        286,    59,   573,   331,   312,    46,   340,    59,   399,   312, 
        295,   489,   402,   403,   300,   301,   302,    41,    93,    41, 
         44,   125,    44,   331,    58,    94,   410,    91,   331,   125, 
        126,   316,    59,   318,   414,   415,   410,   420,   323,   400, 
        401,   402,   403,    93,   329,   219,   332,   126,   260,    41, 
        411,   412,    44,   338,   354,   400,    59,    33,    41,    35, 
        421,    44,   517,    59,    40,   410,   463,    43,   310,    45, 
         41,   312,    60,    44,   402,   403,    59,   414,   415,    41, 
         41,   366,    44,    44,   523,   524,   155,   310,   157,   389, 
        331,    61,   377,   421,   402,   403,   414,   382,   383,   402, 
        403,   386,   171,   260,   261,   450,   451,    61,   320,   178, 
         93,   550,    41,   421,   311,    91,   414,   415,   421,   123, 
        332,    41,   517,    33,    44,    35,   411,   310,   340,   260, 
         40,   506,    58,    43,    41,    45,   511,    44,    58,    59, 
         41,   486,   125,    44,   489,    91,   431,   432,   493,   125, 
        126,    58,    59,    44,   439,   440,   260,    58,    59,   400, 
        401,   402,   403,   232,   260,   261,   262,   263,   264,   265, 
        411,   412,   517,    93,   123,    41,   344,   345,    44,   574, 
        421,    91,   286,   468,   123,   560,    93,   373,   374,   320, 
        286,    58,    93,    59,   410,   480,   260,    13,    14,   594, 
        123,   332,    37,    44,   579,   125,   506,    42,    43,   340, 
         45,   511,    47,   123,    93,   590,   126,   313,   125,    44, 
        505,    93,   286,   508,   125,   510,    91,    93,   332,   574, 
        300,   301,   302,   312,   260,   123,   300,   301,   302,   300, 
        301,   302,   260,   125,   340,   341,   342,   343,    40,   594, 
        346,    33,   331,    35,   123,   324,   257,    44,    40,   544, 
        560,    43,   123,    45,   360,   361,   362,   363,   332,   365, 
        366,   260,    58,   558,   370,   371,   372,   373,   374,   579, 
         49,    50,    51,    40,   260,   261,   262,   263,   264,   265, 
        590,   126,    37,    38,    58,   580,    41,    42,    43,    44, 
         45,   260,    47,   123,    40,    40,   402,   403,    40,    91, 
        286,    41,    44,    58,    59,    60,    61,    62,    63,    93, 
         40,   400,   401,   402,   403,   125,    40,    59,    61,    40, 
         91,    41,   411,   412,   430,    61,   125,   313,   123,    41, 
        340,   125,   421,    40,   126,   125,    91,    40,    93,    94, 
        260,   261,   262,   263,   264,   265,    59,    41,    40,    59, 
         44,    40,    40,   340,   340,   341,   342,   343,    40,    59, 
        346,   260,   125,    41,    58,    59,   286,    41,    59,   124, 
        125,   126,   361,   340,   360,   361,   362,   363,    61,   365, 
        366,   123,    61,   125,   370,   260,   372,   373,   374,    59, 
         46,    41,    44,   313,    93,   123,   125,    59,   125,    93, 
         40,   364,    44,   260,   123,   280,   281,   282,   283,   284, 
        285,   286,   287,   321,   340,    41,   402,   403,    41,   340, 
        340,   341,   342,   343,    37,    91,   346,   123,   303,    42, 
         43,   125,    45,    41,    47,   125,    41,    59,   125,    44, 
        360,   361,   362,   363,   430,   365,   366,    60,    91,    62, 
        370,    40,   372,    58,    59,    37,    38,   332,    40,    41, 
         42,    43,    44,    45,   371,    47,   125,    59,   260,   261, 
        262,   263,   264,   265,   123,    41,    58,    59,    60,    61, 
         62,    63,   402,   403,   414,   415,   125,   125,    93,    58, 
        125,    41,   123,   125,   286,   123,    41,   414,   415,   123, 
         93,   257,    58,   414,   415,   125,   125,    91,    91,    91, 
        430,    93,    94,   126,    91,    41,   257,    93,   125,   125, 
        125,   313,   123,    91,    59,   125,    59,    41,    59,    41, 
         41,    41,    44,   280,   281,   282,   283,   284,   285,   364, 
        287,   123,   124,   125,   126,    41,    58,    59,   340,   341, 
        342,   343,    41,   125,   346,   125,   303,   312,     7,     6, 
         77,    99,   314,    91,   457,   451,   493,    60,   360,   361, 
        362,   363,    59,   365,   366,   104,   331,   481,   370,   212, 
        372,    93,   469,    37,    38,   530,    40,    41,    42,    43, 
         44,    45,   566,    47,   260,   261,   262,   263,   264,   265, 
        171,   530,   319,   218,    58,    59,   171,    61,    62,    63, 
        402,   403,   222,   125,   157,   324,    31,   260,   261,   262, 
        263,   264,   265,    -1,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    -1,    -1,    -1,   300,    -1,    -1,    91,   430,    93, 
         94,    58,    59,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,   410,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,   420,   421,    -1,    -1,   123, 
        124,   125,   126,    -1,    -1,   257,    93,    -1,   260,    41, 
         37,    38,    44,    -1,    41,    42,    43,    44,    45,    46, 
         47,    -1,    -1,    -1,    -1,    -1,    58,    59,    -1,   312, 
         -1,    58,    59,    60,    61,    62,    63,    -1,   125,    -1, 
         -1,    -1,   280,   281,   282,   283,   284,   285,   331,   287, 
        414,   415,    -1,    41,    -1,    -1,    44,    -1,   310,   311, 
        312,    93,    -1,    -1,    91,   303,    93,    94,   320,    -1, 
         58,    59,    -1,    41,    -1,    -1,    44,    -1,   330,   331, 
        332,    -1,   280,   281,   282,   283,   284,   285,   340,   287, 
         58,    59,    -1,   125,    -1,    -1,   334,   124,   125,   126, 
         -1,    -1,   300,   301,   302,    93,   304,    -1,    -1,    -1, 
         -1,   246,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,    -1,    -1,    -1,    -1,    93,    -1,    -1,   411,   412, 
         -1,    -1,    -1,   257,    -1,    -1,   260,   125,   421,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,   125,   410,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,   421, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,    -1, 
         47,   316,    -1,   318,    -1,    -1,   310,   311,   312,    -1, 
         -1,    58,    59,    60,    61,    62,   320,    -1,    -1,    -1, 
         -1,    -1,    -1,   338,    -1,    -1,   330,   331,   332,    -1, 
         -1,    -1,    91,    37,    38,    -1,   340,    41,    42,    43, 
         44,    45,    46,    47,    -1,    -1,    93,    94,    -1,    -1, 
         -1,    -1,   414,   415,    58,    59,    60,    61,    62,    63, 
         -1,    -1,   377,    -1,    -1,    -1,    41,   382,    -1,    44, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,   126, 
         -1,    -1,    -1,    58,    59,    -1,    -1,    91,    -1,    93, 
         94,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   312,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,   431,   421,    93,   373, 
        124,   125,   126,    -1,   331,    -1,    -1,    -1,    -1,    -1, 
         37,    38,    -1,    -1,    41,    42,    43,    44,    45,    46, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,   414,   415,    -1, 
        125,    58,    59,    60,    61,    62,    63,    -1,    -1,    -1, 
         38,    -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1, 
         -1,    -1,   426,    -1,    -1,    -1,    -1,    -1,    -1,   433, 
         58,    59,    -1,    61,    91,    63,    93,    94,    -1,    -1, 
        505,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   414,   415,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,   420,   421,    93,    94,   124,   125,   126, 
         -1,   280,   281,   282,   283,   284,   285,    -1,   287,    -1, 
         -1,    37,    38,    -1,    -1,    41,    42,    43,    44,    45, 
         -1,    47,   496,   558,   303,    -1,   124,   125,    -1,    -1, 
        504,    -1,    58,    59,    60,    61,    62,    63,    -1,    -1, 
         -1,   515,    -1,    -1,    -1,   312,   414,   415,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   330,   331,    -1,    -1,    93,    94,    -1, 
         37,    38,   546,   340,    41,    42,    43,    44,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1, 
         -1,    58,    59,    60,    61,    62,    63,    -1,   124,   125, 
        126,   575,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   593, 
         -1,    -1,    -1,    -1,   598,    -1,    93,    94,    -1,   603, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    91,   414,   415,   416, 
        417,   418,   419,    -1,   421,    -1,    -1,   124,   125,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,   312,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1, 
         -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    37,    38, 
         -1,    -1,    -1,    42,    43,    44,    45,    -1,    47,   414, 
        415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    -1,    42, 
         43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    91,    -1,    93,    94,    -1,    60,    61,    62, 
         63,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,   312,   414,   415,   416, 
        417,   418,   419,   420,   421,   124,    -1,   126,    91,    -1, 
         93,    94,    -1,    -1,    -1,   331,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,    -1,   126,    -1,   280,   281,   282,   283,   284, 
        285,    -1,   287,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,    -1,   300,   301,   302,   303,    -1, 
         -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,   125,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,    -1,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    41,   411,   412,    44,   414,   415,   416, 
        417,   418,   419,    -1,   421,    93,    94,    -1,    -1,    -1, 
         58,    59,    -1,    61,    -1,    63,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    91, 
         -1,    -1,    -1,   312,    -1,    -1,   124,   125,    58,    59, 
         60,    61,    62,    63,    -1,    93,    94,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,   312, 
         -1,    -1,    -1,    93,    94,    -1,   124,   125,    58,    59, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,   331,   280, 
        281,   282,   283,   284,   285,    -1,   287,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,   303,    93,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,   410,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   420,   421,   334,   124,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,   402, 
        403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,   420,   421,    37, 
         38,    -1,    -1,    41,    42,    43,    44,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    60,    61,    62,    63,    37,    38,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,   280,   281, 
        282,   283,   284,   285,   312,   287,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    93,    94,    -1,   300,   301, 
        302,   303,    -1,    -1,    -1,    -1,    -1,    37,    38,    -1, 
         -1,    41,    42,    43,    44,    45,    -1,    47,    -1,    -1, 
         -1,    -1,    93,    94,    -1,    -1,   124,   125,    58,    59, 
         60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1, 
         91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   312,   124,   125,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,   125,    -1,   404,   405,   406,   407, 
        408,    91,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,   312,   421,   124,   125,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   125,   404,   405,   406,   407, 
        408,    -1,    -1,    -1,    -1,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,   421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,   421,    37,    38,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,   312,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,   280, 
        281,   282,   283,   284,   285,    -1,   287,    -1,    37,    38, 
         -1,   312,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,   303,    -1,    -1,    -1,    -1,    -1,    -1,    94, 
         59,    60,    61,    62,    63,    -1,    -1,    -1,    -1,    -1, 
        280,   281,   282,   283,   284,   285,    -1,   287,    -1,    -1, 
         -1,    -1,   312,   334,    -1,    -1,    -1,    -1,    -1,   124, 
         -1,   126,    -1,   303,    -1,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,    -1,    -1,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,   421,   334,   124,    -1,   126,    -1,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
        421,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,    -1,    -1,   404,   405,   406,   407,   408,    -1, 
         -1,   411,   412,    -1,   414,   415,   416,   417,   418,   419, 
         -1,   421,    37,    38,    -1,    -1,    41,    42,    43,    -1, 
         45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63,    37, 
         38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    59,    60,    61,    62,    63,    37,    38,    -1,    94, 
         41,    42,    43,    -1,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    60, 
         61,    62,    63,    -1,    -1,    -1,    94,   312,    -1,   124, 
         -1,   126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1, 
         -1,    -1,    -1,    94,    -1,    -1,   124,    -1,   126,    -1, 
         -1,    -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,   124,    -1,   126,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,    37,    38,    -1,    -1,    41,    42,    43, 
         -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    60,    61,    62,    63, 
         37,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,   312,    -1,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
         94,    -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1, 
         -1,    37,    38,    -1,   312,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    94,    -1,    -1, 
        124,    -1,   126,   331,    60,    61,    62,    63,    -1,    -1, 
         -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,   126, 
        331,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    -1, 
         -1,    -1,    -1,    -1,    -1,   400,   401,   402,   403,   404, 
        405,   406,   407,   408,    -1,    -1,   411,   412,    -1,   414, 
        415,   416,   417,   418,   419,    -1,   421,    -1,   124,    -1, 
        126,    -1,   400,   401,   402,   403,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,   421,    -1,    -1,    -1,    -1,    -1,   400, 
        401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
        421,    37,    38,    -1,    -1,    41,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    60,    61,    62,    63,    37,    38, 
         -1,    -1,    -1,    42,    43,    -1,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         59,    60,    61,    62,    63,    37,    38,    -1,    94,    -1, 
         42,    43,    -1,    45,    -1,    47,    -1,    -1,   312,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    -1,    60,    61, 
         62,    63,    -1,    -1,    -1,    94,    -1,   331,   124,    -1, 
        126,    -1,    -1,    -1,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    94,    -1,   331,   124,    -1,   126,    -1,    -1, 
         -1,    -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42, 
         43,    44,    45,    -1,    47,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,   124,    -1,   126,    58,    59,    60,    61,    62, 
         63,    -1,    -1,    -1,    -1,   331,   400,   401,   402,   403, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,   421,    -1,    -1, 
         93,    94,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,   421,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,    37,    38, 
         -1,    -1,    41,    42,    43,    44,    45,    -1,    47,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58, 
         59,    60,    61,    62,    63,    -1,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,    -1,    -1,    -1,    -1, 
         -1,    37,    38,   312,    93,    94,    42,    43,    -1,    45, 
         -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   331,    -1,    60,    61,    62,    63,    -1,    -1, 
        312,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   331, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    -1, 
         -1,    -1,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,   124,    -1, 
        126,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,    -1,    -1,    -1,    -1,    -1,   400,   401, 
        402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,   421, 
         37,    38,    -1,    -1,    -1,    42,    43,    -1,    45,    -1, 
         47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    60,    61,    62,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    94,   411,   412, 
         -1,   414,   415,   416,   417,   418,   419,    37,   421,    -1, 
         -1,    -1,    42,    43,    -1,    45,    -1,    47,    37,    38, 
         -1,    -1,    -1,    42,    43,    -1,    45,   124,    47,   126, 
         60,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    60,    61,    62,    63,    -1,    37,    38,    -1,    -1, 
         41,    42,    43,    44,    45,    -1,    47,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60, 
         61,    62,    63,    -1,    -1,    94,   312,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   331,   126,    -1,    -1,    -1, 
         -1,    -1,    93,    94,    -1,   124,    -1,   126,    -1,    -1, 
         -1,   400,   401,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,   421,   124,   125,    37,    38,    -1,    -1,    41, 
         42,    43,    44,    45,    -1,    47,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61, 
         62,    63,    -1,    -1,   400,   401,   402,   403,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,   421,    -1,    -1,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    37,    38,    -1,    -1,    41,    42,    43, 
         44,    45,    -1,    47,    -1,   312,    -1,    -1,    -1,    -1, 
         -1,    -1,   124,   125,    58,    59,    60,    61,    62,    63, 
         38,    -1,    -1,    41,   331,    43,    44,    45,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         58,    59,    60,    61,    62,    63,    -1,    -1,    -1,    93, 
         94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    38,    -1,    -1,    41,    -1,    43, 
         44,    45,   312,    -1,    -1,    93,    94,    -1,    -1,    -1, 
        124,   125,    -1,   312,    58,    59,    60,    61,    62,    63, 
         -1,   331,    -1,   400,   401,   402,   403,   404,   405,   406, 
        407,   408,   331,    -1,   411,   412,   124,   125,   415,   416, 
        417,   418,   419,    -1,   421,    -1,    -1,    -1,    -1,    93, 
         94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        400,   401,   402,   403,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   400,   401,   402,   403,   404,   405,   406,   407,   408, 
         -1,   421,   411,   412,    -1,    -1,    -1,   416,   417,   418, 
        419,    -1,   421,    -1,    -1,    -1,    -1,    -1,    -1,   400, 
        401,    -1,    -1,   404,   405,   406,   407,   408,    -1,    -1, 
        411,   412,    -1,   414,   415,   416,   417,   418,   419,    -1, 
         -1,    -1,    38,    -1,    -1,    41,    -1,    -1,    44,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38, 
         -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    93,    94,    58, 
         59,    -1,    61,    -1,    63,    -1,    -1,    -1,   400,   401, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   124,   125, 
         -1,    -1,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38, 
         -1,    -1,    41,    -1,    -1,    44,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    58, 
         59,    -1,    61,    -1,    63,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    -1,    -1,    -1,    -1, 
         -1,    -1,   400,   401,    93,    94,   404,   405,   406,   407, 
        408,    -1,    -1,   411,   412,    -1,   414,   415,   416,   417, 
        418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   124,   125,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,   401,    -1,    -1, 
        404,   405,   406,   407,   408,    -1,    -1,   411,   412,    -1, 
        414,   415,   416,   417,   418,   419,    38,    -1,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    38,    -1,    -1,    41,    58,    59,    44,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    58,    59,    -1,    61,    38,    63,    -1,    41, 
         -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    58,    59,    -1,    61, 
         -1,    63,    -1,    -1,    -1,    -1,    -1,    93,    94,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    38,   124,   125,    41,    -1,    -1,    44,    -1,    -1, 
         -1,    93,    94,    -1,    -1,    -1,    -1,    -1,   124,   125, 
         -1,    58,    59,    -1,    61,    38,    63,    -1,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,   124,   125,    -1,    58,    59,    -1,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    93,    94,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1, 
         93,    94,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         -1,    -1,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,   124,   125,    -1,    -1,    38,    -1,    -1,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    38,    -1,    -1,    41,    58,    59,    44,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    58,    59,    -1,    61,    -1,    63,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   404,   405,   406,   407,   408, 
         93,    94,   411,   412,    -1,   414,   415,   416,   417,   418, 
        419,    -1,    -1,    -1,    -1,    -1,    93,    94,    41,    -1, 
         -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    41,    58,    59,    44,    61,    -1, 
         63,    -1,    -1,    -1,    -1,    -1,    -1,   124,   125,    -1, 
         -1,    58,    59,    33,    61,    35,    63,    -1,    -1,    -1, 
         40,    -1,    -1,    43,    -1,    45,    -1,    -1,    -1,    -1, 
         93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         60,    -1,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    91,   404,   405,   406,   407,   408,    -1,   125,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,   404,   405, 
        406,   407,   408,    -1,    -1,   411,   412,    -1,   414,   415, 
        416,   417,   418,   419,    -1,    -1,   126,    -1,    -1,    -1, 
         -1,    -1,   404,   405,   406,   407,   408,    -1,    -1,   411, 
        412,    -1,   414,   415,   416,   417,   418,   419,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,   405,   406, 
        407,   408,    -1,    -1,   411,   412,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,   414,   415,   416,   417,   418,   419,    -1,    -1,    33, 
         -1,    35,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43, 
         33,    45,    35,    -1,    -1,    -1,    -1,    40,    -1,    33, 
         43,    35,    45,    -1,    -1,    -1,    40,    -1,    62,    43, 
         -1,    45,    -1,    -1,    -1,    58,    -1,    -1,    -1,    -1, 
        260,   261,   262,   263,   264,   265,    -1,    61,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    91,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    91,    -1,    -1, 
         -1,   414,   415,   416,   417,   418,   419,   404,   405,   406, 
        407,   408,   126,   313,    -1,    -1,    -1,   414,   415,   416, 
        417,   418,   419,   126,    -1,    -1,    33,    -1,    35,    -1, 
         -1,    -1,   126,    40,    -1,    -1,    43,    33,    45,    35, 
        340,    -1,    -1,    -1,    40,    -1,   346,    43,    -1,    45, 
         -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1, 
         -1,   404,   405,   406,   407,   408,    -1,    -1,    -1,    -1, 
         -1,   414,   415,   416,   417,   418,   419,   404,   405,   406, 
        407,   408,    -1,    -1,    91,    -1,    -1,   414,   415,   416, 
        417,   418,   419,    -1,    -1,    91,    -1,    -1,    33,    -1, 
         35,   401,   402,   403,    -1,    40,    -1,    -1,    43,    -1, 
         45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1, 
        126,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,   265,    -1,    -1,    -1,    -1,    91,   260,   261,   262, 
        263,   264,   265,    -1,    -1,    -1,   260,   261,   262,   263, 
        264,   265,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,   126,   286,    -1,    -1,    -1,    -1,    -1,    -1,   313, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
        313,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313, 
         -1,    -1,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1, 
         -1,    -1,   346,    -1,    -1,    -1,    -1,   340,    -1,    -1, 
         -1,    -1,    -1,   346,    -1,    -1,   340,    -1,    -1,    -1, 
         -1,    -1,   346,   260,   261,   262,   263,   264,   265,    -1, 
         -1,    -1,    -1,    -1,   260,   261,   262,   263,   264,   265, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286, 
         -1,    -1,    -1,    -1,    -1,    -1,   400,    -1,   402,   403, 
        286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402, 
        403,    -1,    -1,    -1,    -1,    -1,   313,    -1,   402,   403, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   260,   261,   262,   263,   264, 
        265,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1,   346, 
         -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,    -1, 
        346,   286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   313,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   402,   403,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,   340,   402,   403,    -1,    -1, 
         -1,   346,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1, 
         -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,   403, 
    );
    protected static $yyFinal= 2;
    protected static $yyName= array(    
      'end-of-file', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "'!'", NULL, "'#'", NULL, "'%'", "'&'", 
      NULL, "'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, "':'", "';'", "'<'", "'='", "'>'", 
      "'?'", "'@'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, "'['", NULL, "']'", "'^'", NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, "'{'", "'|'", "'}'", "'~'", NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_ARROW', NULL, NULL, 'T_WORD', 'T_STRING', 'T_NUMBER', 'T_DECIMAL', 
      'T_HEX', 'T_OCTAL', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, 'T_PUBLIC', 'T_PRIVATE', 'T_PROTECTED', 'T_STATIC', 
      'T_FINAL', 'T_ABSTRACT', 'T_NATIVE', 'T_INLINE', NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, 'T_CLASS', 'T_INTERFACE', 'T_ENUM', 
      'T_PACKAGE', 'T_IMPORT', NULL, NULL, NULL, NULL, NULL, 'T_EXTENDS', 
      'T_IMPLEMENTS', 'T_INSTANCEOF', 'T_CLONE', NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_OPERATOR', 'T_THROWS', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_DOTS', 'T_AS', 'T_THIS', NULL, 'T_CONST', NULL, NULL, NULL, NULL, NULL, 
      'T_VARIABLE', 'T_RETURN', 'T_TRY', 'T_THROW', 'T_CATCH', 'T_FINALLY', 
      'T_NEW', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, 'T_FOR', 'T_WHILE', 'T_DO', 'T_FOREACH', 'T_IN', 'T_BREAK', 
      'T_CONTINUE', NULL, NULL, NULL, 'T_IF', 'T_ELSE', 'T_SWITCH', 'T_CASE', 
      'T_DEFAULT', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_GE', 'T_SE', 'T_INC', 'T_DEC', 'T_ADD_EQUAL', 'T_SUB_EQUAL', 
      'T_MUL_EQUAL', 'T_DIV_EQUAL', 'T_MOD_EQUAL', NULL, 'T_DOUBLE_COLON', 
      'T_EQUALS', 'T_NOT_EQUALS', 'T_DOUBLE_ARROW', 'T_BOOLEAN_OR', 
      'T_BOOLEAN_AND', 'T_CONCAT_EQUAL', 'T_OR_EQUAL', 'T_AND_EQUAL', 
      'T_XOR_EQUAL', 'T_NAV', 'T_EXP', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
      'T_WITH', 
    );

    protected static $yyTableCount= 0, $yyNameCount= 0;

    static function __static() {
      self::$yyTableCount= sizeof(self::$yyTable);
      self::$yyNameCount= sizeof(self::$yyName);
    }

    /**
     * Retrieves name of a given token
     *
     * @param   int token
     * @return  string name
     */
    protected function yyname($token) {
      return isset(self::$yyName[$token]) ? self::$yyName[$token] : '<unknown>';
    }

    /**
     * Helper method for yyexpecting
     *
     * @param   int n
     * @return  string[] list of token names.
     */
    protected function yysearchtab($n) {
      if (0 == $n) return array();

      for (
        $result= array(), $token= $n < 0 ? -$n : 0; 
        $token < self::$yyNameCount && $n+ $token < self::$yyTableCount; 
        $token++
      ) {
        if (@self::$yyCheck[$n+ $token] == $token && !isset($result[$token])) {
          $result[$token]= self::$yyName[$token];
        }
      }
      return array_filter(array_values($result));
    }

    /**
     * Computes list of expected tokens on error by tracing the tables.
     *
     * @param   int state for which to compute the list.
     * @return  string[] list of token names.
     */
    protected function yyexpecting($state) {
      return array_merge($this->yysearchtab(self::$yySindex[$state], self::$yyRindex[$state]));
    }

    /**
     * Parser main method. Maintains a state and a value stack, 
     * currently with fixed maximum size.
     *
     * @param   text.parser.generic.AbstractLexer lexer
.    * @return  mixed result of the last reduction, if any.
     */
    public function yyparse($yyLex) {
      $yyVal= NULL;
      $yyStates= $yyVals= array();
      $yyToken= -1;
      $yyState= $yyErrorFlag= 0;

      while (1) {
        for ($yyTop= 0; ; $yyTop++) {
          $yyStates[$yyTop]= $yyState;
          $yyVals[$yyTop]= $yyVal;

          for (;;) {
            if (($yyN= self::$yyDefRed[$yyState]) == 0) {

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              if (
                ($yyN= self::$yySindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyState= self::$yyTable[$yyN];       // shift to yyN
                $yyVal= $yyLex->value;
                $yyToken= -1;
                $yyErrorFlag > 0 && $yyErrorFlag--;
                continue 2;
              }
        
              if (
                ($yyN= self::$yyRindex[$yyState]) != 0 && 
                ($yyN+= $yyToken) >= 0 && 
                $yyN < self::$yyTableCount && 
                self::$yyCheck[$yyN] == $yyToken
              ) {
                $yyN= self::$yyTable[$yyN];           // reduce (yyN)
              } else {
                switch ($yyErrorFlag) {
                  case 0: return $this->error(
                    E_PARSE, 
                    sprintf(
                      'Syntax error at %s, line %d (offset %d): Unexpected %s',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1],
                      $this->yyName($yyToken)
                    ), 
                    $this->yyExpecting($yyState)
                  );
                  
                  case 1: case 2: {
                    $yyErrorFlag= 3;
                    do { 
                      if (
                        ($yyN= @self::$yySindex[$yyStates[$yyTop]]) != 0 && 
                        ($yyN+= TOKEN_YY_ERRORCODE) >= 0 && 
                        $yyN < self::$yyTableCount && 
                        self::$yyCheck[$yyN] == TOKEN_YY_ERRORCODE
                      ) {
                        $yyState= self::$yyTable[$yyN];
                        $yyVal= $yyLex->value;
                        break 3;
                      }
                    } while ($yyTop-- >= 0);

                    throw new \text\parser\generic\ParseException(sprintf(
                      'Irrecoverable syntax error at %s, line %d (offset %d)',
                      $yyLex->fileName,
                      $yyLex->position[0],
                      $yyLex->position[1]
                    ));
                  }

                  case 3: {
                    if (0 == $yyToken) {
                      throw new \text\parser\generic\ParseException(sprintf(
                        'Irrecoverable syntax error at end-of-file at %s, line %d (offset %d)',
                        $yyLex->fileName,
                        $yyLex->position[0],
                        $yyLex->position[1]
                      ));
                    }

                    $yyToken = -1;
                    break 1;
                  }
                }
              }
            }

            $yyV= $yyTop+ 1 - self::$yyLen[$yyN];
            $yyVal= $yyV > $yyTop ? NULL : $yyVals[$yyV];

            // Actions
            switch ($yyN) {

    case 1:  #line 184 "grammar/xp.jay"
    {
      $yyVal= new ParseTree();
      $yyVal->origin= $yyLex->fileName;
      $yyVal->package= $yyVals[-2+$yyTop];
      $yyVal->imports= $yyVals[-1+$yyTop];
      $yyVal->declaration= $yyVals[0+$yyTop];
    } break;

    case 3:  #line 196 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new PackageNode()); } break;

    case 4:  #line 196 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->name= $yyVals[-1+$yyTop];
    } break;

    case 7:  #line 207 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 8:  #line 208 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 9:  #line 212 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 10:  #line 215 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new NativeImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
    } break;

    case 11:  #line 218 "grammar/xp.jay"
    {
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 12:  #line 221 "grammar/xp.jay"
    {
    $this->error(E_WARNING, 'Deprecated static import form used', array($yyVals[-3+$yyTop].'::'.$yyVals[-1+$yyTop]));
    $yyVal= $yyLex->create(new StaticImportNode(array('name' => $yyVals[-3+$yyTop].'.'.$yyVals[-1+$yyTop])));
  } break;

    case 16:  #line 234 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 18:  #line 239 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 19:  #line 240 "grammar/xp.jay"
    { $yyVal= $yyVals[-2+$yyTop].'.'.$yyVals[0+$yyTop]; } break;

    case 20:  #line 246 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ClassNode(), TRUE); } break;

    case 21:  #line 246 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 22:  #line 255 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumNode(), TRUE); } break;

    case 23:  #line 255 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-7+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-7+$yyTop]->name= $yyVals[-5+$yyTop];
      $yyVals[-7+$yyTop]->parent= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->implements= $yyVals[-3+$yyTop];
      $yyVals[-7+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-7+$yyTop];
    } break;

    case 24:  #line 264 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InterfaceNode(), TRUE); } break;

    case 25:  #line 264 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->modifiers= $yyVals[-7+$yyTop][0];
      $yyVals[-6+$yyTop]->annotations= $yyVals[-7+$yyTop][1];
      $yyVals[-6+$yyTop]->name= $yyVals[-4+$yyTop];
      $yyVals[-6+$yyTop]->parents= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->setBody($yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-6+$yyTop];
    } break;

    case 26:  #line 275 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 27:  #line 276 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 28:  #line 280 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 29:  #line 281 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 30:  #line 285 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 31:  #line 286 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 32:  #line 290 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 33:  #line 291 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 34:  #line 295 "grammar/xp.jay"
    { $yyVal[]= $yyVals[0+$yyTop]; } break;

    case 35:  #line 296 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 36:  #line 300 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 37:  #line 301 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 38:  #line 302 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StaticInitializerNode($yyVals[-1+$yyTop])); } break;

    case 39:  #line 306 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 40:  #line 307 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 41:  #line 308 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 42:  #line 312 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 43:  #line 313 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 44:  #line 317 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 45:  #line 317 "grammar/xp.jay"
    {
      $yyVals[-2+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 46:  #line 320 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new EnumMemberNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 47:  #line 320 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->value= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
    } break;

    case 48:  #line 330 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new FieldNode());
      $yyVal->modifiers= $yyVals[-4+$yyTop][0];
      $yyVal->annotations= $yyVals[-4+$yyTop][1];
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->name= $yyVals[-2+$yyTop];
      $yyVal->initialization= $yyVals[-1+$yyTop];
    } break;

    case 49:  #line 337 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->modifiers= $yyVals[-5+$yyTop][0];
      $yyVals[-3+$yyTop]->annotations= $yyVals[-5+$yyTop][1];
      $yyVals[-3+$yyTop]->type= $yyVals[-4+$yyTop];
      $yyVals[-3+$yyTop]->handlers= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 50:  #line 344 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ClassConstantNode($yyVals[-3+$yyTop], new TypeName($yyVals[-4+$yyTop]), $yyVals[-1+$yyTop]));
    } break;

    case 51:  #line 350 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new PropertyNode(array('name' => $yyVals[0+$yyTop]))); } break;

    case 52:  #line 351 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IndexerNode(array('parameter' => $yyVals[-1+$yyTop]))); } break;

    case 53:  #line 355 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 54:  #line 356 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 55:  #line 360 "grammar/xp.jay"
    { $yyVal= array($yyVals[-1+$yyTop]=> NULL); } break;

    case 56:  #line 361 "grammar/xp.jay"
    { $yyVal= array($yyVals[-3+$yyTop] => $yyVals[-1+$yyTop]); } break;

    case 57:  #line 365 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 58:  #line 366 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 59:  #line 372 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 60:  #line 372 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-7+$yyTop];
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 61:  #line 383 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new MethodNode(), TRUE); } break;

    case 62:  #line 383 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-8+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-8+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= new TypeName('self');
      $yyVals[-5+$yyTop]->name= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop][0];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= array_merge((array)$yyVals[0+$yyTop], array(new ReturnNode(new VariableNode($yyVals[-7+$yyTop]))));
      $yyVals[-5+$yyTop]->extension= $yyVals[-3+$yyTop][1];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 63:  #line 394 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 64:  #line 394 "grammar/xp.jay"
    {
      /* Assert only certain methods are allowed here. This could be done by making*/
      /* __construct and friends keywords - or this way!*/
      switch ($yyVals[-6+$yyTop]) {
        case '__construct': $yyVal= $yyLex->create(new ConstructorNode(), TRUE); break;
        default: $this->error(
          E_ERROR, 
          sprintf(
            'Method "%s" requires a return type at %s, line %d (offset %d)',
            $yyVals[-6+$yyTop],
            $yyLex->fileName,
            $p[0],
            $p[1]
          ), 
          array('__construct')
        );
        $yyVal= $yyLex->create(new MethodNode(), TRUE);
      }
      $yyVal->position= $p;
      $yyVal->modifiers= $yyVals[-7+$yyTop][0];
      $yyVal->annotations= $yyVals[-7+$yyTop][1];
      $yyVal->parameters= $yyVals[-3+$yyTop];
      $yyVal->throws= $yyVals[-1+$yyTop];
      $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 65:  #line 419 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new OperatorNode(), TRUE); } break;

    case 66:  #line 419 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->modifiers= $yyVals[-9+$yyTop][0];
      $yyVals[-5+$yyTop]->annotations= $yyVals[-9+$yyTop][1];
      $yyVals[-5+$yyTop]->returns= $yyVals[-8+$yyTop];
      $yyVals[-5+$yyTop]->symbol= $yyVals[-6+$yyTop];
      $yyVals[-5+$yyTop]->parameters= $yyVals[-3+$yyTop];
      $yyVals[-5+$yyTop]->throws= $yyVals[-1+$yyTop];
      $yyVals[-5+$yyTop]->body= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-5+$yyTop];
    } break;

    case 67:  #line 432 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[-2+$yyTop]); } break;

    case 68:  #line 433 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 69:  #line 437 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 70:  #line 438 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 71:  #line 442 "grammar/xp.jay"
    {
      $yyVal= $yyVals[0+$yyTop];
    } break;

    case 72:  #line 445 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop] && $yyVals[-3+$yyTop]->parameters= array('default' => $yyVals[-1+$yyTop]);
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 73:  #line 449 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->parameters= $yyVals[-1+$yyTop];
      $yyVal= $yyVals[-3+$yyTop];
    } break;

    case 74:  #line 456 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 75:  #line 461 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->target= '$'.$yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 76:  #line 466 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AnnotationNode()); 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 77:  #line 473 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 78:  #line 474 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 79:  #line 478 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 80:  #line 479 "grammar/xp.jay"
    { $yyVal= array($yyVals[-2+$yyTop] => $yyVals[0+$yyTop]); } break;

    case 81:  #line 483 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 82:  #line 484 "grammar/xp.jay"
    { $yyVal= (array)$yyVals[-1+$yyTop]; } break;

    case 83:  #line 485 "grammar/xp.jay"
    { $yyVal= array($yyLex->create(new ReturnNode($yyVals[-1+$yyTop]))); } break;

    case 84:  #line 489 "grammar/xp.jay"
    { $yyVal= array(NULL, NULL); } break;

    case 85:  #line 490 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop][0]['type']); } break;

    case 86:  #line 491 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], NULL); } break;

    case 87:  #line 495 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 88:  #line 496 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 89:  #line 500 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 90:  #line 501 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 91:  #line 505 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[-1+$yyTop]), $yyVals[-2+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 92:  #line 506 "grammar/xp.jay"
    { $yyVal= array_merge(array('name' => $yyVals[0+$yyTop], 'vararg' => TRUE), $yyVals[-2+$yyTop]); } break;

    case 93:  #line 507 "grammar/xp.jay"
    { $yyVal= array('assign' => $yyVals[-1+$yyTop]); $yyVals[0+$yyTop] && $yyVal['default']= $yyVals[0+$yyTop]; } break;

    case 94:  #line 511 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[0+$yyTop], 'check' => TRUE); } break;

    case 95:  #line 512 "grammar/xp.jay"
    { $yyVal= array('type' => $yyVals[-1+$yyTop], 'check' => FALSE); } break;

    case 96:  #line 516 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 97:  #line 517 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 104:  #line 536 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 106:  #line 541 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 107:  #line 542 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 108:  #line 546 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ReturnNode()); } break;

    case 109:  #line 546 "grammar/xp.jay"
    { 
      $yyVal->expression= $yyVals[-1+$yyTop];
    } break;

    case 110:  #line 549 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new IfNode()); } break;

    case 111:  #line 549 "grammar/xp.jay"
    {
      $yyVals[-6+$yyTop]->condition= $yyVals[-3+$yyTop];
      $yyVals[-6+$yyTop]->statements= $yyVals[-1+$yyTop];
      $yyVals[-6+$yyTop]->otherwise= $yyVals[0+$yyTop];
    } break;

    case 112:  #line 554 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForNode()); } break;

    case 113:  #line 554 "grammar/xp.jay"
    {
      if ($yyVals[-6+$yyTop]) {
        $yyVals[-9+$yyTop]->initialization= $yyVals[-6+$yyTop];
      }
      if ($yyVals[-2+$yyTop]) {
        $yyVals[-9+$yyTop]->loop= $yyVals[-2+$yyTop];
      }
      $yyVals[-9+$yyTop]->condition= $yyVals[-4+$yyTop];
      $yyVals[-9+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 114:  #line 564 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ForeachNode()); } break;

    case 115:  #line 564 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->assignment= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 116:  #line 569 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new WhileNode()); } break;

    case 117:  #line 569 "grammar/xp.jay"
    {
      $yyVals[-5+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-5+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 118:  #line 573 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DoNode()); } break;

    case 119:  #line 573 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-7+$yyTop]->statements= $yyVals[-5+$yyTop];
    } break;

    case 120:  #line 577 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new SwitchNode()); } break;

    case 121:  #line 577 "grammar/xp.jay"
    {
      $yyVals[-7+$yyTop]->expression= $yyVals[-4+$yyTop];
      $yyVals[-7+$yyTop]->cases= $yyVals[-1+$yyTop];
    } break;

    case 122:  #line 581 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new BreakNode()); } break;

    case 124:  #line 582 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ContinueNode()); } break;

    case 126:  #line 583 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ThrowNode()); } break;

    case 127:  #line 583 "grammar/xp.jay"
    {
      $yyVals[-3+$yyTop]->expression= $yyVals[-1+$yyTop];
    } break;

    case 128:  #line 586 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new TryNode()); } break;

    case 129:  #line 586 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->statements= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->handling= $yyVals[0+$yyTop];
      $yyVal= $yyVals[-4+$yyTop]; 
    } break;

    case 130:  #line 591 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArmNode($yyVals[-4+$yyTop]['i'], $yyVals[-4+$yyTop]['v'], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 131:  #line 594 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new WithNode($yyVals[-4+$yyTop], $yyVals[-1+$yyTop] ? $yyVals[-1+$yyTop] : array()));
    } break;

    case 133:  #line 601 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 134:  #line 602 "grammar/xp.jay"
    { $yyVal= array_merge_recursive($yyVals[-2+$yyTop], $yyVals[0+$yyTop]); } break;

    case 135:  #line 606 "grammar/xp.jay"
    {
      $yyVal= array('i' => array(), 'v' => array(new VariableNode($yyVals[0+$yyTop])));
    } break;

    case 136:  #line 609 "grammar/xp.jay"
    {
      $v= new VariableNode($yyVals[-2+$yyTop]);
      $yyVal= array('i' => array($yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => $v, 'expression' => $yyVals[0+$yyTop])))), 'v' => array($v)); 
    } break;

    case 137:  #line 616 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 138:  #line 617 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 139:  #line 621 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new AssignmentNode(array('op' => '=', 'variable' => new VariableNode($yyVals[-2+$yyTop]), 'expression' => $yyVals[0+$yyTop]))); 
    } break;

    case 140:  #line 627 "grammar/xp.jay"
    { $yyVal= array('value' => $yyVals[0+$yyTop]); } break;

    case 141:  #line 628 "grammar/xp.jay"
    { $yyVal= array('key' => $yyVals[-2+$yyTop], 'value' => $yyVals[0+$yyTop]); } break;

    case 142:  #line 632 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 144:  #line 637 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 145:  #line 638 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 146:  #line 642 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new CaseNode()); } break;

    case 147:  #line 642 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->expression= $yyVals[-2+$yyTop];
      $yyVals[-4+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 148:  #line 646 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new DefaultNode()); } break;

    case 149:  #line 646 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->statements= $yyVals[0+$yyTop];
    } break;

    case 150:  #line 652 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 151:  #line 653 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop]; } break;

    case 152:  #line 657 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 153:  #line 658 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ElseNode()); } break;

    case 154:  #line 658 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]->statements= $yyVals[0+$yyTop]; } break;

    case 155:  #line 663 "grammar/xp.jay"
    { $yyVals[0+$yyTop] === NULL || $yyVal= array_merge($yyVals[-1+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 156:  #line 664 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 157:  #line 668 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 158:  #line 669 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-1+$yyTop], $yyVals[0+$yyTop]); } break;

    case 159:  #line 673 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 160:  #line 673 "grammar/xp.jay"
    {
      $yyVal= array();
      foreach ($yyVals[-5+$yyTop] as $type) {
        $c= new CatchNode();
        $c->position= $p;
        $c->type= $type;
        $c->variable= $yyVals[-4+$yyTop];
        $c->statements= $yyVals[-1+$yyTop];
        $yyVal[]= $c;
      }
    } break;

    case 161:  #line 687 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 162:  #line 688 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 163:  #line 692 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 165:  #line 697 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new FinallyNode()); } break;

    case 166:  #line 697 "grammar/xp.jay"
    {
    $yyVals[-4+$yyTop]->statements= $yyVals[-1+$yyTop];
  } break;

    case 167:  #line 705 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 169:  #line 710 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 170:  #line 711 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 171:  #line 715 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 173:  #line 720 "grammar/xp.jay"
    {
      $yyVal= new InstanceCreationNode();
      $yyVal->type= $yyVals[-4+$yyTop];
      $yyVal->parameters= $yyVals[-2+$yyTop];
      $yyVals[0+$yyTop] && $yyVal->body= $yyVals[0+$yyTop];
    } break;

    case 174:  #line 726 "grammar/xp.jay"
    {
      $yyVal= new ArrayNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->values= (array)$yyVals[-1+$yyTop];
    } break;

    case 175:  #line 731 "grammar/xp.jay"
    {
      $yyVal= new MapNode();
      $yyVal->type= $yyVals[-3+$yyTop];
      $yyVal->elements= (array)$yyVals[-1+$yyTop];
    } break;

    case 176:  #line 739 "grammar/xp.jay"
    { 
      $yyVal= new StaticMemberAccessNode(NULL, $yyVals[0+$yyTop]); 
    } break;

    case 177:  #line 742 "grammar/xp.jay"
    { 
      $yyVal= new StaticMethodCallNode(NULL, $yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); 
    } break;

    case 178:  #line 745 "grammar/xp.jay"
    {
      $yyVal= new ConstantAccessNode(NULL, $yyVals[0+$yyTop]);
    } break;

    case 179:  #line 748 "grammar/xp.jay"
    {
      $yyVal= new ClassAccessNode(NULL);
    } break;

    case 180:  #line 754 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new VariableNode($yyVals[0+$yyTop])); } break;

    case 181:  #line 754 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-2+$yyTop];
      }
    } break;

    case 182:  #line 760 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      }
    } break;

    case 183:  #line 766 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 184:  #line 766 "grammar/xp.jay"
    { 
      $yyVals[-1+$yyTop]->position= $p;
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 185:  #line 775 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 186:  #line 775 "grammar/xp.jay"
    {
      $yyVals[-1+$yyTop]->position= $p;
      $yyVals[-1+$yyTop]->type= new TypeName($yyVals[-4+$yyTop]);
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop];
      } else {
        $yyVal= $yyVals[-1+$yyTop];
      }
    } break;

    case 187:  #line 785 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new InvocationNode($yyVals[-1+$yyTop])); } break;

    case 188:  #line 785 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-2+$yyTop];
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-4+$yyTop];
      } else {
        $yyVal= $yyVals[-4+$yyTop];
      }
    } break;

    case 189:  #line 794 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CloneNode($yyVals[0+$yyTop])); break;
    } break;

    case 190:  #line 797 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new CastNode(array_merge($yyVals[0+$yyTop], array('expression' => $yyVals[-2+$yyTop])))); 
    } break;

    case 191:  #line 800 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new AssignmentNode($yyVals[0+$yyTop])); 
    } break;

    case 192:  #line 803 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new ComparisonNode($yyVals[0+$yyTop])); 
    } break;

    case 193:  #line 806 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 194:  #line 809 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
    } break;

    case 195:  #line 812 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new UnaryOpNode($yyVals[0+$yyTop])); 
      $yyVal->postfix= TRUE; 
    } break;

    case 196:  #line 816 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new TernaryNode());
      $yyVal->condition= $yyVals[-4+$yyTop];
      $yyVal->expression= $yyVals[-2+$yyTop];
      $yyVal->conditional= $yyVals[0+$yyTop];
    } break;

    case 197:  #line 822 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '||'; 
    } break;

    case 198:  #line 828 "grammar/xp.jay"
    { 
      $yyVal= $yyLex->create(new BinaryOpNode()); 
      $yyVal->lhs= $yyVals[-2+$yyTop]; 
      $yyVal->rhs= $yyVals[0+$yyTop]; 
      $yyVal->op= '&&'; 
    } break;

    case 199:  #line 834 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new InstanceOfNode()); 
      $yyVal->expression= $yyVals[-2+$yyTop]; 
      $yyVal->type= $yyVals[0+$yyTop]; 
    } break;

    case 200:  #line 839 "grammar/xp.jay"
    { $yyVals[-5+$yyTop]= $yyLex->create(new LambdaNode($yyVals[-3+$yyTop], $yyVals[-1+$yyTop])); } break;

    case 201:  #line 839 "grammar/xp.jay"
    {
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= $yyVals[-7+$yyTop];
      }
    } break;

    case 202:  #line 845 "grammar/xp.jay"
    { 
      if ($yyVals[0+$yyTop]) {
        $yyVal= $yyVals[0+$yyTop][0];
        $yyVals[0+$yyTop][1]->target= new BracedExpressionNode($yyVals[-2+$yyTop]);
      } else {
        $yyVal= new BracedExpressionNode($yyVals[-2+$yyTop]); 
      }
    } break;

    case 203:  #line 856 "grammar/xp.jay"
    {
      $yyVal= array(new ReturnNode($yyVals[0+$yyTop]));
    } break;

    case 204:  #line 859 "grammar/xp.jay"
    {
      $yyVal= (array)$yyVals[-1+$yyTop];
    } break;

    case 205:  #line 865 "grammar/xp.jay"
    { $yyVal= array(); } break;

    case 207:  #line 870 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 208:  #line 871 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 209:  #line 875 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 210:  #line 876 "grammar/xp.jay"
    { $yyVal= new VariableNode($yyVals[0+$yyTop]); } break;

    case 211:  #line 880 "grammar/xp.jay"
    { switch ($yyVals[0+$yyTop]) {
      case 'true': $yyVal= $yyLex->create(new BooleanNode(TRUE)); break;
      case 'false': $yyVal= $yyLex->create(new BooleanNode(FALSE)); break;
      case 'null': $yyVal= $yyLex->create(new NullNode()); break;
      default: $yyVal= $yyLex->create(new ConstantNode($yyVals[0+$yyTop])); break;
    }} break;

    case 212:  #line 886 "grammar/xp.jay"
    { $p= $yyLex->position; } break;

    case 213:  #line 886 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]->position= $p; $yyVals[-1+$yyTop]->type= NULL; $yyVal= $yyVals[-1+$yyTop]; } break;

    case 214:  #line 887 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new IntegerNode($yyVals[0+$yyTop])); } break;

    case 215:  #line 888 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new HexNode($yyVals[0+$yyTop])); } break;

    case 216:  #line 889 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new OctalNode($yyVals[0+$yyTop])); } break;

    case 217:  #line 890 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new DecimalNode($yyVals[0+$yyTop])); } break;

    case 218:  #line 891 "grammar/xp.jay"
    { $yyVal= $yyLex->create(new StringNode($yyVals[0+$yyTop])); } break;

    case 219:  #line 895 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new ArrayNode(array('values' => (array)$yyVals[0+$yyTop])));
    } break;

    case 220:  #line 898 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MapNode(array('elements' => (array)$yyVals[0+$yyTop])));
    } break;

    case 221:  #line 904 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 223:  #line 909 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 224:  #line 910 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop] ? array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])) : $yyVals[-2+$yyTop]; } break;

    case 225:  #line 914 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 227:  #line 919 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 228:  #line 920 "grammar/xp.jay"
    { $yyVal= array(new StringNode($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 229:  #line 924 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 230:  #line 925 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 231:  #line 926 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 232:  #line 927 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 233:  #line 928 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 234:  #line 929 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 235:  #line 930 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 236:  #line 931 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 237:  #line 932 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 238:  #line 933 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-2+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 239:  #line 934 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 240:  #line 935 "grammar/xp.jay"
    { $yyVal= array('variable' => $yyVals[-3+$yyTop], 'expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 241:  #line 939 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 242:  #line 940 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 243:  #line 941 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 244:  #line 942 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 245:  #line 943 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 246:  #line 944 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 247:  #line 945 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 248:  #line 946 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].'='); } break;

    case 249:  #line 950 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 250:  #line 951 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 251:  #line 952 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 252:  #line 953 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 253:  #line 954 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 254:  #line 955 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 255:  #line 956 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 256:  #line 957 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 257:  #line 958 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 258:  #line 959 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 259:  #line 960 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-3+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-2+$yyTop].$yyVals[-1+$yyTop]); } break;

    case 260:  #line 961 "grammar/xp.jay"
    { $yyVal= array('lhs' => $yyVals[-2+$yyTop], 'rhs' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 261:  #line 965 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 262:  #line 966 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 263:  #line 967 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 264:  #line 968 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 265:  #line 969 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 266:  #line 970 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[0+$yyTop], 'op' => $yyVals[-1+$yyTop]); } break;

    case 267:  #line 974 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 268:  #line 975 "grammar/xp.jay"
    { $yyVal= array('expression' => $yyVals[-1+$yyTop], 'op' => $yyVals[0+$yyTop]); } break;

    case 269:  #line 980 "grammar/xp.jay"
    { $yyVal= NULL; } break;

    case 271:  #line 985 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop], $yyVals[0+$yyTop]); } break;

    case 272:  #line 986 "grammar/xp.jay"
    { $yyVals[0+$yyTop][1]->target= $yyVals[-1+$yyTop]; $yyVal= array($yyVals[0+$yyTop][0], $yyVals[-1+$yyTop]); } break;

    case 273:  #line 990 "grammar/xp.jay"
    { $yyVals[0+$yyTop]= $yyLex->create(new ArrayAccessNode(NULL)); } break;

    case 274:  #line 990 "grammar/xp.jay"
    { 
      $yyVals[-3+$yyTop]->offset= $yyVals[-1+$yyTop];
    } break;

    case 275:  #line 993 "grammar/xp.jay"
    {
      $yyVal= $yyLex->create(new MemberAccessNode(NULL, $yyVals[0+$yyTop], $yyVals[-1+$yyTop])); 
    } break;

    case 276:  #line 996 "grammar/xp.jay"
    { $yyVals[-2+$yyTop]= $yyLex->create(new MethodCallNode(NULL, $yyVals[-1+$yyTop], NULL, $yyVals[-2+$yyTop])); } break;

    case 277:  #line 996 "grammar/xp.jay"
    { 
      $yyVals[-5+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 278:  #line 999 "grammar/xp.jay"
    { $yyVals[-1+$yyTop]= $yyLex->create(new InstanceCallNode(NULL, NULL, $yyVals[-1+$yyTop])); } break;

    case 279:  #line 999 "grammar/xp.jay"
    { 
      $yyVals[-4+$yyTop]->arguments= $yyVals[-1+$yyTop];
    } break;

    case 280:  #line 1005 "grammar/xp.jay"
    { $yyVal= FALSE; } break;

    case 281:  #line 1006 "grammar/xp.jay"
    { $yyVal= TRUE; } break;

    case 288:  #line 1024 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop]); } break;

    case 289:  #line 1025 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-3+$yyTop], $yyVals[-1+$yyTop]); } break;

    case 290:  #line 1029 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[-2+$yyTop]->compoundName().'[]'); } break;

    case 291:  #line 1033 "grammar/xp.jay"
    { $yyVal= new TypeName('[:'.$yyVals[-1+$yyTop]->compoundName().']'); } break;

    case 292:  #line 1037 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 293:  #line 1038 "grammar/xp.jay"
    { $yyVal= array_merge($yyVals[-2+$yyTop], array($yyVals[0+$yyTop])); } break;

    case 295:  #line 1043 "grammar/xp.jay"
    { $yyVal= new TypeName($yyVals[0+$yyTop].'+'); } break;

    case 296:  #line 1047 "grammar/xp.jay"
    { $yyVal= array($yyVals[0+$yyTop]); } break;

    case 297:  #line 1048 "grammar/xp.jay"
    { $yyVal= array_merge(array($yyVals[-2+$yyTop]), $yyVals[0+$yyTop]); } break;

    case 298:  #line 1054 "grammar/xp.jay"
    { $yyVal= 0; } break;

    case 299:  #line 1055 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 300:  #line 1059 "grammar/xp.jay"
    { $yyVal= $yyVals[0+$yyTop]; } break;

    case 301:  #line 1060 "grammar/xp.jay"
    { $yyVal= $yyVals[-1+$yyTop] | $yyVals[0+$yyTop]; } break;

    case 302:  #line 1064 "grammar/xp.jay"
    { $yyVal= MODIFIER_PUBLIC; } break;

    case 303:  #line 1065 "grammar/xp.jay"
    { $yyVal= MODIFIER_PROTECTED; } break;

    case 304:  #line 1066 "grammar/xp.jay"
    { $yyVal= MODIFIER_PRIVATE; } break;

    case 305:  #line 1067 "grammar/xp.jay"
    { $yyVal= MODIFIER_PACKAGE; } break;

    case 306:  #line 1068 "grammar/xp.jay"
    { $yyVal= MODIFIER_STATIC; } break;

    case 307:  #line 1069 "grammar/xp.jay"
    { $yyVal= MODIFIER_ABSTRACT; } break;

    case 308:  #line 1070 "grammar/xp.jay"
    { $yyVal= MODIFIER_FINAL; } break;

    case 309:  #line 1071 "grammar/xp.jay"
    { $yyVal= MODIFIER_INLINE; } break;
#line 2815 "-"
            }
                   
            $yyTop-= self::$yyLen[$yyN];
            $yyState= $yyStates[$yyTop];
            $yyM= self::$yyLhs[$yyN];

            if (0 == $yyState && 0 == $yyM) {
              $yyState= self::$yyFinal;

              // Check whether it's necessary to fetch the next token
              $yyToken < 0 && $yyToken= $yyLex->advance() ? $yyLex->token : 0;

              // We've reached the final token!
              if (0 == $yyToken) return $yyVal;
              continue 2;
            }

            $yyState= (
              ($yyN= self::$yyGindex[$yyM]) != 0 && 
              ($yyN+= $yyState) >= 0 && 
              $yyN < self::$yyTableCount && 
              self::$yyCheck[$yyN] == $yyState
            ) ? self::$yyTable[$yyN] : self::$yyDgoto[$yyM];
            continue 2;
          }
        }
      }
    }

  }
?>
